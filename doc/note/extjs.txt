(1)Ext.onReady():ExtJS Application的入口...就相当于Java或C#的main函数.
(2)Ext.MessageBox.alert()：弹出对话框。
Ext.onReady(function() {
        Ext.MessageBox.alert('title', 'Hello World!');
	});
-----------
window

说明：
(1)var win = new Ext.Window({}):创建一个新的Window窗体对象。
(2)title: '窗口'：窗体的标题。
(3)width: 476,height: 374：宽度及高度。
(4)html: '<div>这里是窗体内容</div>'：窗体内部显示的html内容。
(5)resizable: true：是否可以调整窗体的大小，这里设置为 true。
(6)modal: true：是否为模态窗体[什么是模态窗体？当你打开这个窗体以后，如果不能对其他的窗体进行操作，那么这个窗体就是模态窗体，否则为非模态窗体]。
(7)closable:true：是否可以关闭，也可以理解为是否显示关闭按钮。
(8)maximizable: true：是否可以最大化，也可以理解为是否显示最大化按钮。
(9)minimizable: true：是否可以最小化，也可以理解为是否显示最小化按钮。
(10)win.show()：窗体展示。

3.window 组件常用的：属性、方法及事件

一、属性 
plain：布尔类型，true表示强制与背景色保持协调，默认值为false。 
resizable：布尔类型，用户是否可以调整窗体大小，默认值为true表示可以调整大小。 
maxinizable：布尔类型，true表示显示最大化按钮，默认值为false。 
maximized：布尔类型，true表示显示窗体时将窗体最大化，默认值为false。 
closable：布尔类型，true表示显示关闭按钮，默认值为true。 
bodyStyle：与边框的间距，如：bodyStyle:"padding:3px"。 
buttonAlign：窗体中button的对齐方式(left、center、right)，默认值为right。 
closeAction："close"释放窗体所占内存，"hide"隐藏窗体，建议使用"hide"。

二、方法 
show：打开窗体。 
hide：隐藏窗体。 
close：关闭窗体。

三、事件 
show：打开窗体时触法。 
hide：隐藏窗体时触法。 
close：关闭窗体时触法

 var win = new Ext.Window({
            title : 'tile',
            width : 476,
            height : 374,
            html : '<div>this is window somethings</div>',
            resizable : true,
            modal : true,
            closable : true,
            maximizable : true,
            minimizable : true,
            //items : form
        });
        win.show();


-------------------------
form

 说明：
(1)var form = new Ext.form.FormPanel({}):创建一个新的form表单对象。
(2)title: '表单标题'：表单的标题，如果不加的话，不会出现上面的浅色表单标题栏。
(3)style: 'margin:10px':表单的样式，加了个外10px的外边距。
(4)html: '<div style="padding:10px">这里表单内容</div>'：表单内显示html的内容。

form 组件常用的：属性、方法及事件

一、属性

width:整型，表单宽度。

height:整型，表单高度。

url:字符串，表单提交地址。

二、方法

reset:表单重置。

isValid:表单是否验证全部通过。

submit:表单提交。

        var form = new Ext.form.FormPanel({
            frame : true,
            title : 'form title',
            style : 'margin:10px',
            html : '<div style="padding:10px">form context</div>'
        });

----------------------
textfield

 说明：
(1)Ext.QuickTips.init()：QuickTips的作用是初始化标签中的Ext:Qtip属性，并为它赋予显示提示的动作。
(2)Ext.form.Field.prototype.msgTarget = 'side'：TextField的提示方式为：在右边缘，如上图所示，参数枚举值为"qtip","title","under","side",id(元素id)，
   side方式用的较多，右边出现红色感叹号，鼠标上去出现错误提示。
(3)var txtusername = new Ext.form.TextField():创建一个新的TextField文本框对象。
(4)allowBlank: false：不允许文本框为空。
(5)maxLength: 20：文本框的最大长度为20个字符，当超过20个字符时仍然可以继续输入，但是Ext会提示警告信息。
(6)name: 'password'：表单名称，这个比较重要，因为我们在与服务器交互的时候，服务端是按name接收post的参数值。
(7)fieldLabel: '用户名'：文本框前面显示的文字标题，如“用户名”，“密码”等。
(8)blankText: '请输入用户名'：当非空校验没有通过时的提示信息。
(9) maxLengthText: '用户不能超过20个字符'：当最大长度校验没有通过时的提示信息。

textfield组件常用的：属性、方法及事件 

一、属性

allowBlank：是否允许为空，默认为true
blankText：空验证失败后显示的提示信息
emptyText：在一个空字段中默认显示的信息
grow：字段是否自动伸展和收缩，默认为false
growMin：收缩的最小宽度
growMax：伸展的最大宽度
inputType：字段类型：默认为text
maskRe：用于过滤不匹配字符输入的正则表达式
maxLength：字段允许输入的最大长度
maxLengthText：最大长度验证失败后显示的提示信息
minLength：字段允许输入的最小长度
minLengthText：最小长度验证失败后显示的提示信息


//初始化标签中的Ext:Qtip属性。
        Ext.QuickTips.init();
        Ext.form.Field.prototype.msgTarget = 'side';
        //用户名input
        var txtusername = new Ext.form.TextField({
            width : 140,
            allowBlank : false,
            maxLength : 20,
            name : 'username',
            fieldLabel : 'user',
            blankText : 'please input your user name',
            maxLengthText : 'less 20 chars'
        });
        //密码input
        var txtpassword = new Ext.form.TextField({
            width : 140,
            allowBlank : false,
            maxLength : 20,
            inputType : 'password',
            name : 'password',
            fieldLabel : 'Pwd',
            blankText : 'please input your password',
            maxLengthText : 'less 20 chars'
        });
        //表单
        var form = new Ext.form.FormPanel({
            frame : true,
            title : 'form title',
            style : 'margin:10px',
            html : '<div style="padding:10px">form context</div>',
            items : [ txtusername,txtpassword]
        });

////////////////////////////

button

button组件常用的：属性、方法及事件 

一、属性

text:字符串，显示在按钮上的文字。

minWidth: 整型，最小宽度。

二、事件

handler:首发方法处理事件。

listeners:事件监听。


 //提交按钮处理方法
        var btnsubmitclick = function() {
            Ext.MessageBox.alert('提示', '你点了确定按钮!');
        }
        //按钮
        var btnsubmit = new Ext.Button({
            text : "submit",
            handler : btnsubmitclick
        });

        //重置按钮"鼠标悬停"处理方法
        var btnresetmouseover = function() {
            Ext.MessageBox.alert('提示', '你鼠标悬停在重置按钮之上!');
        }
        //重置按钮"点击时"处理方法
        var btnresetclick = function() {
            Ext.MessageBox.alert('提示', '你点了重置按钮!');
        }
        var btnreset = new Ext.Button({
            text : "reset",
            listeners : {
                'mouseover' : btnresetmouseover,
                'click' : btnresetclick
            }
        });
        //表单
        var form = new Ext.form.FormPanel({
            frame : true,
            title : 'form title',
            style : 'margin:10px',
            html : '<div style="padding:10px">form context</div>',
            items : [ txtusername, txtpassword ],
            buttons : [ btnsubmit, btnreset ]
        });
 <!--
说明：
(1)var btnsubmit = new Ext.Button():创建一个新的Button按钮对象。
(2)handler: btnsubmitclick：当用户点击的时候[即js中的onclick事件]执行方法btnsubmitclick。
(3)listeners: {'mouseover': btnresetmouseover,'click': btnresetclick}：当用户点击的时候[即js中的onclick事件]执行方法btnresetclick，
    鼠标悬停时执行方法btnresetmouseover。
(4)handler与listeners的区别：
    handler:执行的是首发事件，click是button这个组件的首发事件。这就是handler的运行方式：被某个组件的首要event所触发。
            handler是一个特殊的listener。
    listener：是一个事件名 + 处理函数的组合，事件监听，如上例代码所示，我们监听了两个事件"click"，与"mouseover"事件，并且会顺序执行。
-->


///////////////////

Login case
see Login.html

//////


//----------------------重写文本框开始----------------------//
        Ext.override(Ext.form.TextField, {
            unitText: '',
            onRender: function (ct, position) {
                Ext.form.TextField.superclass.onRender.call(this, ct, position);
                // 如果单位字符串已定义 则在后方增加单位对象   
                if (this.unitText != '') {
                    this.unitEl = ct.createChild({
                        tag: 'div',
                        html: this.unitText
                    });
                    this.unitEl.addClass('x-form-unit');
                    // 增加单位名称的同时 按单位名称大小减少文本框的长度 初步考虑了中英文混排 未考虑为负的情况   
                    this.width = this.width - (this.unitText.replace(/[^\x00-\xff]/g, "xx").length * 6 + 2);
                    // 同时修改错误提示图标的位置   
                    this.alignErrorIcon = function () {
                        this.errorIcon.alignTo(this.unitEl, 'tl-tr', [2, 0]);
                    };
                }
            }
        });
        //----------------------重写文本框结束----------------------//

 //----------------------数字字段开始----------------------//
            var numberfield = new Ext.form.NumberField({
                fieldLabel: '身高',
                width: 80,
                decimalPrecision: 1,
                minValue: 0.01,
                maxValue: 200,
                unitText: ' cm',
                allowBlank: false,
                blankText: '请输入身高'
            });
            //----------------------数字字段结束----------------------//
            //----------------------隐藏域字段开始----------------------//
            var hiddenfield = new Ext.form.Hidden({
                name: 'userid',
                value: '1'
            });
            //----------------------隐藏域字段结束----------------------//
            //----------------------日期字段开始----------------------//
            var datefield = new Ext.form.DateField({
                fieldLabel: '出生日期',
                format: 'Y-m-d',
                editable: false,
                allowBlank: false,
                blankText: '请选择日期'
            });
            //----------------------日期字段结束----------------------//
说明：
(1)var numberfield = new Ext.form.NumberField():创建一个新的NumberField数字文本框对象。
(2)99行，decimalPrecision: 1：设置小数点后面的位数，当位数超过时系统会自动截断。
(3)100行，minValue: 0.01：设置数字文本框最小值。
(4)101行，maxValue: 200:设置最大值。
(5)102行，unitText: ' cm'：注意，这个属性并非 Extjs文本框自带的属性，因为我们要在“身高”的后面加上
          单位，所以在23行---43行对文本框进行了重写，重写时添加了属性"unitText"，并且在样式表中加了样式"x-form-unit"。
(6)var hiddenfield = new Ext.form.Hidden()：创建一个新的Hidden对象，隐藏字段用作参数占位符，
          一般用来保存一些不希望用户直接看到的参数，并发送到服务器，例如：用户ID等。
(7)109行，name: 'userid'：Hidden对象的名称，这个名称是在服务端接收值的名称。发送参数格式如下：userid:1。
(8)110行，value: '1'：发送的值。
(9)var datefield = new Ext.form.DateField()：创建一个新的Datefield日期对象,Extjs的日期为英文类型，
              所以要加入翻译成中文的js，代码第8行位置。
(10)116行，format: 'Y-m-d'：日期格式。
(11)117行，editable: false：设置为不可编辑。
-->


////////////////////
radio
check

 <!--
说明：
(1)var radiogroup = new Ext.form.RadioGroup():创建一个新的单选按钮组。
(2)name: 'sex'：单选按钮组是按照 name 属性来区分的，同一组中的单选按钮才能单选，
        如果name属性设置错误，该按钮将会被认为是其他组。
(3)inputValue: '0'：选择框的值。
(4)boxLabel: '男':选择框后面的文字说明。
(5)checked.getRawValue()：获取选择框的选中值，由于单选框只有一个选中值，可以直接获取，
        而复选框可以多选，所以要循环取出。
-->


//----------------------单选组开始----------------------//
            var radiogroup = new Ext.form.RadioGroup({
                fieldLabel: '性别',
                width: 100,
                items: [{
                    name: 'sex',
                    inputValue: '0',
                    boxLabel: '男',
                    checked: true
                }, {
                    name: 'sex',
                    inputValue: '1',
                    boxLabel: '女'
                }]
            });
            //获取单选组的值
            radiogroup.on('change', function (rdgroup, checked) {
                alert(checked.getRawValue());
            });
            //----------------------单选组结束----------------------//
            //----------------------复选组开始----------------------//
            var checkboxgroup = new Ext.form.CheckboxGroup({
                fieldLabel: '兴趣爱好',
                width: 170,
                items: [{
                    boxLabel: '看书',
                    inputValue: '0'
                }, {
                    boxLabel: '上网',
                    inputValue: '1'
                }, {
                    boxLabel: '听音乐',
                    inputValue: '2'
                }]
            });
            //获取复选组的值
            checkboxgroup.on('change', function (cbgroup, checked) {
                for (var i = 0; i < checked.length; i++) {
                    alert(checked[i].getRawValue());
                }
            });
            //----------------------复选组结束----------------------//


//////////////////


=-------------------------------
combobox

  //----------------------下拉列表开始----------------------//
            //创建数据源[数组数据源]
            var combostore = new Ext.data.ArrayStore({
                fields: ['id', 'name'],
                data: [[1, '团员'], [2, '党员'], [3, '其他']]
            });
            //创建Combobox
            var combobox = new Ext.form.ComboBox({
                fieldLabel: '政治面貌',
                store: combostore,
                displayField: 'name',
                valueField: 'id',
                triggerAction: 'all',
                emptyText: '请选择...',
                allowBlank: false,
                blankText: '请选择政治面貌',
                editable: false,
                mode: 'local'
            });
            //Combobox获取值
            combobox.on('select', function () {
                alert(combobox.getValue());
            })
            //----------------------下拉列表结束----------------------//
            (1)var combostore = new Ext.data.ArrayStore():创建一个新的数组数据源。
(2)fields: ['id', 'name']：数据源包含两列，列名分别为'id','name'。
(3)data: [[1, '团员'], [2, '党员'], [3, '其他']]:数据源对应的数据，例：id:1,name:团员。
(4)var combobox = new Ext.form.ComboBox()：创建一个新的下拉列表。
(5)store: combostore:数据源为上面创建的数据源，这个属性是combobox的必需属性。
(6)displayField: 'name',valueField: 'id'：combobox对应数据源的显示列与值列，这两个属性也是必须的。
(7)mode: 'local'：指定数据源为本地数据源，如果是本地创建的数据源，该属性也是必须的，如果数据源来自于服务器，
    设置为'remote'表示数据源来自于服务器，关于服务器交互后面我们会讲解。
(8)triggerAction: 'all'：请设置为”all”,否则默认 为”query”的情况下，你选择某个值后，再此下拉时，只出现匹配选项，
    如果设为all的话，每次下拉均显示全部选项。
(9)editable: false:默认情况下，combobox的内容是可以编辑的，该属性设置为false，
    使下拉列表只能选择不能编辑。
(10)combobox.on('select', function () {alert(combobox.getValue());}):选择时alert出下拉列表的值。

3.说明：

combo这个组件是需要绑定一个数据源才能使用,所以store和displayField和valueField是必须的

4.常用属性

1.valueField:"字符型"，value值字段
2.displayField："字符型",显示文本字段
3.editable：false//false则不可编辑，默认为 true
4.triggerAction:”all”//请设置为”all”,否则默认 为”query”的情况下，你选择某个值后，再此下拉时，只出现匹配选项，如果设为”all”的话，每次下拉均显示全部选项
5.hiddenName:string //真正提交时此combo的name，请一定要注意。
6.typeAhead:true,//延时查询，与下面的参数配合
7.typeAheadDelay:3000,//默认250

-------------------------------------------------------------------------------
Layout
一、常用布局

(1)ContainerLayout：默认布局方式，其他布局继承该类进行扩展功能。显示：将内部组件以垂直方式叠加。如下所示：

组件一.....

组件二.....

(2)FormLayout：产生类似表单的外观。显示：将内部组件以垂直方式叠加。如上所示：

(3)ColumnLayout：将组件以水平方式放置。如下所示：

组件一[第一列]    组件二[第二列]    组件三[第三列]

(4)BorderLayout：一个盒子里摆放5个位置，东、南、西、北、中[即：上下左右中间]。开发的时候经常用来做后台框架的布局，如下所示：

                       北

西　　　　　　　中　　　　　　　东

　　　　　　　　南

(5)AccordionLayout：手风琴布局，可以折叠的布局。开发的时候常用来对左侧的功能列表进行分类，如下图所示：

折叠状态---

展开状态[包含内容一和二]---

内容一--

内容二--

折叠状态---

(6)FitLayout：强迫子组件填充满容器布局。

(7)TableLayout：表格布局，含有行与列的概念。

<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title></title>
    <!--ExtJs框架开始-->
    <script type="text/javascript" src="/Ext/adapter/ext/ext-base.js"></script>
    <script type="text/javascript" src="/Ext/ext-all.js"></script>
    <script src="/Ext/src/locale/ext-lang-zh_CN.js" type="text/javascript"></script>
    <link rel="stylesheet" type="text/css" href="/Ext/resources/css/ext-all.css" />
    <!--ExtJs框架结束-->
    <script type="text/javascript">
        Ext.onReady(function () {
            //------ContainerLayout开始------//
            var box1 = new Ext.BoxComponent({
                autoEl: {
                    tag: 'div',
                    style: 'background:red;width:300px;height:30px',
                    html: 'box1'
                }
            });
            var box2 = new Ext.BoxComponent({
                autoEl: {
                    tag: 'div',
                    style: 'background:yellow;width:300px;height:30px',
                    html: 'box2'
                }
            });
            var box3 = new Ext.BoxComponent({
                autoEl: {
                    tag: 'div',
                    style: 'background:blue;width:300px;height:30px;color:#fff',
                    html: 'box3'
                }
            });
            var containerlayout = new Ext.Container({
                layout: 'form',
                items: [box1, box2, box3],
                renderTo: 'ContainerLayout'
            });
            //------ContainerLayout结束-----//
            //------FormLayout开始------//
            var formlayout = new Ext.Panel({
                title: 'FormLayout',
                layout: 'form',
                items: [
                    new Ext.form.TextField({ fieldLabel: '用户名' }),
                    new Ext.form.TextField({ fieldLabel: '密码' }),
                    new Ext.form.TextField({ fieldLabel: '重复密码' })
                ],
                renderTo: 'FormLayout'
            });
            //------FormLayout结束------//
            //------ColumnLayout开始------//
            var ColumnLayout = new Ext.Panel({
                width: 600,
                title: 'ColumnLayout',
                layout: 'column',
                items: [
                    new Ext.form.FormPanel({ title: '第一列', columnWidth: .33, labelWidth: 50, items: [
                        new Ext.form.TextField({ fieldLabel: '用户名' })]
                    }),
                    new Ext.form.FormPanel({ title: '第二列', columnWidth: .33, labelWidth: 50, items: [
                        new Ext.form.TextField({ fieldLabel: '密码' })]
                    }),
                    new Ext.form.FormPanel({ title: '第三列', columnWidth: .34, labelWidth: 80, items: [
                        new Ext.form.TextField({ fieldLabel: '重复密码' })]
                    })
                ],
                renderTo: 'ColumnLayout'
            });
            //------ColumnLayout结束------//
            //------BorderLayout开始------//
            var BorderLayout = new Ext.Panel({
                title: 'BorderLayout',
                layout: 'border',
                width: 1100,
                height: 300,
                items: [
                    new Ext.Panel({ title: '上北', region: 'north', html: '可以放个logo什么的' }),
                    new Ext.Panel({ title: '下南', region: 'south', html: '版权信息？', autoEl: 'center' }),
                    new Ext.Panel({ title: '中间', region: 'center', html: '主面板' }),
                    new Ext.Panel({ title: '左东', region: 'west', html: '树型菜单或是手风琴' }),
                    new Ext.Panel({ title: '右西', region: 'east', html: '常用功能或是去掉？' })
                ],
                renderTo: 'BorderLayout'
            });
            //------BorderLayout结束------//
            //------AccordionLayout开始------//
            var AccordionLayout = new Ext.Panel({
                title: 'AccordionLayout',
                layout: 'accordion',
                height: 200,
                items: [
                    new Ext.Panel({ title: '用户管理', items: [new Ext.BoxComponent({ autoEl: { tag: 'div', html: '用户管理'} })] }),
                    new Ext.Panel({ title: '角色管理', items: [new Ext.BoxComponent({ autoEl: { tag: 'div', html: '角色管理'} })] }),
                    new Ext.Panel({ title: '系统管理', items: [new Ext.BoxComponent({ autoEl: { tag: 'div', html: '系统管理'} })] })
                ],
                renderTo: 'AccordionLayout'
            });
            //------AccordionLayout结束------//
            //------FitLayout结束------//
            var FitLayout = new Ext.Panel({
                title: 'FitLayout',
                height: 100,
                renderTo: 'FitLayout',
                layout: 'fit',
                items: [
                    new Ext.Panel({ bodyStyle: 'background:red', html: '使用了fit布局,填充满' }),
                    new Ext.Panel({ bodyStyle: 'background:yellow', html: '这个panel不会显示，因为是fit布局' })
                ]
            });
            var NoFitLayout = new Ext.Panel({
                title: 'NoFitLayout',
                height: 100,
                renderTo: 'FitLayout',
                items: [
                    new Ext.Panel({ bodyStyle: 'background:yellow', html: '未使用了fit布局,没有填充满' })
                ]
            });
            //------FitLayout结束------//
            //------TableLayout开始------//
            var TableLayout = new Ext.Panel({
                title: 'TableLayout',
                layout: 'table',
                layoutConfig: { columns: 3 },
                defaults: {
                    width: 133,
                    height: 100,
                    autoEl: 'center'
                },
                defaultType: 'panel',
                items: [
                    { html: '行1列1' },
                    { html: '行1列2' },
                    { html: '行[1,2]列3', rowspan: 2, height: 180 },
                    { html: '行2列[1,2]', colspan: 2, width: 266 }
                ],
                renderTo: 'TableLayout'
            });
            //------TableLayout结束------//
        });
    </script>
</head>
<body>
    <div id="ContainerLayout" style="float: left; width: 300px">
        ContainerLayout：垂直方式放置
    </div>
    <div id="FormLayout" style="float: left; width: 240px; padding-left: 10px;">
    </div>
    <div id="ColumnLayout" style="float: left; width: 500px; padding-left: 10px;">
    </div>
    <div id="BorderLayout" style="padding: 10px 0px; clear: both">
    </div>
    <div id="AccordionLayout" style="width: 300px; float: left; height: 200px">
    </div>
    <div id="FitLayout" style="width: 300px; float: left; height: 200px; padding-left: 10px;">
    </div>
    <div id="TableLayout" style="width: 400px; float: left; padding-left: 10px;">
    </div>
</body>
</html>

--------------------------------------------------------

