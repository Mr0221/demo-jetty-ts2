// Copyright (c) 1998-2010 Core Solutions Limited. All rights reserved.
Core.customize.STYLE_SEARCH_GRID_ID = 'sets';
Core.customize.SET_SEARCH_GRID_ID = 'styleSearch';
Core.customize.CREATE_FABRIC = '';
Core.customize.CREATE_FABRIC_NUM = 0;
Core.customize.catTypeTech = '';
Core.Document.Cur_TAB = '';
Core.customize.measTplType = '';
Core.customize.COLOR_KEYCODE_DROP_DOWN_ID = 'colourKeycodeId$0';
Core.customize.current_style_color_version = 0;
Core.customize.current_style_color_id = '';
Core.customize.current_style_prod_reg_status = '';
Core.customize.current_color_keycode_page_record = null;
Core.customize.keycodeRetrievedApns = [];
Core.customize.register = false;
Core.customize.refreshSizeQTY = false;
Core.customize.readOnlyFields = ['onShowDate$0'];
Core.customize.readOnlyFieldsWhenColorReg = ['productName$0','webName$0','productFeatures$0','arthurDesc$0','colorProductTypeId$0','likeProduct$0',
                                             'posDesc$0','colorSplLine1$0','colorSplLine2$0','colorBarcodeTicketId$0','colorBarcodeColour$0','colorBarcodeDesc1$0',
                                             'colorBarcodeDesc2$0','colorModelNo$0','featureTicketDesc1$0','featureTicketDesc2$0','featureTicketDesc3$0','featureTicketDesc4$0',
                                             'featureTicketDesc5$0','bulkyItem$0','targetExclusive$0','onlineExclusive$0','minPresDepth$0','onShowDate$0','offShowDate$0'];
Core.customize.keycode_color_fields = ['productName$0','webName$0','arthurDesc$0','productFeatures$0','likeProduct$0','registeredGrade$0','posDesc$0','colorSplLine1$0','colorSplLine2$0','minPresDepth$0',
                          'colorBarcodeColour$0','colorBarcodeDesc1$0','colorBarcodeDesc2$0','colorModelNo$0','featureTicketDesc1$0','featureTicketDesc2$0','featureTicketDesc3$0',
                          'featureTicketDesc4$0','featureTicketDesc5$0','onShowDate$0', 'productRegStatus$0','offShowDate$0'];
Core.customize.keycode_color_dropdown_fields = ['colorProductTypeId$0','colorBarcodeTicketId$0','bulkyItem$0','targetExclusive$0','onlineExclusive$0','isTransform$0',
                                  'isProductionCost$0','colorDevelopingCountry$0','licenseToSell$0'];

// get tab_spec is readonly or not
Core.customize.TAB_SPEC_READONLY = function(){
    var clientDS = Core.getCmp(CORE.CLIENT_DATA_SOURCE,CORE.CMP_TYPE_DATA_SOURCE);
    var tabSpecReadonly = Core.Document.getTabReadonlyMode('tab_spec');
    var tabSpecVendorReadonly = Core.curUserIsVendor && (clientDS.getValue('status') == 'production'|| clientDS.getValue('setStatus') == 'production');
    return tabSpecReadonly || tabSpecVendorReadonly;
};

Core.customize.STYLE_COLOR_GRID_ID = 'colors';
Core.customize.STYLE_SIZE_GRID_ID = 'sizes';
Core.customize.STYLE_KEYCODE_GRID_ID = 'keycodes';
Core.customize.custFormFields = [];  // for the customize validation formFields in validation.js


/////////////// variables //////////////////
Core.customize.styleSpecPopup = new Object();
Core.customize.styleSpecPopup.specTypeId = '';

Core.customize.styleTabChange = function() {
    if (Core.Document.getCurrentTabId() == 'tab_sample') {
        var tab = mainTabGroupPanel.getActiveTab();
        if ((typeof(tab.shouldRefresh) != 'undefined' && tab.shouldRefresh == true)
                || isEmptyString(Core.Document.DOC_ID)) {
            Core.customize.generateSampleProfileForStyle();
        }
    }
    if (Core.Document.getCurrentTabId() == 'tab_meas') {
        var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
        var idStr = clientDs.getValue('id');

        var t = Core.getCmp('sizeLabelTable', CORE.MEAS_MASTER_SIZE_LABEL);
        if(typeof(t) != 'undefined') {
            t.reRender();
            renderRadioAndCheckbox();
        }

        var g = Core.getCmp('measTemplate', CORE.CMP_TYPE_GRID);
        if(typeof(g) != 'undefined') {
            g.reconfigure(t.sizeLabelData, {"restrictions['parentId']" :  idStr});
        }

        var cbxImage = document.getElementById('cbxImage');
        var imageUrl = clientDs.getValue('cbxImage')
        if(cbxImage != null && !isEmptyString(imageUrl)) {
            cbxImage.src = Core.base + 'attachment_retrieve_image.action?f=' + clientDs.getValue('cbxImage');
        } else if(cbxImage != null){
            cbxImage.src = 'attachment_retrieve_image.action';
        }
   }
};
//Core.addListener(CORE.EVENT_TAB_CHANGED, Core.customize.styleTabChange);

Core.customize.styleCustomizeSetData = function() {
    if (typeof originalDocId != 'undefined' && !isEmptyString(originalDocId) && Core.Document.ENTITY == 'CpmTask') {
        Core.Document.DOC_ID = originalDocId;
    }
    Core.customize.refreshStyleCpmList();
};
Core.addListener(CORE.EVENT_CUSTOMIZE_SET_DATA, Core.customize.styleCustomizeSetData);

Core.customize.colseSelectSizeWin = function () {
    var win = Core.getCmp(Core.customize.SIZES_SEARCH_FROM_TEMPLATE_WINID, CORE.CMP_TYPE_WINDOW);
    if(win)win.hide();
    //clear win data
    document.sizesSearchFromTemplate["ssft_templateNo"].value = "";
    document.sizesSearchFromTemplate["ssft_templateName"].value = "";
    var tsg = Core.getCmp('sizeFromtemplateSearch', CORE.CMP_TYPE_GRID);
    tsg.store.cleanAll();
};

Core.customize.styleAfterNew = function() {
    var r = Core.Document.getDDRecord('sourcingAgentId','code',Core.Document.getDefaultValue('sourcingAgentId'));
    if (r != null) {
        Core.customize.lookupAgentCommissionPer(r['code']);
    }
    Core.customize.lookupGst();
};
Core.addListener(CORE.EVENT_AFTER_NEW, Core.customize.styleAfterNew);

Core.customize.lookupGst = function() {
     Core.Document.lookup(
        [{'bookName' : 'GST', 'criteria' : {
        'Country' : 'AU'}},
        {'bookName' : 'GST', 'criteria' : {
        'Country' : 'NZ'}}
        ],function(response){
         var rs = Ext.util.JSON.decode(response.responseText);
         var gstE = '';
         var gstA = '';
         if (rs[0] != null && !Ext.isEmpty(rs[0]['GST%'])) {
             gstE = rs[0]['GST%'];
         }
         if (rs[1] != null && !Ext.isEmpty(rs[1]['GST%'])) {
             gstA = rs[1]['GST%'];
         }
         var ds = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
         ds.updateValue('gstE', gstE);
         ds.updateValue('gstA', gstA);
    }, this);
};

Core.customize.styleCustomizeForm = function(baseParam, form) {
    if (Core.Document.ENTITY != 'Style') {
        return;
    }
    var ds = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    var extDs = ds.getExtDs();
    var styleType = (Core.customize.styleType == "set")?1:0;
    var oldSampleSize = extDs.key('standardSize');
    var sp_old_sample_size = '';
    if (!Ext.isEmpty(oldSampleSize)){
        if (oldSampleSize.oldDisplayValue) {
            sp_old_sample_size = oldSampleSize.oldDisplayValue;
        } else {
            sp_old_sample_size = Ext.isEmpty(oldSampleSize.originalValue) ? '' : oldSampleSize.originalValue;
        }
    }
    Core.Document.appendFormParams(form, 'styleType', styleType);
    Core.Document.appendFormParams(form, 'SP_I_OLD_SAMPLE_SIZE', sp_old_sample_size);
    Core.customize.appendApprovalFormParams(form);
    //Core.customize.appendDefaultImage(form);
};
Core.addListener(CORE.EVENT_CUSTOMIZE_FORM, Core.customize.styleCustomizeForm);

Core.Document.CbxDefaultImage.init();

Core.customize.appendApprovalFormParams = function(form) {
    var cpmRefDate = '';
    Core.Document.appendFormParams(form, 'SP_I_CALENDAR_TEMPLATE_ID', '');
    var ds = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    if (ds.getValue('estShipDate')) {
        cpmRefDate = ds.getValue('estShipDate').substring(0,10);
    }
    Core.Document.appendFormParams(form, 'SP_I_CPM_REF_DATE', cpmRefDate);
};

Core.customize.refreshStyleCpmList = function() {
    if (typeof Core.customize.cpmStyle != 'undefined') {
        Core.customize.cpmStyle.templateId = '';
        Core.customize.cpmStyle.taskCount = 0;
        Core.customize.cpmStyle.taskLists = [];
        Core.customize.cpmStyle.taskListGroups = [];
        Core.customize.cpmStyle.dataIds = [Core.Document.DOC_ID];
        Core.customize.cpmStyle.render();
    }
};
Core.addListener(CORE.EVENT_AFTER_NEW, Core.customize.refreshStyleCpmList);

Core.Document.regCustomizeAction("cancel", function(){
    Core.Msg.confirm('STYLE_030',
            function() { // [yes]
                var ds = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
                var status = ds.getValue('status');
                Core.Document.requestBizLogicAction('style_cancel.action', {
                    SP_I_STYLE_ID : Core.Document.DOC_ID,
                    SP_I_STYLE_STATUS : 'cancel',
                    SP_I_USER_CODE : Core.userObj.userCode,
                    _DOC_STATUS : status,
                    _DOC_OBJ_ID : Core.Document.FORM_ID
                },function(){
                    Core.Document.Event.fire("refresh");
                });
           },
           function() { // [No]
                return;
           }
     );


}, true);

Core.Document.regCustomizeAction("submit", function(){
    var ds = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    var status = ds.getValue('status');
    if(status != 'concept'){
        return;
    }
    //ds.updateDropDownValue('status','name', 'new','New','concept');
    Core.customize.submitStyleInHeader = function() {
        Core.Document.requestBizLogicAction('style_submit.action', {
            id            : ds.getValue('id'),
            version       : ds.getValue('version'),
            EntityName    : ds.getValue('$type$'),
            FormId        : Core.Document.FORM_ID,
            SP_I_STYLE_ID : Core.Document.DOC_ID,
            SP_I_STYLE_STATUS : 'new',
            SP_I_USER_CODE : Core.userObj.userCode,
            _DOC_STATUS : status,
            _DOC_OBJ_ID : Core.Document.FORM_ID}, function() {
                Core.Document.Event.fire("refresh");
            }
        );
    }
    if (Core.Document.hasModified()) {
        Core.Msg.confirm('DOCUMENT_004', Core.customize.submitStyleInHeader);
    } else {
        Core.customize.submitStyleInHeader();
    }
}, true);

Core.Document.regCustomizeAction("genRfq", function(){
    var status = Core.getCmp('status$0',CORE.CMP_TYPE_COMBOBOX);
    var statusValue = status.getValue();
    if(statusValue == 'inset'){
        return;
    }
    Ext.MessageBox.progress("Generate RFQ", "Generate RFQ", "Initializing...");
    Core.Document.requestBizLogicAction('style_genRfq.action', {
        id : Core.Document.DOC_ID,
        SP_I_STYLE_ID : Core.Document.DOC_ID,
        SP_I_USER : Core.curUserCode,
        _DOC_STATUS : statusValue,
        _DOC_OBJ_ID : Core.Document.FORM_ID
    }, Core.customize.afterGenRfq);
}, false);

Core.Document.regCustomizeAction("openDW", function(){
    window.open("http://design.target.com.au",'_blank');
}, true);

Core.Document.regCustomizeAction("genOrder", function(){
    var status = Core.getCmp('status$0',CORE.CMP_TYPE_COMBOBOX);
    var statusValue = status.getValue();
    if(statusValue == 'inset'|| statusValue == 'cancel'){
        return;
    }
    Ext.MessageBox.progress("Generate Order", "Generate Order", "Initializing...");
    var user = Core.StringUtil.stringReplaceAll(Core.curUserCode,'\"','');
    Core.Document.requestBizLogicAction('style_genOrder.action', {SP_I_STYLE_ID : Core.Document.DOC_ID, SP_I_USER : user,
    _DOC_STATUS : statusValue,
    _DOC_OBJ_ID : Core.Document.FORM_ID}, Core.customize.afterGenOrder);
}, false);

Core.Document.regCustomizeAction("requestForSample", function(){
    var status = Core.getCmp('status$0',CORE.CMP_TYPE_COMBOBOX);
    var statusValue = status.getValue();
    if(statusValue == 'inset'){
        return;
    }
    Ext.MessageBox.progress("Request For Sample", "Request For Sample", "Initializing...");
    Core.Document.requestBizLogicAction('style_generate_rfsd.action', {
        SP_I_STYLE_ID : Core.Document.DOC_ID,
        SP_I_USER : Core.curUserCode,
        SP_I_SAMPLE_DOC_ID     : '',
        _DOC_STATUS : statusValue,
        _DOC_OBJ_ID : Core.Document.FORM_ID
    }, Core.customize.afterRequestForSample);
}, false);

Core.customize.afterRequestForSample = function(response){
    Core.Document.returnFromBizLogicAction(response);
    if(response.responseText != '' && response.responseText.indexOf('appropriate rights') > 0) {
        Core.cbxLayout.showMsg(true, response.responseText);
        return;
    }
    var jsonData = Ext.util.JSON.decode(response.responseText);
    Ext.MessageBox.hide();
    if (jsonData && !isEmptyString(jsonData.O_RESULT)) {
        var rfsdId = jsonData.O_RESULT.trim();
        Core.clearClientDS();
        Core.gotoModuleSearch('sampleDocReq', {docId: Core.Document.DOC_ID,rfsdId : rfsdId});
    }
};

Core.Document.regCustomizeAction("openQA", function(){
      var qaType =  '',
             ds = Core.getClientDS(),
             deptCode = ds.getValue('deptCode'),
             styleNo = ds.getValue('styleNo');
      if (Ext.isEmpty(deptCode)) {
            return;
      }
     var deptRecord = Core.Document.getDDRecord('deptId', 'deptCode', deptCode);
    var status = Core.getCmp('status$0',CORE.CMP_TYPE_COMBOBOX);
    if(Core.customize.isVendorLogin){
        status = Core.getCmp('status$6',CORE.CMP_TYPE_COMBOBOX);
    }
    var statusValue = status.getValue();
    if(statusValue == 'inset'){
        return;
    }

    //get qa type
    if(Core.customize.styleType === 'set'){
        var productCat = deptRecord['productCat'];
        qaType = (productCat === 'APPAREL' ||  productCat === 'FW') ? 'app' : productCat === 'GM' ? 'gm' : '';
    }else if(Core.customize.styleType === 'app'){
        qaType =  'app';
    }else if(Core.customize.styleType === 'gm'){
        qaType =  'gm';
    }

    var vendorId = ds.getValue('vendorId');
    if (isEmptyString(vendorId)) {
          Core.clearClientDS();
          Core.gotoModuleSearch('qaApp', {styleNo : styleNo, qaType : qaType, moduleGroup: 'quality'});
    } else {
        var params = {};
        params['restrictions["styleId"]'] = Core.Document.DOC_ID;
        params['restrictions["vendorId"]'] = vendorId;
        Ext.Ajax.request({
            url : 'select_qa_for_syle.action',
            method : 'POST',
            success : function(response) {
                var jsonData = Ext.util.JSON.decode(response.responseText);
                Core.clearClientDS();
                if (jsonData.records && jsonData.records.length > 0) {
                    var qaId = jsonData.records[0].id;
                    Core.gotoModule('qaApp', qaId, {qaType : qaType, moduleGroup: 'quality', formId : 'F_qaApp0000000000000000000000000'});
                    return;
                }
                Core.gotoModuleSearch('qaApp', {styleNo : styleNo, qaType : qaType, moduleGroup: 'quality'});
            },
            failure : function() {
                    Core.Document.handleError(response);
              },
            scope : this,
            params : params
    });
    }
}, false);

Core.customize.afterGenRfq = function(response) {
    Core.Document.returnFromBizLogicAction(response);
    if(response.responseText != '' && response.responseText.indexOf('appropriate rights') > 0) {
        Core.cbxLayout.showMsg(true, response.responseText);
        return;
    }
    var jsonData = Ext.util.JSON.decode(response.responseText);
    Ext.MessageBox.hide();
    Core.clearClientDS();
    searchGridId = null;
    if (jsonData && !isEmptyString(jsonData.O_RESULT)) {
        var rfqId = jsonData.O_RESULT.trim();
        var params = {};
        params['formId'] = 'F_rfq000000000000000000000000000';
        Core.gotoModule('rfq', rfqId, params);
    }
};
Core.customize.afterGenOrder = function(response) {
    Core.Document.returnFromBizLogicAction(response);
    if(response.responseText != '' && response.responseText.indexOf('appropriate rights') > 0) {
        Core.cbxLayout.showMsg(true, response.responseText);
        return;
    }
    var jsonData = Ext.util.JSON.decode(response.responseText);
    Ext.MessageBox.hide();
    Core.clearClientDS();
    if (jsonData && !isEmptyString(jsonData.O_RESULT)) {
        var orderId = jsonData.O_RESULT.trim();
        var params = {};
        params['formId'] = 'F_order0000000000000000000000000';
        Core.gotoModule('order', orderId, params);
    }
};

Core.customize.approvalProfileHistory = null;

Core.customize.generateSampleProfileForStyle = function() {
    var params = [];
    params['restrictions["styleId"]'] = isEmptyString(Core.Document.DOC_ID) ? 'NULL' : Core.Document.DOC_ID;
    Ext.Ajax.request({
        url : 'styleCurrentSampleSearch_styleCurrentSampleSearch_list_json.action',
        method : 'POST',
        success : function(response) {
            var jsonData = Ext.util.JSON.decode(response.responseText);
            var clientDs = Core.getCmp('styleCurrentSample', CORE.CMP_TYPE_DATA_SOURCE);
            if (clientDs) {
                clientDs.clear();
            } else {
                clientDs = new Core.data.ClientDataSource('styleCurrentSample');
            }
            var profile = [];
            var profileId = 'null';
            if (jsonData.records && jsonData.records.length > 0) {
                profile = jsonData.records[0];
                profileId = profile.id;
                // set value to sample header
                document.getElementById('name$1').value = profile.name;
                document.getElementById('revision$1').value = profile.revision;
                document.getElementById('sampleStatus$1').value = profile.status;
            }

            // render stage grid
            clientDs.addAll(profile);
            var searchUrl = 'styleApprovalProfileSearch_styleApprovalProfileSearch_list_json.action';
            renderStagesGrid(profileId, 'approvalProfileStagesGrid', true, searchUrl);
            generateCustomFields(clientDs, 'customFieldsTableDiv', true);
        },
        failure : function() {
                Core.Document.handleError(response);
          },
        scope : this,
        params : params
    });

    Core.customize.approvalProfileHistory = new ApprovalProfileHistory(document.getElementById('approvalProfileHistoryGrid'), requestParams["restrictions['parentId']"]);
    Core.customize.approvalProfileHistory.create();
};

Core.ComponentMgr.onAvailable(Core.customize.SET_SEARCH_GRID_ID, CORE.CMP_TYPE_GRID, function() {
    if (!Core.customize.styleType) {
        Core.Msg.warning('STYLE_018', Core.customize.styleType);
        return;
    }
    var setSearchGrid = Core.getCmp(Core.customize.SET_SEARCH_GRID_ID,CORE.CMP_TYPE_GRID);
    if(Core.customize.styleType == 'set') {
        Core.getCmp(Core.customize.SET_SEARCH_GRID_ID, CORE.CMP_TYPE_GRID).store.store.proxy.conn.url = Core.base + 'style_sets_search_list_json.action';
        return;
    }
    if(Core.customize.styleType == 'gm') {
        Core.getCmp(Core.customize.SET_SEARCH_GRID_ID, CORE.CMP_TYPE_GRID).store.store.proxy.conn.url = Core.base + 'style_items_search_list_json.action';
        return;
    }
});

(function() {
    delete Core.customize.hiddenTabs;
    if (Core.customize.styleType =='gm') {
        Core.customize.hiddenTabs = ['tab_fabric', 'tab_meas'];
    }
    if (Core.customize.styleType =='set') {
    Core.customize.hiddenTabs = ['tab_spec', 'tab_meas', 'tab_tran_history','tab_keycode'];
    }

})();

Core.ComponentMgr.onAvailable('sets', CORE.CMP_TYPE_GRID, function() {
    Core.getCmp('sets', CORE.CMP_TYPE_GRID).conf.renderConfig.height = 300;
});

Core.Document.addNotAskSavingAction("selectCalendarTemplate");
Core.Document.regCustomizeAction('selectCalendarTemplate', function() {
  /*
    popupConfigs['calendarTemplatesPopuped'].searchParams['entityName'] = 'ApprovalTmpl';
    popupConfigs['calendarTemplatesPopuped'].searchParams['restrictions["mat.orgCode"]'] = orgCode;
    popupConfigs['calendarTemplatesPopuped'].searchParams['restrictions["mat.moduleCode"]'] = moduleCode;
    popupConfigs['calendarTemplatesPopuped'].searchParams['restrictions["mat.teamCode$na"]'] = isEmptyString(teamCode) ? '' : teamCode;
    popupConfigs['calendarTemplatesPopuped'].fdsMapping = [['name', 'name'], ['approvalTemplateId', 'id']];
    Core.grid.itemAction({id: 'addTemplate'}, 'templates', 'addItems');
  */
    //alert('selectCalendarTemplate');
    var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    if (isEmptyString(Core.Document.DOC_ID)) {
        Core.Msg.warning('STYLE_013');
        return;
    }
    var status = Core.getCmp('status$0',CORE.CMP_TYPE_COMBOBOX);
    var statusValue = status.getValue();
    if (statusValue == 'inset') {
        Core.Msg.warning('STYLE_029');
        return;
    }
    if (!clientDs.getValue('seasonCode')) {
        Core.Msg.warning('STYLE_021');
        return;
    }
    if (!clientDs.getValue('deptId')) {
        Core.Msg.warning('STYLE_019');
        return;
    }
    if (!clientDs.getValue('estShipDate')) {
        Core.Msg.warning('STYLE_011');
        return;
    }
    if (!clientDs.getValue('estFirstOrderDate')) {
        Core.Msg.warning('STYLE_010');
        return;
    }

    Core.WindowUtil.popupCustomizedWindow({
        id : 'calendarTemplateWin',
        url : 'jsp/common/popupWin/calendarTemplateList.jsp',
        title : 'Select CPM Template',
        width : CORE.STANDARD_WIN.WIDTH,
        height: CORE.STANDARD_WIN.HEIGHT,
        buttons : [{
            text    : 'OK',
            scope   : this,
            handler : Core.customize.confirmSelectCpmTemplate
        },{
            text    : 'Cancel',
            scope   : this,
            handler : function() {
                var win = Core.getCmp('calendarTemplateWin', CORE.CMP_TYPE_WINDOW);
                if (win) {
                    win.hide();
                }
            }
        }],
        listeners : {'show' : Core.customize.reloadCalendarTemplateGrid}
    });
});

Core.customize.confirmSelectCpmTemplate = function () {
    var calendarTemplateGrid = Core.getCmp('calendarTemplates', CORE.CMP_TYPE_GRID);
    var selectRows = calendarTemplateGrid.grid.getSelectionModel().getSelections();
    if(selectRows.length == 0) {
        Core.Msg.warning('STYLE_015');
        return;
    }
    Core.Msg.confirm('STYLE_001',
        function() {
            var win = Core.getCmp('calendarTemplateWin', CORE.CMP_TYPE_WINDOW);
            Core.customize.selectCalendarTemplate();
            win.hide();
        },
        function() {
            var win = Core.getCmp('calendarTemplateWin', CORE.CMP_TYPE_WINDOW);
            win.hide();
        }
    );
};

Core.Document.addNotAskSavingAction("applyCpmDate");
Core.Document.regCustomizeAction("applyCpmDate", function(){
    if (!isEmptyString(Core.Document.DOC_ID)
        && Core.customize.cpmStyle
        && Core.customize.cpmStyle.taskCount) {
        var cpmDate = document.getElementById('cpmDate');
        var cpmRefDateType = Core.getCmp('cpmRefDateType', CORE.CMP_TYPE_COMBOBOX);
        if (isEmptyString(cpmRefDateType.getValue())) {
            Core.Msg.warning('STYLE_003');
            return;
        }
        if (isEmptyString(cpmDate.value)) {
            Core.Msg.warning('STYLE_002');
            return;
        }

        Core.Msg.confirm('STYLE_020',
            function() {
                Ext.MessageBox.progress("Apply CPM Date", "Apply CPM Date", "Processing...");
                Core.Document.requestBizLogicAction('cpm_apply_date.action', {SP_I_DATA_ID : Core.Document.DOC_ID, SP_I_CPM_REF_DATE : cpmDate.value, SP_I_CPM_REF_DATE_TYPE : cpmRefDateType.getValue()}, Core.customize.afterApplyCpmDate);
            }
        );
    } else {
        Core.Msg.warning('STYLE_028');
    }
}, true);

Core.customize.afterApplyCpmDate = function(response) {
    Core.Document.returnFromBizLogicAction(response);
    Core.customize.cpmStyle.render();
    Ext.MessageBox.updateProgress(1, "Done.");
    setTimeout('Ext.MessageBox.hide()', 300);
};

Core.customize.selectCalendarTemplate = function() {
    var calendarTemplateGrid = Core.getCmp('calendarTemplates', CORE.CMP_TYPE_GRID);
    var templateRecord = calendarTemplateGrid.grid.getSelectedRecord();
    if (templateRecord && Core.customize.cpmStyle) {
        Core.customize.cpmStyle.templateId = templateRecord.data['id'];
    }
    if (isEmptyString(Core.customize.cpmStyle.templateId)) {
        return;
    }
    var cpmRefDate = '';

    var ds = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    if (ds.getValue('estShipDate')) {
        cpmRefDate = ds.getValue('estShipDate').substring(0,10);
    }
    var deptId = ds.getValue('deptId');
    if (ds.getValue('deptId')) {
        if (typeof(ds.getValue('deptId')) == 'string') {
            deptId = ds.getValue('deptId');
        } else {
            deptId = ds.getValue('deptId').id;
        }
    }
    var seasonId = ds.getValue('seasonId');
    Ext.MessageBox.progress("Update Cpm Tasks", "Update Cpm Tasks", "Processing...");
    Core.Document.requestBizLogicAction('cpm_change_template_master.action', {SP_I_DATA_ID : Core.Document.DOC_ID, SP_I_CALENDAR_TEMPLATE_ID : Core.customize.cpmStyle.templateId,
        SP_I_YEAR_ID : '', SP_I_TRACK_STATUS_ID : '',
        SP_I_DEPT_ID : deptId, SP_I_MODULE_CODE : 'Style', SP_I_CPM_REF_DATE : cpmRefDate, SP_I_SEASON : seasonId, SP_I_USER_CODE : Core.curUserCode}, Core.customize.afterChangeTemplate);
};

Core.customize.afterChangeTemplate = function(response) {
    Core.Document.returnFromBizLogicAction(response);
    if (Core.customize.cpmStyle) {
        Core.customize.cpmStyle.render();
    }
    Ext.MessageBox.updateProgress(1, "Done.");
    setTimeout('Ext.MessageBox.hide()', 300);
};

Core.customize.reloadCalendarTemplateGrid = function() {
    var calendarTemplateGrid = Core.getCmp('calendarTemplates', CORE.CMP_TYPE_GRID);
    var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    var deptId;
    var seasonId;
    var yearId;
    var trackStatusId;
    if (clientDs) {
        seasonId = clientDs.getValue('seasonId');
        yearId = clientDs.getValue('yearId');
        trackStatusId = clientDs.getValue('fastTrackId');
        if (clientDs.getValue('deptId')) {
            if (typeof(clientDs.getValue('deptId')) == 'string') {
                deptId = clientDs.getValue('deptId');
            } else {
                deptId = clientDs.getValue('deptId').id;
            }
        }
    }
    YAHOO.util.Event.onContentReady('t.yearId$eq$4', function(){
        var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
        var seasonId = clientDs.getValue('seasonId');
        var yearId = clientDs.getValue('yearId');
        var trackStatusId = clientDs.getValue('fastTrackId');
        var yearCom = Core.getCmp('t.yearId$eq$4', CORE.CMP_TYPE_COMBOBOX);
        var trackStatusCom = Core.getCmp('t.trackStatusId$eq$5', CORE.CMP_TYPE_COMBOBOX);
        var seasonCom = Core.getCmp('t.season$eq$2', CORE.CMP_TYPE_COMBOBOX);
        yearCom.setValue(yearId);
        trackStatusCom.setValue(trackStatusId);
        seasonCom.setValue(seasonId);
    });
    // prepare request parameters
    if (calendarTemplateGrid) {
        var searchParams = new Array();
        searchParams['restrictions["t.season$eq$2"]'] = isEmptyString(seasonId) ? '' : seasonId;
        if (!isEmptyString(yearId)) {
            searchParams['restrictions["t.yearId$eq$4"]'] = yearId;
        }
        if (!isEmptyString(trackStatusId)) {
            searchParams['restrictions["t.trackStatusId$eq$5"]'] =  trackStatusId;
        }
        searchParams["totalRds"] = -1;
        calendarTemplateGrid.updateRecords(searchParams);
    }
};

function closeSelectFabricPopup() {
    var win = Core.WindowUtil.getWinFromCache("selectFabric");
    if (win) {
        win.hide();
    }
}
Core.customize.selectFabric = function(){
  var config = {};
  config.entityName = 'selectFabric';

    var args = {
        id      : 'selectFabric',
        url     : 'jsp/coles/style/fabric_select.html',
        width   : 580,
        height  : 400,
        title   : 'Select Fabric'
    };

    var config = args || {};
    Ext.apply(config, {
        id          : args.id,
        url         : args.url,
        title       : config.title ? config.title : 'Window',
        width       : args.width?args.width:CORE.LARGE_WIN.WIDTH,
        height      : args.height?args.height:CORE.LARGE_WIN.HEIGHT,
        closable    : args.closable ,
        items       : args.items,
        autoScroll  : true,
        buttons : [{
            text : 'OK',
            scope : this,
            handler : function() {closeSelectFabricPopup();}
        }, {
            text : 'Close',
            scope : this,
            handler : function() {closeSelectFabricPopup();}
        }]
    });
    var win;
    win = Core.WindowUtil.getWinFromCache(config.id);

    if(win) {
        win.show();
        return;
    }
    win = new Core.Window(config);
    if(win.win) {
        win.win.setTitle(config.title);
    }
    win.render();
    win.win.addListener('move', Core.WindowUtil.winMoveHandler, this);

    win.show();
  config = null;
};

// ==================== begin meas tpl ==========================================

Core.customize.MEAS_GRID_FOR_STYLE = 'meas';

// refresh stdSize item
Core.customize.reloadStdSizeCombox = function(){
   var clientDs = Core.getClientDS();
   var stdSizeCombo = Core.getCmp('standardSize$0',CORE.CMP_TYPE_COMBOBOX);
   if(!stdSizeCombo){
        return;
   }
   var stdSizeComboStore = stdSizeCombo.store;
   stdSizeComboStore.removeAll();
   if(!clientDs.getValue('templateName')){
        stdSizeCombo.setDisabled(true);
        return;
   }
    var stdsizeCode = clientDs.getValue('stdsizeCode');
    stdSizeCombo.setDisabled(false);
    var TopicRecord = Ext.data.Record.create([
        {name: 'id'  },
        {name: 'name'}
     ]);
    var newItems = [];
    for(var i = 1; i <= Core.customize.MAX_ALLOW_SIZES; i++){
        var itemId = "colSize" + i;
        var toAddItem = clientDs.getValue(itemId);
        if(!isEmptyString(toAddItem)){
            var newItem = new TopicRecord({
                id: toAddItem,
                name: toAddItem
            });
            newItems.push(newItem);
        }
    }
    stdSizeComboStore.add(newItems);
    var displayDiv = document.getElementById('display_standardSize$0');
    if (displayDiv) {
        displayDiv.innerHTML = Core.StringUtil.escapeHTML(stdSizeCombo.getDisplayValue());
    }
    if(stdsizeCode){
        var stdSizeNo = stdsizeCode.substring(9);
        var stdSize = 'colSize' + stdSizeNo;
        stdSize = clientDs.getValue(stdSize);
        stdSizeCombo.setValue(stdSize);
        clientDs.updateValue('standardSize', stdSize);
        clientDs.updateValue('stdSizeNo', stdSizeNo);
    }
};
YAHOO.util.Event.onContentReady('standardSize$0', Core.customize.reloadStdSizeCombox);
Core.addListener(CORE.EVENT_CUSTOMIZE_SET_DATA, Core.customize.reloadStdSizeCombox);
//load tplItem for grid
Core.customize.loadTplItems = function(tplId) {
    Ext.Ajax.request({
        url : Core.base + "load_measurement_tpl_item.action",
        success: function(response, options){
            var clientDs = Core.getClientDS();
            Core.customize.measTplItemsJSON = Ext.util.JSON.decode(response.responseText);
            var measGrid = Core.customize.getMeasGrid(Core.customize.MEAS_GRID_FOR_STYLE);
            // mark the old records as deleted.
            var store = measGrid.grid.getStore();
            var storeNum = store.getCount();
            if(storeNum > 0){
                store.each(function(record) {
                    if (!record.data['id'].match('NEW')) {
                        clientDs.add('meas__' + record.data['id'] + '--' + record.data['version'] + '__DELETED', 'delete');
                    }
                });
                store.removeAll();
            }
            measGrid.newItemId = 0;
            Core.GridUtil.addToModifiedGrids(measGrid.grid.id);
            // set the new measurement template items to meas grid.
            if (Core.customize.measTplItemsJSON.recordsReturned > 0) {
                var items = Core.customize.measTplItemsJSON.records;
                var item = null;
                var mStore = measGrid.getExtStore();
                measGrid.grid.stopEditing();

                var recs = [];

                for (var i = 0; i < items.length; i++) {
                    item = items[i];
                    var newValues = {};
                    newValues.lineNo = item.lineNo;
                    newValues.code = item.code;
                    newValues.ref = item.ref;
                    newValues.measTplItemId = item.id;
                    newValues.pointOfMeas = item.pointOfMeas;
                    newValues.sampleMeas = item.sampleMeas;
                    newValues.tolPlus = item.tolPlus;
                    newValues.tolMins = item.tolMins;
                    newValues.size1 = item.size1;
                    newValues.size2 = item.size2;
                    newValues.size3 = item.size3;
                    newValues.size4 = item.size4;
                    newValues.size5 = item.size5;
                    newValues.size6 = item.size6;
                    newValues.size7 = item.size7;
                    newValues.size8 = item.size8;
                    newValues.size9 = item.size9;
                    newValues.size10 = item.size10;
                    newValues.size11 = item.size11;
                    newValues.size12 = item.size12;
                    newValues.size13 = item.size13;
                    newValues.size14 = item.size14;
                    newValues.size15 = item.size15;
                    newValues.size16 = item.size16;
                    newValues.size17 = item.size17;
                    newValues.size18 = item.size18;
                    newValues.size19 = item.size19;
                    newValues.size20 = item.size20;
                    newValues.size21 = item.size21;
                    newValues.size22 = item.size22;
                    newValues.size23 = item.size23;
                    newValues.size24 = item.size24;
                    newValues.size25 = item.size25;
                    newValues.size26 = item.size26;
                    newValues.size27 = item.size27;
                    newValues.size28 = item.size28;
                    newValues.size29 = item.size29;
                    newValues.size30 = item.size30;
                    newValues.id = 'NEW' + (++measGrid.newItemId);
                    var rd = new measGrid.RecordDef(newValues);
                    recs[recs.length] = rd;
                }
                var insertRow = mStore.getCount();
                mStore.insert(insertRow, recs);
            }
            mStore.maxLineNo = Core.customize.measTplItemsJSON.maxLineNo;
        },
        failure : function(response) {
            Core.Msg.error('STYLE_005');
        },
        params : {"restrictions['mm.id']" : tplId,
                   "limit" : 500
        }
    });
};

// load grid data from popup page
Core.customize.reloadMeasSizeGrid = function(record){
    var measGrid = Core.customize.getMeasGrid(Core.customize.MEAS_GRID_FOR_STYLE);
    Core.customize.changeToOriginalGrid(Core.customize.MEAS_GRID_FOR_STYLE);
    var orColumns = measGrid.getColumnModelParams();
    var length = orColumns.length;
    var clientDs = Core.getClientDS();
    var addedColumn = 0;
    var editableHeaders = [];
    for(var i = 1; i <= 30; i++){
        var itemId = "colSize" + i;
        var toAddItem = record.get(itemId);
        if(!!toAddItem){
            var newColumn = {
                sortable     : false,
                editor       : Core.GridUtil.createGridEditor({
                    id           : 'size'+ i,
                    gridId       : 'meas',
                    precision    : 3,
                    type         : 'NumberField'
                }),
                renderer     : Core.FieldFormat.numberFormat({
                    tabId        : 'tab_meas',
                    precision    : 3,
                    columnId : Core.Document.FORM_NAME + '__meas__size'+ i
                }),
                id           : 'size'+ i,
                dataIndex    : 'size'+ i,
                header       : '<div style="padding-left:0px;padding-top:0px;padding-right:0px;">' + clientDs.getValue('colSize'+ i)+'&nbsp;&nbsp;</div><div style="padding-left:0px;padding-top:0px;"><input id="colSeSize'+ i + '" name="colSeSize'+ i + '" style="height:17px;padding:0px;width:40px"/></div>',
                width   : 50
            }
            editableHeaders.push('size'+ i);
            orColumns[length] = orColumns[length-1];
            orColumns[length-1] = orColumns[length-2];
            orColumns[length-2] = orColumns[length-3];
            orColumns[length-3] = newColumn;
            length++;
            addedColumn = addedColumn + 1;
        }else{
            break;
        }
    }
    var measGr = measGrid.grid;
    var colModel = new Core.grid.ColumnModel(orColumns);
    measGr.reconfigure(measGr.store,colModel);
    measGrid.setHeadersEditable(editableHeaders);
    var width =  Math.max(Core.customize.getGridWidth(measGrid) + 50,Core.GridUtil.getGridWidth(measGrid.conf.columnModelParams));
       measGr.setWidth(width);

    for (var i = addedColumn + 1; i <= Core.customize.MAX_ALLOW_SIZES; i++) {
        clientDs.updateValue("colSize" + i, '');
        clientDs.updateValue("colSeSize" + i, '');
    }
    for (var i = 1; i <= addedColumn; i++){
        var toAdd2Item = record.get("colSeSize" + i);
        if (Ext.isEmpty(toAdd2Item)) {
            toAdd2Item = '';
        }
        document.getElementById("colSeSize" + i).value = toAdd2Item;
        clientDs.add("colSeSize" + i, toAdd2Item);
    }
    Core.GridUtil.addToModifiedGrids('meas');
};

Core.customize.styleMeasBeforeSave = function() {
    var popupImages = Core.getCmp('popupImages', CORE.CMP_TYPE_GRID);
    if(popupImages){
        Core.GridUtil.addToModifiedGrids('popupImages');
    }
    var clientDs = Core.getClientDS();
    for (var i = 1; i <= 30; i++){
        var el = document.getElementById("colSeSize" + i);
        if(el != undefined){
           var value = el.value ||'';
           clientDs.updateValue('colSeSize' + i, value);
           Core.Document.updateFormFieldWithTheSameName('colSeSize' + i, value);
        }else{
            break;
        }
    }
    Core.customize.custFormFields = [];
    doSizeCodeFieldsValidation();
    return Core.Comparison.quotesSave();
};
Core.addListener(CORE.EVENT_BEFORE_SAVE, Core.customize.styleMeasBeforeSave);

//refresh the header field for the meas grid (the 2nd grid)
// load grid data from popup page
Core.customize.reloadMeas3Grid = function(record){
    var clientDs = Core.getClientDS();
    var measGrid = Core.customize.getMeasGrid('measCal');
    Core.customize.changeToOriginalGrid('measCal');
    var orColumns = measGrid.getColumnModelParams();
    var length = orColumns.length;
    var addedColumn = 0;
    for(var i = 1; i <= 30; i++){
        var itemId = "colSize" + i;
        var toAddItem = record.get(itemId);
        if(!!toAddItem){
            var newColumn = {
                sortable     : false,
                renderer     : Core.FieldFormat.numberFormat({
                    readonly     : true,
                    tabId        : 'tab_meas',
                    precision    : 3,
                    columnId : Core.Document.FORM_NAME + '__measCal__size'+ i
                }),
                id           : 'size'+ i,
                dataIndex    : 'size'+ i,
                header       :  '<div style="float:left;padding-left:8px;padding-top:8px;">' + clientDs.getValue('colSize'+ i)+ '</div>',
                width   : 50
            }
            orColumns[length] = orColumns[length-1];
            orColumns[length-1] = orColumns[length-2];
            orColumns[length-2] = orColumns[length-3];
            orColumns[length-3] = newColumn;
            length++;
            addedColumn = addedColumn + 1;
        }else{
            break;
        }
    }
    var colModel = new Core.grid.ColumnModel(orColumns);
    var measGr = measGrid.grid;
    measGr.reconfigure( measGr.store,colModel);
    var width =  Math.max(Core.customize.getGridWidth(measGrid) + 25,Core.GridUtil.getGridWidth(measGrid.conf.columnModelParams));
       measGr.setWidth(width);

    // refresh header field
    Core.GridUtil.addToModifiedGrids('measCal');
};

//refresh the header field for the meas grid (the 2nd grid)
// load grid data from popup page
Core.customize.reloadMeas2Grid = function(record){
    var measGrid = Core.customize.getMeasGrid('addAccMeas');
    Core.customize.changeToOriginalGrid('addAccMeas');
    var clientDs = Core.getClientDS();
    var orColumns = measGrid.getColumnModelParams();
    var length = orColumns.length;
    var addedColumn = 0;
    for(var i = 1; i <= 30; i++){
        var itemId = "colSize" + i;
        var toAddItem = record.get(itemId);
        if(!!toAddItem){
            var newColumn = {
                sortable     : false,
                editor       : Core.GridUtil.createGridEditor({
                    id           : 'size'+ i,
                    gridId       : 'addAccMeas',
                    precision    : 3,
                    type         : 'NumberField'
                }),
                renderer     : Core.FieldFormat.numberFormat({
                    tabId        : 'tab_meas',
                    precision    : 3,
                    columnId : Core.Document.FORM_NAME + '__addAccMeas__size'+ i
                }),
                id           : 'size'+ i,
                dataIndex    : 'size'+ i,
                header       :  '<div style="float:left;padding-left:8px;padding-top:8px;">' + clientDs.getValue('colSize'+ i) + '</div>',
                width        : 50
            }
            orColumns[length] = orColumns[length-1];
            orColumns[length-1] = orColumns[length-2];
            orColumns[length-2] = orColumns[length-3];
            orColumns[length-3] = newColumn;
            length++;
            addedColumn = addedColumn + 1;
        }else{
            break;
        }
    }
    var colModel = new Core.grid.ColumnModel(orColumns);
    var measGr = measGrid.grid;
    measGr.reconfigure( measGr.store,colModel);
    var width =  Math.max(Core.customize.getGridWidth(measGrid) + 25,Core.GridUtil.getGridWidth(measGrid.conf.columnModelParams));
      measGr.setWidth(width);
    // refresh header field
    Core.GridUtil.addToModifiedGrids('addAccMeas');
};

// when change temlpate type ,refresh template name and std size
Core.ComponentMgr.onAvailable('templateTypeId$0', CORE.CMP_TYPE_COMBOBOX, function(combo) {
    //var tplType = Core.getCmp('templateTypeId$0', CORE.CMP_TYPE_COMBOBOX);
    var clientDs = Core.getClientDS();
    var tplTypeValue = clientDs.getValue('templateTypeId');
       combo.on("blur", function(combo) {
    var tplType = Core.getCmp('templateTypeId$0', CORE.CMP_TYPE_COMBOBOX);
    var curItem = tplType.getValue();
    if(isEmptyString(curItem)){
        var stdSize = Core.getCmp('standardSize$0',CORE.CMP_TYPE_COMBOBOX);
        stdSize.setValue('');
        stdSize.store.removeAll();
        stdSize.setDisabled(true);
        return;
        }
    });

    combo.on("beforeselect",function(combo, record, index){
        Core.customize.measTplType = combo.getValue();
    });

    combo.on("select",function(combo, record, index){
        var clientDs = Core.getClientDS();
        var tpltypeId = clientDs.getObj('templateTypeId');
        var styleId = clientDs.getValue('id');
        if(!isEmptyString(Core.customize.measTplType)){
            Core.MessageBox.confirm('MSG_CHANGE_TPL_TYPE',function(){
                if (!isEmptyString(styleId)){
                    var params = [];
                    params['restrictions["mqfa.style_id"]'] = styleId;
                    Ext.Ajax.request({
                        url : Core.base + 'check_has_exist_in_qm.action',
                        method : 'POST',
                        success : function(response) {
                        var jsonData = Ext.util.JSON.decode(response.responseText);
                        if(jsonData.records[0].count > 0){
                            Core.Msg.warning('STYLE_038');
                            combo.setValue(Core.customize.measTplType);
                            return;
                        }else{
                            var tplName = document.getElementById('templateName');
                            tplName.value = '';
                            var clientDs = Core.getClientDS();
                            clientDs.updateValue('templateName','');
                            var stdSize = Core.getCmp('standardSize$0',CORE.CMP_TYPE_COMBOBOX);
                            stdSize.setValue('');
                            stdSize.store.removeAll();
                            stdSize.setDisabled(true);
                        }
                    },
                    failure : function(response) {
                        Core.Document.handleError(response);
                    },
                    scope : this,
                    params : params
                    });
                }else{
                        var tplName = document.getElementById('templateName');
                        tplName.value = '';
                        var clientDs = Core.getClientDS();
                        clientDs.updateValue('templateName','');
                        var stdSize = Core.getCmp('standardSize$0',CORE.CMP_TYPE_COMBOBOX);
                        stdSize.setValue('');
                        stdSize.store.removeAll();
                        stdSize.setDisabled(true);
                }
            },function(){
                combo.setValue(Core.customize.measTplType);
            });
        }
    });
});


// ==================== end meas tpl ==========================================
Ext.namespace('Core.customize.style.meas');
Core.customize.style.meas.removeMeasCalOldRecord = [];
Core.customize.style.meas.removeAddAccMeasGridOldRecord = [];
Core.customize.measTplItemsJSON = {};
Core.customize.detail_labels = {}; // key : desc1 code, value : labels from lookup
Core.customize.getSpeLabelsValue = function(record,desEvent,value){
    var desc1Code = record.get('desc1Code');
    Core.Document.lookup({'bookName' : 'Specification Detail', 'criteria' : {
        'Specification Desc 1 Code' : desc1Code}},function(response){
         var rs = Ext.util.JSON.decode(response.responseText);
         if (rs[0] == null || Ext.isEmpty(rs[0]['Details Label'])) {
             Core.Msg.warning('STYLE_004', desc1Code);
             return;
         }
         var labels = rs[0]['Details Label'].split(",");
         Core.customize.detail_labels[desc1Code] = labels;
         Core.customize.current_labels = labels;
         if(desEvent=='dropIn'){
             var concatValue = '';
             var nLen = labels.length;
             var i = 0;
             while(i <nLen){
                 concatValue += labels[i]+ ":"+",";
                 i++;
             }
             concatValue = concatValue.substring(0,(concatValue.length - 1));
             record.set('details',concatValue);
             Core.GridUtil.addToModifiedGrids('styleSpec');
                }else{
                     if (Core.customize.detail_labels[desc1Code]) {
                            Core.customize.popupSpecDetailWin = Ext.getCmp('specDetailWindow');
                            Core.customize.specDetailWindowShow(labels, value, record);
                     }
                }
    }, this);
};
Core.customize.popupGridTextAreaWin = {};
Core.customize.popupGridTextAreaWin[Core.Document.FORM_NAME + '__styleSpec__details'] = function(value, record, dataIndex, gridId, readonly) {
    if (Ext.isEmpty(record.get('desc1Code'))) {
        Core.Msg.warning("STYLE_016");
        return;
    }
    Core.customize.getSpeLabelsValue(record,'popIn',value);
   };

Core.customize.genDetaiValue = function(){
    var record = this.comboExt.record;
    Core.customize.getSpeLabelsValue(record,'dropIn');
};
Core.customize.specDetailWindowShow = function(labels, value, record) {
    if (!Core.customize.popupSpecDetailWin) {
       YAHOO.util.Event.onContentReady('style_spec_popup_fields_div', function() {
            Core.customize.styleSpecPopup.initFields(labels);
            Core.customize.setWinValue(value,labels, record);
       });
       Core.customize.popupSpecDetailWin = new Ext.Window({
            title : 'Spec. detail',
              id  : 'specDetailWindow',
            width : 800,
            height: CORE.STANDARD_WIN.HEIGHT,
            shadow:false,
            closeAction: 'hide',
            resizable: false ,
            plain:false,
            modal: true,
            autoScroll : true,
            layout : 'form',
            html : '<div id="style_spec_popup_fields_div"></div>',
            listeners : {
                'show': function(){
                            var el = document.getElementById('style_spec_popup_input_0');
                           if (el) {
                               el.focus();
                           } else {
                               YAHOO.util.Event.onContentReady('style_spec_popup_input_0', function() {
                               var el = document.getElementById('style_spec_popup_input_0');
                               el.focus();
                            });
                        }
                }
            },
            buttons : [
                {
                    text : 'Ok',
                    scope : this,
                    handler : function () {
                        if (!Ext.isEmpty(Core.customize.styleSpecPopup.release)) {
                            Core.customize.submitData(value, record);
                        }
                        if (!Ext.isEmpty(Core.customize.popupSpecDetailWin)) {
                            Core.customize.popupSpecDetailWin.close();
                            Core.customize.popupSpecDetailWin.destroy();
                        }
                    }
                },{
                    text : 'Cancel',
                    scope : this,
                    handler : function() {
                        if (!Ext.isEmpty(Core.customize.popupSpecDetailWin)) {
                            Core.customize.popupSpecDetailWin.close();
                            Core.customize.popupSpecDetailWin.destroy();
                        }
                    }
                }
            ]
      });
   } else {
          Core.customize.styleSpecPopup.initFields(labels);
          Core.customize.setWinValue(value,labels, record);
   }
   var clientDS = Core.getClientDS();
   if(Core.customize.TAB_SPEC_READONLY()){
        var btns = Ext.getCmp('specDetailWindow').buttons;
        btns[0].hide();
   }
   Core.customize.popupSpecDetailWin.show();
};
//set spec popup win value
Core.customize.setWinValue = function(value, labels, record){
    var styleSpecGrid = Core.getCmp('styleSpec', CORE.CMP_TYPE_GRID);

    var i = 0;
    var nLen = labels.length;
    var str = '';

    while(i <nLen){
        var curValue = document.getElementById('style_spec_popup_input_'+ i).value;
        //concatValue += labels[i]+ ":" + curValue + ",";
        refNo = 'ref'+ (i - 0 + 1);
        str = record.get(refNo) || '';
        document.getElementById('style_spec_popup_input_'+ i).value = str;
        i++;
    }
};

Core.customize.submitData = function(value, record){
    var concatValue = '';
    var styleSpecGrid = Core.getCmp('styleSpec', CORE.CMP_TYPE_GRID);
    var labels = Core.customize.current_labels;
    var nLen = labels.length;
    var i = 0;
    while(i <nLen){
        var curValue = document.getElementById('style_spec_popup_input_'+ i).value;
        concatValue += labels[i]+ ":" + curValue + ",";
        refNo = 'ref'+ (i - 0 + 1);
        record.set(refNo,curValue);
        i++;
    }
    // clean other ref fields
    i = i - 0 + 1;
    while(i <= 10){
        record.set('ref'+ i,'');
        i++;
    }
    concatValue = concatValue.substring(0,(concatValue.length - 1));
    record.set('details',concatValue);
    Core.customize.popupSpecDetailWin.close();
    Core.GridUtil.addToModifiedGrids('styleSpec');

};

    ///////////////// functions //////////////////////////////
Core.customize.styleSpecPopup.initFields = function(labels) {
    var el = Ext.getDom('style_spec_popup_fields_div');

    if (Ext.isEmpty(el)) {
        console.error('Please define the div, "style_spec_popup_fields_div"!');
        return;
    }
    el.innerHTML = '';//clear first
    var sArray = [];
    var nLen = labels.length;
    sArray.push('<div style="overflow:auto;height: 330">');
    sArray.push('<table id="style_spec_popup_table" class="style_spec_popup_table_class">');
    sArray.push('<tr><td colspan="2" height="5"></td></tr>');
    for (var i=0; i<nLen; i++) {
        sArray.push('<tr><td class="col_label"><label class="cls_label" style="white-space:nowrap;">');
        sArray.push(labels[i]);
        sArray.push('</label></td><td><input type="text" class="cust_string_250" style="width:730px;" id="style_spec_popup_input_');
        sArray.push(i);
        sArray.push('" value="');
        var clientDS = Core.getClientDS();
        if(Core.customize.TAB_SPEC_READONLY()){
            sArray.push('" readonly="readonly');
        }
        sArray.push('"/></td><tr>');
    }//endof for(i)
    sArray.push('</table></div>');
    el.innerHTML = sArray.join('');
    sArray = [];
    el = null;
};
Core.customize.styleSpecPopup.release = function() {
    Core.customize.styleSpecPopup = null;
};

// when change temlpate type ,refresh template spec popup label and input
// when change temlpate type ,refresh template spec popup label and input
Core.addCmpListener('styleSpec', CORE.EVENT_GRID_AFTER_CELL_EDIT, function(p,e){
   if(e.field == 'tplTypeId' && e.value != e.originalValue){
        e.record.set('details','');
        e.record.set('ref1','');
        e.record.set('ref2','');
        e.record.set('ref3','');
        e.record.set('ref4','');
        e.record.set('ref5','');
        e.record.set('ref6','');
        e.record.set('ref7','');
        e.record.set('ref8','');
        e.record.set('ref9','');
        e.record.set('ref10','');
        e.record.set('desc1Id','');
        e.record.set('desc1Code','');
        e.record.set('desc2Id','');
        e.record.set('desc2Code','');
   }
   if(e.field == 'desc1Id' && e.value != e.originalValue){
        e.record.set('details','');
        e.record.set('ref1','');
        e.record.set('ref2','');
        e.record.set('ref3','');
        e.record.set('ref4','');
        e.record.set('ref5','');
        e.record.set('ref6','');
        e.record.set('ref7','');
        e.record.set('ref8','');
        e.record.set('ref9','');
        e.record.set('ref10','');
        e.record.set('desc2Id','');
        e.record.set('desc2Code','');
   }
   return;
});


Core.customize.toggleDropdownFields = function(){
    var ds = Core.getClientDS();
    if(ds.getValue('productRegStatusCode') == 'NEW' || ds.getValue('productRegStatusCode') == 'EXISTING'
        || (ds.getValue('productRegStatusCode') == 'FAILED' && ds.getValue('hasColorRegistered') == 'false')){
        Core.getCmp('prodType$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(false);
        Core.getCmp('OstWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(false);
        Core.getCmp('SndWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(false);
        Core.getCmp('TrdWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(false);
        Core.getCmp('FthWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(false);
        Core.getCmp('VthWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(false);
    } else if (ds.getValue('productRegStatusCode') == 'LOCKED'){
        Core.getCmp('prodType$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
        Core.getCmp('OstWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
        Core.getCmp('SndWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
        Core.getCmp('TrdWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
        Core.getCmp('FthWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
        Core.getCmp('VthWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
    } else if (ds.getValue('productRegStatusCode') == 'REGISTERED' || ds.getValue('productRegStatusCode') == 'CHANGED'
        || (ds.getValue('productRegStatusCode') == 'FAILED' && ds.getValue('hasColorRegistered') == 'true' )){
        Core.getCmp('prodType$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
        Core.getCmp('OstWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
        Core.getCmp('SndWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
        Core.getCmp('TrdWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
        Core.getCmp('FthWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
        Core.getCmp('VthWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
    }
};

Core.customize.isApplyBtnAvailable = function(){
    var ds = Core.getClientDS();
    var result = true;
    if(ds.getValue('productRegStatusCode') == 'NEW' || ds.getValue('productRegStatusCode') == 'EXISTING'
        || (ds.getValue('productRegStatusCode') == 'FAILED' && ds.getValue('hasColorRegistered') == 'false')){
        result =  true;
    } else if (ds.getValue('productRegStatusCode') == 'LOCKED'){
        result =  false;
    } else if (ds.getValue('productRegStatusCode') == 'REGISTERED' || ds.getValue('productRegStatusCode') == 'CHANGED'
        || (ds.getValue('productRegStatusCode') == 'FAILED' && ds.getValue('hasColorRegistered') == 'true' )){
        result =  false;
    }
    return result;
};

Core.customize.basicSpecDescPopup = function(){
   Core.customize.prodTypeSelected = -1;
   Core.WindowUtil.popupCustomizedWindow({
       id  : 'styleSpecCus_win',
       url : 'jsp/coles/popup/popup_style_spec_cus.jsp',
       title : 'Select Item Description',
       width : CORE.NORMAL_WIN.WIDTH,
       height: CORE.NORMAL_WIN.HEIGHT,
       afterRenderFn : Core.customize.toggleDropdownFields,
       buttons : [
               {
                   text : 'Apply',
                   scope : this,
                   handler : function () {
                       var clientDs = Core.getClientDS();
                       if(Core.customize.TAB_SPEC_READONLY()){
                           Core.customize.close();
                           return;
                       }
                       if(!Core.customize.isApplyBtnAvailable()){
                           Core.customize.close();
                           return;
                       }
                       Core.customize.applyItem();
                   }
               },{
                   text : 'Cancel',
                   scope : this,
                   handler : function() {
                       Core.customize.close();
                   }
               }
       ]
   });

   if(isNotNullAndUndefined(Core.getCmp('prodType$0', CORE.CMP_TYPE_COMBOBOX))){
       Core.customize.setdisplayForPopupEls();
   }
};

Core.customize.setdisplayForPopupEls = function(){
   var clientDs = Core.getClientDS();
   if(Core.customize.TAB_SPEC_READONLY()){
       Core.getCmp('prodType$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
       Core.getCmp('OstWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
       Core.getCmp('SndWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
       Core.getCmp('TrdWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
       Core.getCmp('FthWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
       Core.getCmp('VthWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(true);
   }else{
       Core.getCmp('prodType$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(false);
       Core.getCmp('OstWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(false);
       Core.getCmp('SndWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(false);
       Core.getCmp('TrdWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(false);
       Core.getCmp('FthWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(false);
       Core.getCmp('VthWord$0', CORE.CMP_TYPE_COMBOBOX).comboExt.setDisabled(false);
   }
   Core.customize.toggleDropdownFields();
};

Core.customize.applyItem = function(){
    var prodTplType = Core.getCmp('prodType$0', CORE.CMP_TYPE_COMBOBOX);
    var OstWord = Core.getCmp('OstWord$0', CORE.CMP_TYPE_COMBOBOX);
    var SndWord = Core.getCmp('SndWord$0', CORE.CMP_TYPE_COMBOBOX);
    var TrdWord = Core.getCmp('TrdWord$0', CORE.CMP_TYPE_COMBOBOX);
    var FthWord = Core.getCmp('FthWord$0', CORE.CMP_TYPE_COMBOBOX);
    var VthWord = Core.getCmp('VthWord$0', CORE.CMP_TYPE_COMBOBOX);
    /*
    if(!prodTplType.getValue()){
        var clientDs = Core.getClientDS();
        clientDs.updateValue('custItemDesc','');
        Core.customize.close();
        return;
    }
    */
    var OstValue = OstWord.getValue() ? OstWord.getValueById('name',OstWord.getValue(),'id') : '';
    var SndValue = SndWord.getValue() ? SndWord.getValueById('name',SndWord.getValue(),'id') : '';
    var TrdValue = TrdWord.getValue() ? TrdWord.getValueById('name',TrdWord.getValue(),'id') : '';
    var FthValue = FthWord.getValue() ? FthWord.getValueById('name',FthWord.getValue(),'id') : '';
    var VthValue = VthWord.getValue() ? VthWord.getValueById('name',VthWord.getValue(),'id') : '';

    var concatval = OstValue + ',' + SndValue+','+ TrdValue +',' + FthValue +','+ VthValue;
    var clientDs = Core.getClientDS();
    clientDs.updateValue('custItemDesc',concatval);
    Core.customize.close();
};

Core.customize.close = function(){
    var prodTplType = Core.getCmp('prodType$0', CORE.CMP_TYPE_COMBOBOX);
    var OstWord = Core.getCmp('OstWord$0', CORE.CMP_TYPE_COMBOBOX);
    var SndWord = Core.getCmp('SndWord$0', CORE.CMP_TYPE_COMBOBOX);
    var TrdWord = Core.getCmp('TrdWord$0', CORE.CMP_TYPE_COMBOBOX);
    var FthWord = Core.getCmp('FthWord$0', CORE.CMP_TYPE_COMBOBOX);
    var VthWord = Core.getCmp('VthWord$0', CORE.CMP_TYPE_COMBOBOX);
    prodTplType.clearValue();
    OstWord.clearValue();
    SndWord.clearValue();
    TrdWord.clearValue();
    FthWord.clearValue();
    VthWord.clearValue();
    var win = Core.getCmp('styleSpecCus_win', CORE.CMP_TYPE_WINDOW);
    win.hide();
};

Core.customize.refreshItem = function(){
    var clientDs = Core.getClientDS();
    var stdSize = clientDs.getValue('standardSize');
    if(isEmptyString(stdSize)){
        Core.Msg.warning('STYLE_014');
        return false;
    }
    var stdNo = '';
    for(var i = 1; i <= Core.customize.MAX_ALLOW_SIZES; i++){
        if( stdSize == clientDs.getValue('colSize'+ i)){
            stdNo = i;
            clientDs.updateValue('stdSizeNo',stdNo);
            break;
        }
    }

    var gradingGrid = Core.getCmp('meas', CORE.CMP_TYPE_GRID);
    var measGrid = Core.getCmp('measCal', CORE.CMP_TYPE_GRID);
    var gradingGridStore = gradingGrid.getExtStore();
    var measGridStore = measGrid.getExtStore();

    //check code ,ref,pointOfMeas is blank or not
    for (var i=0, len=gradingGridStore.getCount(); i<len; i++) {
        var r = gradingGridStore.getAt(i);
        if (r.get("deleted") != 'deleted') {
            var pointOfMeas = r.get("pointOfMeas");
            if (isEmptyString(pointOfMeas)) {
                Core.Msg.warning('STYLE_027');
                return false;
            }
        }
    }

    //remove current cal. measure grid data
    if(Core.customize.style.meas.removeMeasCalOldRecord.length == 0){
        Core.customize.style.meas.removeMeasCalOldRecord = measGridStore.data.items;
    }

    var newReocrds = [];
    var measRecordIndex = 0;
    var isSmallSampleMeas = false;
    var isSmallRevicedMeas = false;
    var lessNum = 0;
    for(var i=0, len=gradingGridStore.getCount(); i<len; i++){
        var objStore = gradingGridStore.getAt(i);
        if(objStore.get("deleted") == 'deleted'){
            continue;
        }
        var sampleMeas = objStore.get("sampleMeas") || '';
        var revicedMeas = objStore.get("revicedMeas") || '';

        //insert data if not empty
        var newValues = {};
        newValues.id = 'NEW' + measRecordIndex;
        newValues.version = 'NEW';
        newValues.lineNo = objStore.get("lineNo");
        newValues.code = objStore.get("code");
        newValues.ref = objStore.get("ref");
        newValues.pointOfMeas = objStore.get("pointOfMeas");
        newValues.sampleMeas = sampleMeas;
        newValues.revicedMeas = revicedMeas;
        newValues.tolMins = objStore.get("tolMins");
        newValues.tolPlus = objStore.get("tolPlus");

        if (!isEmptyString(sampleMeas) || !isEmptyString(revicedMeas)) {
            var stdCalCol = Number(revicedMeas) >0 ? Number(revicedMeas): Number(sampleMeas);
            //sizeCode is the length of all the size columns, after new size column is added.
            var sizeCode = gradingGrid.getColumnModelParams().length - Core.customize.STYLE_PREV_COL_SIZE - 1;

            newValues['size' + stdNo] = stdCalCol.toString();
            for(var curSizeCol=stdNo+1; curSizeCol<=sizeCode; curSizeCol++){
                preValue = Number(objStore.get("size" + (curSizeCol - 1))||0);
                newValues['size' + curSizeCol] = (Number(newValues['size' + (curSizeCol - 1)]) + preValue).toFixed(2) ;
            }
            for(var curSizeCol=stdNo-1; curSizeCol>0; curSizeCol--){
                posValue = Number(objStore.get("size" + (curSizeCol))||0);
                newValues['size' + curSizeCol] = (Number(newValues['size' + (curSizeCol + 1)]) - posValue).toFixed(2);
                if(newValues['size' + curSizeCol] < 0){
                   cell = gradingGrid.grid.getView().getCell(i, 7 + curSizeCol);
                   cell.style.backgroundColor = 'red';
                   //cell.className += (' ' + 'bgcolor-checked');
                   if (!isEmptyString(revicedMeas) && (Number(revicedMeas)>0)) {
                       isSmallRevicedMeas = true;
                   } else {
                       isSmallSampleMeas = true;
                   }
                   lessNum ++;
                }
            }
            for(var k = sizeCode + 1; k<=Core.customize.MAX_ALLOW_SIZES; k++){
                newValues['size' + k] = '0';
            }
        }else{
            for (var j = 1, nlen = measGrid.getColumnModelParams().length - 10; j<nlen; j++) {
                newValues['size' + j] = '';
            }
        }
        var rd = new measGrid.RecordDef(newValues);
        newReocrds.push(rd);
        measRecordIndex++;
    }

    if(lessNum > 0){
        //Core.Msg.warning("STYLE_009");
        if (isSmallRevicedMeas && isSmallSampleMeas) {
            Core.MessageBox.alert({title:['TITLE_WARNING'],width:550,msg:'STYLE_032',type:'warning'});
        } else if (isSmallRevicedMeas) {
            Core.MessageBox.alert({title:['TITLE_WARNING'],width:350,msg:'STYLE_031',type:'warning'});
        } else {
            Core.MessageBox.alert({title:['TITLE_WARNING'],width:350,msg:'STYLE_017',type:'warning'});
        }
        return false;
    }
    measGridStore.removeAll();
    measGridStore.add(newReocrds);
    Core.GridUtil.addToModifiedGrids(measGrid.grid.id);
    return true;
};

Core.customize.style.meas.removeMeasAdAccessOldRed = function(){
    var items = Core.customize.style.meas.removeAddAccMeasGridOldRecord;
    if(items.length == 0){return;}
    var ClientDs = Core.getClientDS();
    for (var i = 0; i < items.length; i++) {
        var modifiedRecord = items[i];
        var itemVersion = modifiedRecord.data['version'];
        if(/^NEW/.test(itemVersion)){
            continue;
        }
        name = 'addAccMeas__' + modifiedRecord.data['id']+'--'+ modifiedRecord.data['version']+ '__' + 'DELETED';
        value = 'delete';
        ClientDs.updateValue(name,value);
    }
    Core.customize.style.meas.removeAddAccMeasGridOldRecord = [];
};

Core.customize.style.meas.removeMeasCalOldRed = function(){
    var items = Core.customize.style.meas.removeMeasCalOldRecord;
    if(items.length == 0){return;}
    var ClientDs = Core.getClientDS();
    for (var i = 0; i < items.length; i++) {
        var modifiedRecord = items[i];
        var itemVersion = modifiedRecord.data['version'];
        if(/^NEW/.test(itemVersion)){
            continue;
        }
        name = 'styleMeasCal__' + modifiedRecord.data['id']+'--'+ modifiedRecord.data['version']+ '__' + 'DELETED';
        value = 'delete';
        ClientDs.updateValue(name,value);
    }
    Core.customize.style.meas.removeMeasCalOldRecord = [];
};

Core.addListener(CORE.EVENT_BEFORE_SAVE,function(){
    var clientDs = Core.getClientDS();
    var templateName = clientDs.getValue('templateName');
    if(isEmptyString(templateName)){
        var setsAddAccMeasGridButtonsDiv = document.getElementById("addAccMeasGridBtn");
        if(!isEmptyString(setsAddAccMeasGridButtonsDiv)){
            setsAddAccMeasGridButtonsDiv.innerHTML = '';
        }

        var setsmeasGridButtonsDiv = document.getElementById("measGridBtn");
        if(!isEmptyString(setsmeasGridButtonsDiv)){
            setsmeasGridButtonsDiv.innerHTML = '';
        }
        var setsMeasCalGridButtonsDiv = document.getElementById("measCalGridBtn");
        if(!isEmptyString(setsMeasCalGridButtonsDiv)){
            setsMeasCalGridButtonsDiv.innerHTML = '';
        }
        Core.customize.removeMeasGridAllStore();
        Core.customize.clearGridAndStore(Core.customize.MEAS_GRID_FOR_STYLE);
        Core.customize.clearGridAndStore('measCal');
        Core.customize.clearGridAndStore('addAccMeas');

        var stdSizeCombo = Core.getCmp('standardSize$0',CORE.CMP_TYPE_COMBOBOX);
        if(!isEmptyString(stdSizeCombo)){
            var stdSizeComboStore = stdSizeCombo.store;
            stdSizeCombo.setValue('');
            stdSizeComboStore.removeAll();
            stdSizeCombo.setDisabled(true);
        }
        return;
    }

    var firstSizeCode = clientDs.getValue('colSize1');
    if(!isEmptyString(firstSizeCode) && !!Core.getCmp(Core.customize.MEAS_GRID_FOR_STYLE, CORE.CMP_TYPE_GRID)) {
        if(!Core.customize.refreshItem()){
            return false;
        }
    }
    Core.customize.style.meas.removeMeasCalOldRed();
    Core.customize.style.meas.removeMeasAdAccessOldRed();
});

Core.customize.removeMeasGridAllStore = function(){
    var clientDs = Core.getClientDS();
    var gradingGrid = Core.getCmp('meas', CORE.CMP_TYPE_GRID);
    if(!isEmptyString(gradingGrid)){
        var store = gradingGrid.grid.getStore();
        var storeNum = store.getCount();
        if(storeNum > 0){
            store.each(function(record) {
                if (!record.data['id'].match('NEW')) {
                    clientDs.add('meas__' + record.data['id'] + '--' + record.data['version'] + '__DELETED', 'delete');
                }
            });
            store.removeAll();
        }
    }
    var measCalGrid = Core.getCmp('measCal', CORE.CMP_TYPE_GRID);
    if(!isEmptyString(measCalGrid)){
        var store = measCalGrid.grid.getStore();
        var storeNum = store.getCount();
        if(storeNum > 0){
            store.each(function(record) {
                if (!record.data['id'].match('NEW')) {
                    clientDs.add('styleMeasCal__' + record.data['id'] + '--' + record.data['version'] + '__DELETED', 'delete');
                }
            });
            store.removeAll();
        }
    }
    var addAccMeasGrid = Core.getCmp('addAccMeas', CORE.CMP_TYPE_GRID);
    if(!isEmptyString(addAccMeasGrid)){
        var store = addAccMeasGrid.grid.getStore();
        var storeNum = store.getCount();
        if(storeNum > 0){
            store.each(function(record) {
                if (!record.data['id'].match('NEW')) {
                    clientDs.add('addAccMeas__' + record.data['id'] + '--' + record.data['version'] + '__DELETED', 'delete');
                }
            });
            store.removeAll();
        }
    }
};

Core.addCmpListener('meas', CORE.EVENT_GRID_AFTER_CELL_EDIT, function(p,e){
      cell = e.grid.getView().getCell(e.row, e.column);
      cell.style.backgroundColor = '';
      //cell.className = cell.className.replace('bgcolor-checked', '');
});

//create a fabric in tab-spec popup win
Core.customize.newFabric = function(){
    Core.WindowUtil.popupCustomizedWindow({
        id  : 'styleSpecFabric_win',
        url : 'jsp/coles/popup/popup_style_spec_fabric.jsp',
        title : 'New Raw Material Detail',
        width : CORE.LARGE_WIN.WIDTH,
        height: CORE.LARGE_WIN.HEIGHT,
        buttons : [
                {
                    text : 'Save',
                    scope : this,
                    handler : function () {
                        Core.customize.CREATE_FABRIC = 'onlySave';
                        Core.customize.createFabric();
                    }
                },              {
                    text : 'Save & Apply',
                    scope : this,
                    handler : function () {
                        Core.customize.CREATE_FABRIC = 'apply';
                        Core.customize.createFabric();
                    }
                },{
                    text : 'Close',
                    scope : this,
                    handler : function() {
                        Core.customize.closeCreateFabricWin();
                    }
                }
        ]
    });
};
Core.customize.closeCreateFabricWin = function(){
    Core.getClientDS().updateValue('vendorFabricId','');
    document.getElementById('materialName$0').value = '';
    document.getElementById('vendorRefNo$0').value = '';
    document.getElementById('vendorFabricName').value = '';
    document.getElementById('vendorFabricCode').value = '';
    document.getElementById('vendorFabricId').value = '';
    document.getElementById('addDesc$0').value = '';
    document.getElementById('fabricMill$0').value = '';
    document.getElementById('fibreContent$0').value = '';
    document.getElementById('qualityNo$0').value = '';
    document.getElementById('weightGauge$0').value = '';
    document.getElementById('yarnCount$0').value = '';
    document.getElementById('threadCount$0').value = '';
    document.getElementById('width$0').value = '';
    document.getElementById('location$0').value = '';
    document.getElementById('prints$0').value = '';
    document.getElementById('design$0').value = '';
    document.getElementById('cost$0').value = '';
    document.getElementById('percentage$0').value = '';

    var haza = Core.getCmp('hazardoursId$0',CORE.CMP_TYPE_COMBOBOX);
    haza.clearValue();

    var mill = Core.getCmp('millId$0', CORE.CMP_TYPE_COMBOBOX);
    mill.clearValue();

    var finish = Core.getCmp('finishId$0', CORE.CMP_TYPE_COMBOBOX);
    finish.clearValue();

    var materialType = Core.getCmp('materialType$0', CORE.CMP_TYPE_COMBOBOX);
    materialType.clearValue();

    var constructionType = Core.getCmp('constructionType$0', CORE.CMP_TYPE_COMBOBOX);
    constructionType.clearValue();

    var dyeMethod = Core.getCmp('dyeMethod$0', CORE.CMP_TYPE_COMBOBOX);
    dyeMethod.clearValue();

    var weightMetric = Core.getCmp('weightMetric$0', CORE.CMP_TYPE_COMBOBOX);
    weightMetric.clearValue();

    var withPrint = Core.getCmp('withPrint$0', CORE.CMP_TYPE_COMBOBOX);
    withPrint.clearValue();

    var withEmb = Core.getCmp('withEmb$0', CORE.CMP_TYPE_COMBOBOX);
    withEmb.clearValue();

    var costUom = Core.getCmp('costUomId$0', CORE.CMP_TYPE_COMBOBOX);
    costUom.clearValue();

    var win = Core.getCmp('styleSpecFabric_win', CORE.CMP_TYPE_WINDOW);
    win.hide();
};

Core.customize.createFabric = function(){
    var clientDs = Core.getClientDS();
    var currentStatus = clientDs.getValue('status');
    var materialType = Core.getCmp('materialType$0', CORE.CMP_TYPE_COMBOBOX);
    var materialTypeId = materialType.getValue();
    var materialName = document.getElementById('materialName$0').value;
    var vendorRefNo = document.getElementById('vendorRefNo$0').value;
    var vendorFabricName = document.getElementById('vendorFabricName').value;
    var vendorFabricCode = document.getElementById('vendorFabricCode').value;
    var vendorFabricId = document.getElementById('vendorFabricId').value;
    var addDesc = document.getElementById('addDesc$0').value;
    var mill = Core.getCmp('millId$0', CORE.CMP_TYPE_COMBOBOX);
    var millId = mill.getValue();
    var fabricMill = document.getElementById('fabricMill$0').value;
    var fibreContent = document.getElementById('fibreContent$0').value;
    var qualityNo = document.getElementById('qualityNo$0').value;
    //dropdown
    var dyeMethod = Core.getCmp('dyeMethod$0', CORE.CMP_TYPE_COMBOBOX);
    var dyeMethodId = dyeMethod.getValue();
    //dropdown
    var constructionType = Core.getCmp('constructionType$0', CORE.CMP_TYPE_COMBOBOX);
    var constructionTypeId = constructionType.getValue();
    var finish = Core.getCmp('finishId$0', CORE.CMP_TYPE_COMBOBOX);
    var finishId = finish.getValue();

    var weightGauge = document.getElementById('weightGauge$0').value;
    //dropdown
    var weightMetric = Core.getCmp('weightMetric$0', CORE.CMP_TYPE_COMBOBOX);
    var weightMetricId = weightMetric.getValue();

    var yarnCount = document.getElementById('yarnCount$0').value;
    var threadCount = document.getElementById('threadCount$0').value;
    var width = document.getElementById('width$0').value;
    //dropdown
    var withPrint = Core.getCmp('withPrint$0', CORE.CMP_TYPE_COMBOBOX);
    var withPrintId = withPrint.getValue();

    var location = document.getElementById('location$0').value;
    //dropdown
    var withEmb = Core.getCmp('withEmb$0', CORE.CMP_TYPE_COMBOBOX);
    var withEmbId = withEmb.getValue();

    var design = document.getElementById('design$0').value;
    var prints = document.getElementById('prints$0').value;


    var percent = document.getElementById('percentage$0').value;
    var haza = Core.getCmp('hazardoursId$0',CORE.CMP_TYPE_COMBOBOX);
    var hazaId = haza.getValue();
    var cost = document.getElementById('cost$0').value;
    var costUom = Core.getCmp('costUomId$0', CORE.CMP_TYPE_COMBOBOX);
    var costUomId = costUom.getValue();

    if (isNaN(cost)) {
        Core.Msg.warning('STYLE_057');
        return ;
    }
    if (isNaN(percent)) {
        Core.Msg.warning('STYLE_058');
        return ;
    }
    if (percent > 999999999) {
        Core.Msg.warning('STYLE_059');
        return ;
    }
    if (cost > 999999999.99) {
        Core.Msg.warning('STYLE_060');
        return ;
    }

    Core.Document.requestBizLogicAction('style_generate_fabric.action', {
    SP_I_FABRIC_TYPE : materialTypeId,
    SP_I_FABRIC_NAME : materialName,
    SP_I_USER : Core.curUserCode,
    SP_I_PRINTS : prints,
    SP_I_DESIGN : design,
    SP_I_WITHEMB : withEmbId,
    SP_I_LOCATION : location,
    SP_I_WITHPRINT : withPrintId,
    SP_I_WIDTH : width,
    SP_I_THREADCOUNT : threadCount,
    SP_I_YARNCOUNT : yarnCount,
    SP_I_WEIGHTMETRICID : weightMetricId,
    SP_I_WEIGHTGAUGE : weightGauge,
    SP_I_FINISH : finishId,
    SP_I_CONSTRUCTIONTYPE : constructionTypeId,
    SP_I_DYEMETHOD : dyeMethodId,
    SP_I_FIBRECONTENT : fibreContent,
    SP_I_FABRICMILL : fabricMill,
    SP_I_ADDDESC : addDesc,
    SP_I_VENDORNAME : vendorFabricName,
    SP_I_VENDORID : vendorFabricId,
    SP_I_VENDORREFNO : vendorRefNo,
    SP_I_QUALITYNO : qualityNo,
    SP_I_MILL : millId,
    SP_I_VENDORCODE : vendorFabricCode,
    SP_I_PERCENT : percent,
    SP_I_HAZA : hazaId,
    SP_I_COST : cost,
    SP_I_COST_UOM : costUomId,
    _DOC_STATUS : currentStatus,
    _DOC_OBJ_ID : Core.Document.FORM_ID
    }, Core.customize.refreshSelectFabricGrid);
};

Core.customize.refreshSelectFabricGrid = function(response){
    if(Core.customize.CREATE_FABRIC == 'apply'){
        // After genFabric in store procedure and then set the value back to the grid.
        Core.customize.getNewFabric(response);
        var win = Core.getCmp('styleStyleFabricPopuped', CORE.CMP_TYPE_WINDOW);
        win.hide();
    }
    Core.customize.closeCreateFabricWin();
    var grid = Core.getCmp('styleStyleFabricPopuped',CORE.CMP_TYPE_GRID);
    if(grid){
        grid.grid.getView().refresh();
    }
    Core.customize.CREATE_FABRIC = '';
};

Core.customize.getNewFabric = function(response) {
    Core.Document.returnFromBizLogicAction(response);
    var jsonData = Ext.util.JSON.decode(response.responseText);
    Ext.MessageBox.hide();
    if (jsonData && !isEmptyString(jsonData.O_FABRIC_ID)) {
        var grid = Core.getCmp('styleFabric',CORE.CMP_TYPE_GRID);
        var gridStore = grid.getExtStore();
        var newReocrds = [];
        var newValues = {};
        newValues.id = 'NEW'+ Core.customize.CREATE_FABRIC_NUM;
        newValues.version = 'NEW';
        newValues.fabricId = jsonData.O_FABRIC_ID.trim();
        newValues.materialNo = jsonData.O_FABRIC_NO.trim();
        newValues.qualityNo = document.getElementById('qualityNo$0').value;
        var materialType = Core.getCmp('materialType$0', CORE.CMP_TYPE_COMBOBOX);
        newValues.materialType = materialType.comboExt.getValue();
        newValues.materialName = document.getElementById('materialName$0').value;
        newValues.fibreContent = document.getElementById('fibreContent$0').value;
        var constructionType = Core.getCmp('constructionType$0', CORE.CMP_TYPE_COMBOBOX);
        newValues.constructionType = constructionType.comboExt.getValue();
        var finish = Core.getCmp('finishId$0', CORE.CMP_TYPE_COMBOBOX);
        var finishId = finish.getValue();
        newValues.finishId = finishId;
        newValues.finish = finish.getDisplayValue();
        var haza = Core.getCmp('hazardoursId$0',CORE.CMP_TYPE_COMBOBOX);
        var hazaId = haza.getValue();
        var hazaCode = haza.getValueById('code',hazaId);
        newValues.hazardoursId = hazaId;
        newValues.hazardoursCode = hazaCode;
        newValues.percentage = document.getElementById('percentage$0').value;
        newValues.weight = document.getElementById('weightGauge$0').value;
        var weightMetric = Core.getCmp('weightMetric$0', CORE.CMP_TYPE_COMBOBOX);
        newValues.weightMetric = weightMetric.comboExt.getValue();
        newValues.yarnCount = document.getElementById('yarnCount$0').value;
        newValues.threadCount = document.getElementById('threadCount$0').value;
        newValues.width = document.getElementById('width$0').value;
        newValues.approvalStatus = 'Pending for Approval';
        var rd = new grid.RecordDef(newValues);
        newReocrds.push(rd);
        gridStore.add(newReocrds);
        Core.GridUtil.addToModifiedGrids(grid.grid.id);
        Core.customize.CREATE_FABRIC_NUM++;
    }
};

/**colour size tab from detail refer to style_colorsize_T.js and style_colorsieze_K.js*/
Core.customize.isNewStyle = function(){
    var ds = Core.getClientDS();
    return !!!ds.getValue('refNo');
}

Core.addListener(CORE.EVENT_BEFORE_SAVE,function(){
    if(Core.customize.isNewStyle()){
        var ifSetDefaultColorSize = false, ds = Core.getClientDS();
        ifSetDefaultColorSize = !!ds.getModifiedGrid(Core.customize.STYLE_COLOR_GRID_ID);
        if(!ifSetDefaultColorSize){
            //color params
            var contractColourId = Ext.value(Core.Document.getDDRecord('contractColourId', 'name', 'NO COLOUR').id, '');
            var contractColourCode = Ext.value(Core.Document.getDDRecord('contractColourId', 'name', 'NO COLOUR').code, '');
            ds.updateValue('colors__NEW0--NEW__contractColourId', contractColourId);
            ds.updateValue('colors__NEW0--NEW__contractColourCode', contractColourCode);
            ds.updateValue('colors__NEW0--NEW__primaryColor','NO COLOUR');
            ds.updateValue('colors__NEW0--NEW__sellColor','NO COLOUR');
            ds.updateValue('colors__NEW0--NEW__registerInOdbms','1');
            ds.updateValue('colors__NEW0--NEW__lineNo',1);
            ds.updateValue('colors__NEW0--NEW__isNew','Y');

            //size params
            ds.updateValue('sizes__NEW0--NEW__lineNo',1);
            ds.updateValue('sizes__NEW0--NEW__sizeCode','n/a');
            ds.updateValue('sizes__NEW0--NEW__sizeStatus','Active');
            //keycode params
            ds.updateValue('keycodes__NEW0--NEW__contractColourId', contractColourId);
            ds.updateValue('keycodes__NEW0--NEW__contractColourCode', contractColourCode);
            ds.updateValue('keycodes__NEW0--NEW__colorNo',1);
            ds.updateValue('keycodes__NEW0--NEW__sizeNo',1);
            ds.updateValue('keycodes__NEW0--NEW__sizeCode','n/a');
            ds.updateValue('keycodes__NEW0--NEW__colorCode','NO COLOUR');
            ds.updateValue('keycodes__NEW0--NEW__status','Active');
            //Color Size default value only for kmart.
            //#3817 both kmart and target use the same logic
            //if(Core.userObj.orgCode == 'kmart'){
              ds.updateValue('colors__NEW0--NEW__packaMin',1);
              ds.updateValue('colors__NEW0--NEW__packbMin',0);
              ds.updateValue('colors__NEW0--NEW__packcMin',0);
              ds.updateValue('colors__NEW0--NEW__packdMin',0);
              ds.updateValue('colors__NEW0--NEW__packeMin',0);
              ds.updateValue('colors__NEW0--NEW__packfMin',0);
              ds.updateValue('colors__NEW0--NEW__packgMin',0);
              ds.updateValue('colors__NEW0--NEW__packhMin',0);
              ds.updateValue('colors__NEW0--NEW__packiMin',0);
              ds.updateValue('colors__NEW0--NEW__packjMin',0);

              ds.updateValue('sizes__NEW0--NEW__pack2A',1);
              ds.updateValue('sizes__NEW0--NEW__pack2B',0);
              ds.updateValue('sizes__NEW0--NEW__pack2C',0);
              ds.updateValue('sizes__NEW0--NEW__pack2D',0);
              ds.updateValue('sizes__NEW0--NEW__pack2E',0);
              ds.updateValue('sizes__NEW0--NEW__pack2F',0);
              ds.updateValue('sizes__NEW0--NEW__pack2G',0);
              ds.updateValue('sizes__NEW0--NEW__pack2H',0);
              ds.updateValue('sizes__NEW0--NEW__pack2I',0);
              ds.updateValue('sizes__NEW0--NEW__pack2J',0);
              ds.updateValue('sizes__NEW0--NEW__variationaPack',0);
              ds.updateValue('sizes__NEW0--NEW__variationaMinQty',0);
              ds.updateValue('sizes__NEW0--NEW__variationbPack',0);
              ds.updateValue('sizes__NEW0--NEW__variationbMinQty',0);
              ds.updateValue('sizes__NEW0--NEW__variationcPack',0);
              ds.updateValue('sizes__NEW0--NEW__variationcMinQty',0);
              ds.updateValue('sizes__NEW0--NEW__variationdPack',0);
              ds.updateValue('sizes__NEW0--NEW__variationdMinQty',0);

              ds.updateValue('keycodes__NEW0--NEW__packA',1);
              ds.updateValue('keycodes__NEW0--NEW__packB',0);
              ds.updateValue('keycodes__NEW0--NEW__packC',0);
              ds.updateValue('keycodes__NEW0--NEW__packD',0);
              ds.updateValue('keycodes__NEW0--NEW__packE',0);
              ds.updateValue('keycodes__NEW0--NEW__packF',0);
              ds.updateValue('keycodes__NEW0--NEW__packG',0);
              ds.updateValue('keycodes__NEW0--NEW__packH',0);
              ds.updateValue('keycodes__NEW0--NEW__packI',0);
              ds.updateValue('keycodes__NEW0--NEW__packJ',0);
              ds.updateValue('keycodes__NEW0--NEW__variationaPack',0);
              ds.updateValue('keycodes__NEW0--NEW__variationaMinQty',0);
              ds.updateValue('keycodes__NEW0--NEW__variationbPack',0);
              ds.updateValue('keycodes__NEW0--NEW__variationbMinQty',0);
              ds.updateValue('keycodes__NEW0--NEW__variationcPack',0);
              ds.updateValue('keycodes__NEW0--NEW__variationcMinQty',0);
              ds.updateValue('keycodes__NEW0--NEW__variationdPack',0);
              ds.updateValue('keycodes__NEW0--NEW__variationdMinQty',0);
            //}
       }
    }
});

Core.addListener(CORE.EVENT_AFTER_NEW,function(){
    var colorGrid = Core.getCmp(Core.customize.STYLE_COLOR_GRID_ID,CORE.CMP_TYPE_GRID);
    var sizeGrid = Core.getCmp(Core.customize.STYLE_SIZE_GRID_ID,CORE.CMP_TYPE_GRID);
    if(colorGrid){
        colorGrid.getExtStore().load();
    }
    if(sizeGrid){
        sizeGrid.getExtStore().load();
    }
});

Core.ComponentMgr.onAvailable(Core.customize.STYLE_COLOR_GRID_ID,CORE.CMP_TYPE_GRID,function(){
        Core.customize.setColorGridDefaultValue();
});

Core.ComponentMgr.onAvailable(Core.customize.STYLE_SIZE_GRID_ID,CORE.CMP_TYPE_GRID,function(){
        Core.customize.setSizeGridDefaultValue();
});

Core.customize.setColorGridDefaultValue = function(){
    var colorsGrid = Core.getCmp(Core.customize.STYLE_COLOR_GRID_ID,CORE.CMP_TYPE_GRID);
    var colorStore = colorsGrid.getExtStore();
    var _setValue = function(){
        var newReocrds = [];
        var newValues = {};
        newValues.id = 'NEW0';
        newValues.version = 'NEW';
        newValues.lineNo = ++colorStore.maxLineNo;
        var contractColourId = Ext.value(Core.Document.getDDRecord('contractColourId', 'name', 'NO COLOUR').id, '');
        var contractColourCode = Ext.value(Core.Document.getDDRecord('contractColourId', 'name', 'NO COLOUR').code, '');
        newValues.contractColourId = contractColourId;
        newValues.contractColourCode = contractColourCode;
        newValues.primaryColor = 'NO COLOUR';
        newValues.sellColor = 'NO COLOUR';
        newValues.casePackId = '';
        newValues.brandStyleNo = '';
        newValues.registerInOdbms = '1';
        newValues.packaMin = '1';
        newValues.packbMin = '0';
        newValues.packcMin = '0';
        newValues.packdMin = '0';
        newValues.packeMin = '0';
        newValues.packfMin = '0';
        newValues.packgMin = '0';
        newValues.packhMin = '0';
        newValues.packiMin = '0';
        newValues.packjMin = '0';
        newValues.isNew = 'Y';
        newValues.orderNotes = '';
        var rd = new colorsGrid.RecordDef(newValues);
        newReocrds.push(rd);
        colorStore.removeAll();
        colorStore.add(newReocrds);
        Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_COLOR_GRID_ID);
    };
    colorStore.addListener('load',function(){
        if(Core.customize.isNewStyle()){
            _setValue();
        }
    });
}

Core.customize.setSizeGridDefaultValue = function(){
    var sizesGrid = Core.getCmp(Core.customize.STYLE_SIZE_GRID_ID,CORE.CMP_TYPE_GRID);
    var sizesStore = sizesGrid.getExtStore();
    var _setValue = function(){
        var newReocrds = [];
        var newValues = {};
        newValues.id = 'NEW' + ( sizesGrid.newItemId++);
        newValues.version = 'NEW';
        newValues.lineNo = ++sizesStore.maxLineNo;
        newValues.sizeCode = 'n/a';
        newValues.pack2A = '1';
        newValues.pack2B = '0';
        newValues.pack2C = '0';
        newValues.pack2D = '0';
        newValues.pack2E = '0';
        newValues.pack2F = '0';
        newValues.pack2G = '0';
        newValues.pack2H = '0';
        newValues.pack2I = '0';
        newValues.pack2J = '0';
        newValues.metric = '';
        newValues.des = '';
        newValues.casePackId = '';
        newValues.brandStyleNo = '';
        newValues.sizeStatus = 'Active';
        newValues.variationaPack = '0';
        newValues.variationaMinQty = '0';
        newValues.variationbPack = '0';
        newValues.variationbMinQty = '0';
        newValues.variationcPack = '0';
        newValues.variationcMinQty = '0';
        newValues.variationdPack = '0';
        newValues.variationdMinQty = '0';
        var rd = new sizesGrid.RecordDef(newValues);
        newReocrds.push(rd);
        sizesStore.removeAll();
        sizesStore.add(newReocrds);
        Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_SIZE_GRID_ID);
    }
    sizesStore.addListener('load',function(){
        if(Core.customize.isNewStyle()){
            _setValue();
        }
    });
};

Core.Document.regCustomizeAction("copy", function(){
    var win = Core.WindowUtil.getWinFromCache('copyStyleWin');
    if (win) {
        Core.customize.loadCpmGrid();
    } else {
        win = new Core.Window({
            id          : 'copyStyleWin',
            url         : 'jsp/coles/popup/popup_style_copy.jsp',
            title       : 'Copy Brief / Set',
            width       : 600,
            height      : 500,
            autoScroll : false,
            closable    : true
        });
        win.addListener('afterRender', function(){
            Core.customize.loadCpmGrid();
        });
        win.render();
        win.win.addListener('move', Core.WindowUtil.winMoveHandler, this);

    }
    win.show();
}, true);

Core.customize.loadCpmGrid = function() {
    var taskGrid = Core.getCmp('cpmTaskList', CORE.CMP_TYPE_GRID);
    if (taskGrid) {
        var params = taskGrid.getExtStore().reqParams;
        params["restrictions['" + taskGrid.conf.parentField  + "']"] = requestParams["restrictions['parentId']"];
        params["totalRds"] = -1;
        if(Ext.isEmpty(taskGrid.conf.parentField)){
            console.error('style.js --- Core.customize.loadCpmGrid ---- taskGrid.conf.parentField is undefined');
        }
        taskGrid.paging.onClick("refresh");
    }
};

Core.Document.regCustomizeAction("confirmCopyStyle", function() {
    Ext.MessageBox.progress("Copy Brief / Set", "Copy Brief / Set", "Initializing...");
    var taskGrid = Core.getCmp('cpmTaskList', CORE.CMP_TYPE_GRID);
    var templateTaskIds = '';
    var clientDs = Core.getClientDS();
    var currentStatus = clientDs.getValue('status');
    if (taskGrid) {
        var selectedRecords = taskGrid.grid.getSelectedRecords();
        for (var i = 0; i < selectedRecords.length; i++) {
            var record = selectedRecords[i];
            if (record && record.data) {
                templateTaskIds += record.data['templateTaskId'];
                if (i != selectedRecords.length - 1) {
                    templateTaskIds += ',';
                }
            }
        }
    }
    Ext.MessageBox.updateProgress(0.5, "Getting server response...");
    Core.Document.requestBizLogicAction('style_copy.action', {
        SP_I_STYLE_ID : Core.Document.DOC_ID,
        SP_I_WAIVED_TEMPLATE_IDS : templateTaskIds,
        SP_I_USER_CODE : Core.curUserCode,
        _DOC_STATUS : Core.Document.statusNameForAllowedAction,
        _DOC_OBJ_ID : Core.Document.FORM_ID
    }, Core.customize.afterCopy);
}, false);

Core.Document.regCustomizeAction("closeCopyStyle", function() {
    var win = Core.WindowUtil.getWinFromCache('copyStyleWin');
    if (win) {
        win.hide();
    }
}, true);

Core.customize.afterCopy = function(response) {
    Core.Document.returnFromBizLogicAction(response);
    if(response.responseText != '' && response.responseText.indexOf('appropriate rights') > 0) {
        Core.cbxLayout.showMsg(true, response.responseText, true);
        return;
    }
    var jsonData = Ext.util.JSON.decode(response.responseText);
    //Ext.MessageBox.hide(); //-- already done in the Core.Document.returnFromBizLogicAction();
    Core.customize.afterCopyStep2.defer(100, this, [jsonData]);
}

Core.customize.afterCopyStep2 = function(jsonData) {
    if (!jsonData || isEmptyString(jsonData.O_NEW_STYLE_ID)) {
        return;
    }
    var newStyleId = jsonData.O_NEW_STYLE_ID.trim();
    var params = {};
    params['styleType'] = Core.customize.styleType;
    params['formId'] = Core.Document.FORM_ID;
    Core.clearClientDS();
    Core.gotoModule('style', newStyleId, params);
}

Core.customize.selectFromTemplate = function(){
    var sizeGrid = Core.getCmp(Core.customize.STYLE_SIZE_GRID_ID, CORE.CMP_TYPE_GRID);
    var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    Core.Document.lookup(
        {
             bookName       : 'brandVendorNo',
             orgCode   : clientDs.getValue('brandVendorCode'),
             'criteria' : {
                 portOfLoading  : clientDs.getValue('portOfLoadingCode'),
                 incoterm       : clientDs.getValue('defaultIncotermCode'),
                 motShipBy      : clientDs.getValue('defaultMotShipByCode')
             }

        },
         function(response){
            var rs = Ext.util.JSON.decode(response.responseText);
            var value = rs && rs[0] != null && rs[0].value ? rs[0].value  :  '';
            clientDs .updateValue('brandVendorNo',value);
            var params = [];
            params['restrictions["cb.name"]'] = bookName;
            params['orders["lineNo"]'] = 'ASC';
            Ext.Ajax.request({
                        url : Core.base + 'codelist_list.action',
                        method : 'POST',
                        success : function(response) {
                            var jsonData = Ext.util.JSON.decode(response.responseText);
                            var rds = [];
                            for (i = 0; i < jsonData.records.length; i++) {
                                var newValues = {};
                                newValues.id = 'NEW' + i;
                                newValues.version = 'NEW';
                                newValues.sections = jsonData.records[i].name;
                                newValues.evaluation = jsonData.records[i].ref1;
                                newValues.criteria = jsonData.records[i].ref2;
                                newValues.resultId = '';
                                newValues.comments = '';
                                rds.push(new evalGrid.RecordDef(newValues));
                            };
                            var clintDs = Core.getClientDS();
                            for(var j=0; j < evalStore.getCount(); j++){
                                var r = evalStore.getAt(j);
                                if(r.data.id.indexOf('NEW') != 0)
                                clintDs.updateValue($qa.EVALUATION_GRID_ID+'__'+r.data.id+'--'+r.data.version+'__DELETED','delete');
                            };
                            evalStore.removeAll();
                            evalStore.add(rds);
                            Core.GridUtil.addToModifiedGrids($qa.EVALUATION_GRID_ID);
                        },
                        failure : function(response) {
                            Core.Document.handleError(response);
                        },
                        scope : this,
                        params : params
                });
         }
     );
}

Core.addCmpListener('sets', CORE.EVENT_GRID_BEFORE_EDIT, function(baseParam, e) {
    if(!!e.record.data['styleId']) {
        e.record.data['readonly'] = true;
        return false;
    }
});

Core.customize.lookupIncoTerm = function(incoTerm, portOfLoading) {
    var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    clientDs.updateValue('incoTermCharge','');
    clientDs.updateValue('Dutiable charge','');
    Core.Document.lookup({
            'bookName' : 'Incoterm Charge',
            'criteria' : {
                'Port of loading': portOfLoading.getValueById('code',portOfLoading.getValue(),'id'),
                'Destination country': 'AU',
                'Incoterm': incoTerm.getValueById('code',incoTerm.getValue(),'id')
            }
        },function(response){
            var jsonData = Ext.util.JSON.decode(response.responseText);
            var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
            if (jsonData.length && jsonData.length > 0 && jsonData[0] != null){
                clientDs.updateValue('incoTermCharge',jsonData[0]['Incoterm charge'] || '');
                clientDs.updateValue('Dutiable charge',jsonData[0]['Dutiable charge'] || '');
            }
     });
};

Core.customize.lookupAgentCommissionPer = function(sourceAgent) {
  Core.Document.lookup({
            'bookName' : 'Agent Commission',
            'criteria' : {
                'Buying Agent': sourceAgent
            }
        },function(response){
            var jsonData = Ext.util.JSON.decode(response.responseText);
            var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
            if (jsonData.length && jsonData.length > 0 && jsonData[0] != null){
                var value = '';
                if(!Ext.isEmpty(jsonData[0]['Commission(%)'])){
                    value = new Number(jsonData[0]['Commission(%)']).toFixed(4);
                }
                clientDs.updateValue('agentCommissionPer', value);
            }
     });
};

Core.ComponentMgr.onAvailable('incoTermId$0','cComboBox', function(combo){
    combo.on('select', function(){
        var portOfLoading = Core.getCmp('portOfLoadingId$0', 'cComboBox');
        Core.customize.lookupIncoTerm(this, portOfLoading);
    },combo);
});
Core.ComponentMgr.onAvailable('portOfLoadingId$0','cComboBox', function(combo){
    combo.on('select', function(){
        var incoTerm = Core.getCmp('incoTermId$0', 'cComboBox');
        Core.customize.lookupIncoTerm(incoTerm, this);
    },combo);
});

Core.ComponentMgr.onAvailable('sourcingAgentId$0','cComboBox', function(combo){
    combo.on('change', function(){
      Core.customize.lookupAgentCommissionPer(this.getValueById('code',this.getValue(),'id'));
    },combo);
});
/*
Core.ComponentMgr.onAvailable('disMethodId$0','cComboBox', function(combo){
    combo.on('change', function(){
      Core.Document.lookup({
            'bookName' : 'Distribution Cost',
            'criteria' : {
                'Distribution method': this.getValueById('code',this.getValue(),'id')
            }
        },function(response){
            var jsonData = Ext.util.JSON.decode(response.responseText);
            var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
            if (jsonData.length && jsonData.length > 0 && jsonData[0] != null){
                clientDs.updateValue('disCost',jsonData[0]['Cost (AUD?)'] || '');
            }
     });
    },combo);
});
*/
Core.customize.vasLookup = function(country) {
    var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    var combo = Core.getCmp('vasCodeId$0', CORE.CMP_TYPE_COMBOBOX);
    var vasCode = 'NO';
    var description = 'No';
    if (combo) {
        vasCode = combo.getValueById('code', combo.getValue() ,'id') || clientDs.getValue('vasCodeCode');
        description = combo.getDisplayValue();
    }
    Core.Document.lookup({
        'bookName' : 'VAS Cost',
        'criteria' : {
                        'VAS Code': vasCode,
                        'Country' : country
                    }
        }, function(response){
            var jsonData = Ext.util.JSON.decode(response.responseText);
            var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
            if (jsonData.length && jsonData.length > 0 && jsonData[0] != null){
                var currency = jsonData[0]['Currency'] || '';
                var uom = jsonData[0]['UOM'] || '';
                var elc = jsonData[0]['ELC'] || '';
                var dutiable = (jsonData[0]['Dutiable'] || '').toLowerCase() == 'y' ? 'Dutiable' : 'Non-Dutiable';
                if(country == 'AU') {
                    clientDs.updateValue('vasDescription', description + ', in ' + currency + ', per ' + uom + ', ' + dutiable);
                }
                clientDs.updateValueWithoutSetModified('vasELCFlag' + country, elc);
            }
            if(jsonData.length && jsonData.length > 0 && jsonData[0] == null) {
                if(country == 'AU') {
                    clientDs.updateValue('vasDescription', '');
                }
                clientDs.updateValueWithoutSetModified('vasELCFlag' + country, '');
            }
    });
};

Core.customize.retrieveVasELCFlag = function() {
    //Since the vasCode in UI displaying the AU side data, hence the Array only contains AU for lookup
    var countryArr = new Array('AU');
    for(var i = 0; i < countryArr.length; i++) {
        var country = countryArr[i];
        Core.customize.vasLookup(country);
    }
};

Core.ComponentMgr.onAvailable('vasCodeId$0', CORE.CMP_TYPE_COMBOBOX, function(combo){
    combo.on('select', Core.customize.retrieveVasELCFlag, combo);
    combo.on('blur', Core.customize.retrieveVasELCFlag, combo);
});

Core.customize.onRefreshelcClick = function(){};

Core.customize.CalculatedESC = function(){
    var estPrice = document.getElementById('estPrice$0').value.trim();
    var estElc = document.getElementById('estElc$0').value.trim();
    var estMargin = document.getElementById('estMargin$0');
    if(isEmptyString(estPrice) || isEmptyString(estElc) || estPrice == 0 || estElc == 0){
        estMargin.value = '';
        Core.getClientDS().updateValue('estMargin', '');
        return;
    }
    var estPriceVal = estPrice - 0;
    var estElcVal = estElc - 0;
    var warningMsg = '';
    if(isNaN(estPriceVal)){
        warningMsg += Core.Msg.getText('STYLE_022');
    }
    if(isNaN(estElcVal)){
        warningMsg += Core.Msg.getText('STYLE_023');
    }
    if(!isEmptyString(warningMsg)){
        Core.Msg.warning(warningMsg);
        return;
    }
    if(estPriceVal > 0 && estElcVal > 0){
        estMargin.value = Math.round((1 - estElcVal / (estPriceVal/1.1)) * 10000)/10000;
        Core.getClientDS().updateValue('estMargin', estMargin.value);
    }
};

Core.customize.calculateCartonCbm = function(){
    var oheight = document.getElementById('oheight$0').value.trim() - 0;
    var owidth = document.getElementById('owidth$0').value.trim() - 0;
    var olength = document.getElementById('olength$0').value.trim() - 0;
    var cartonCbm = document.getElementById('cartonCbm$0');
    var unitsPerOuter = document.getElementById('unitsPerOuter$0').value - 0;
    var unitsPerCbm = document.getElementById('unitsPerCbm$0');
    var warningMsg = '';
    if(isNaN(oheight)){
        warningMsg += Core.Msg.getText('STYLE_024');
    }
    if(isNaN(owidth)){
        warningMsg += Core.Msg.getText('STYLE_025');
    }
    if(isNaN(olength)){
        warningMsg += Core.Msg.getText('STYLE_026');
    }
    if(!isEmptyString(warningMsg)){
        Core.Msg.warning(warningMsg);
        return;
    }

    if(oheight > 0 && owidth > 0 && olength > 0){
         cartonCbm.value = Math.round(oheight * owidth * olength * 10000)/10000/1000000;
         Core.getClientDS().updateValue('cartonCbm',cartonCbm.value);
    }
    if(isNaN(unitsPerOuter)){
        Core.Msg.warning('STYLE_012');
    }else{
        if(cartonCbm.value == 0){
           unitsPerCbm.value = 0;
        }else{
            unitsPerCbm.value = Math.round(unitsPerOuter / cartonCbm.value * 1)/1;
            Core.getClientDS().updateValue('unitsPerCbm',unitsPerCbm.value);
        }
    }
};


Core.customize.isEditableTab = function(tabId) {
    var result = true;
    if (Core.curUserIsVendor && (Core.getClientDS().getValue('setStatus') == 'production' || Core.getClientDS().getValue('status') == 'production')) {
        result = false;
    }
    return result;
};

Core.customize.beforeShowAllowedButtons = function(p1,p2) {
    var allowedBtns = p2;
    var ds = Core.getClientDS();
    if (Ext.isEmpty(ds)) {
        return;
    }
    var showSave = true;
    if (Core.curUserIsVendor && ds.getValue('setStatus') == 'production') {
        showSave = false;
    }
    if (!showSave) {
        for (var i = 0, len = allowedBtns.length; i < len; i++) {
            if (allowedBtns[i].id == 'save') {
                allowedBtns.splice(i,1);
                break;
            }
        }
    }

    var showRegister = true;
    var productRegStatusName = ds.getValue('productRegStatusName');
    if (Core.customize.styleType == "set"
          || productRegStatusName == 'LOCKED' || productRegStatusName == 'REGISTERED' || productRegStatusName == 'EXISTING') {
        showRegister = false;
    }
    if (!showRegister) {
        for (var i = 0, len = allowedBtns.length; i < len; i++) {
            if (allowedBtns[i].id == 'register') {
                allowedBtns.splice(i,1);
                break;
            }
        }
    }

    var showCommitmentToBuy = true;
    var commitmentToBuyId = ds.getValue('commitmentToBuyId');
    var commitmentToBuyObject = Core.Document.getDDEnabledRecord('commitmentToBuyId', 'id', commitmentToBuyId);
    if (!isEmpty(commitmentToBuyObject) && !isEmpty(commitmentToBuyObject.name)) {
        var commitmentToBuyName = commitmentToBuyObject.name;
        if (commitmentToBuyName =='Not Applicable' || (commitmentToBuyName == 'Draft' && Core.customize.isReadonlyEstOrderQtyAndBreakdown())) {
            showCommitmentToBuy = false;
        }
    }else{
        showCommitmentToBuy = false;
    }
    if (!showCommitmentToBuy) {
        for (var i = 0, len = allowedBtns.length; i < len; i++) {
            if (allowedBtns[i].id == 'commitmentToBuy') {
                allowedBtns.splice(i,1);
                break;
            }
        }
    }
}

Core.addListener(CORE.EVENT_BEFORE_SHOW_ALLOWED_BUTTONS,Core.customize.beforeShowAllowedButtons);
/*
if(Core.curUserIsQA){
    Core.addListener(CORE.EVENT_AFTER_SET_TABS_CONTENT,function(){
        Core.Document.toggleFieldsEditableByName(true,'colorSizeChoice');
        var sizebutton = document.getElementById('sizesGridButtons');
        if(sizebutton){
            document.getElementById('sizesGridButtons').style.display = "none";
            document.getElementById('colorsGridButtons').style.display = "none";
            document.getElementById('keycodesGridButtons').style.display = "none";
            document.getElementById('keycodescolorSizeChoiceButtons').style.display = "block";
        }
    });
}
*/

Core.customize.brandLcnNameFilter = function(extCombo) {
    var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    var brandLblTypeId = clientDs.getValue('brandLblTypeId');
    var brandLblTypeName = Core.Document.dropdownStoreFieldValue('name','brandLblTypeId',brandLblTypeId);
    var store = this.comboExt.getStore();
    this.brandLblTypeName = brandLblTypeName;
    if(Ext.isEmpty(this.getValue()) && !Ext.isEmpty(clientDs.getValue("brandLcnNameId"))) {
        clientDs.updateValue("brandLcnNameId", "");
    }
    store.snapshot = null;
    store.backup_data = store.backup_data || store.data.clone();
    store.snapshot = store.backup_data.filterBy(function(r){
        return r.data['ref1'] == this.brandLblTypeName;
    }, this);
    return true;
};

Core.addListener(CORE.EVENT_AFTER_SET_TAB_CONTENT, function(params1, params2){
    if(params2.tab  === 'tab_header'){
        Core.customize.changeFieldColor();
     }
});

Core.addListener(CORE.EVENT_TAB_CHANGED, function(){
    if(Core.Document.getCurrentTabId() === 'tab_keycode'){
        var grid = Core.getCmp('productAttribute', CORE.CMP_TYPE_GRID);
        if(grid){
            grid.syncSize();
        }
        grid = Core.getCmp('assortmentPlan', CORE.CMP_TYPE_GRID);
        if(grid){
            grid.syncSize();
        }
    }
});


Core.customize.changeFieldColor = function(){
    var combo = Core.getCmp('correctiveAction$0', CORE.CMP_TYPE_COMBOBOX);
    var value = combo.getDisplayValue();
    var editValue = Ext.get('edit_correctiveAction$0');
    var displayValue = Ext.get('display_correctiveAction$0');
    if(value == 'Yes'){
        editValue.setStyle("background","#FFFF00");
        editValue.setSize({width:25, height:'auto'});
        displayValue.setStyle("background","#FFFF00");
        displayValue.setSize({width:25, height:'auto'});
    }else{
        editValue.setStyle("background","#FFFFFF");
        displayValue.setStyle("background","#FFFFFF");
    }
};

Core.Document.regCustomizeAction("printTechPack", function(){
    var briefOnly = document.getElementById('optionChoice$a');
    var latestVersion = document.getElementById('optionChoice$b');
    var selectSample = document.getElementById('optionChoice$c');
    var allSample = document.getElementById('optionChoice$d');
    var selectOption = '';

    if(briefOnly.checked){
        selectOption = briefOnly.value;
    }else if (latestVersion.checked){
        selectOption = latestVersion.value;
    }else if (selectSample.checked){
        selectOption = selectSample.value;
    }else if (allSample.checked){
        selectOption = allSample.value;
    }

    var clientDs = Core.getClientDS();
    var catType = clientDs.getValue('catType');
    var status = clientDs.getValue('status');
    var whereSelectSample = '';
    var parameters = {};
    if(isEmptyString(selectOption)){
        selectOption = 'briefOnly';
    }
    if(selectOption == 'selectSample'){
        var sampleDropDown = Core.getCmp('sampleType$0',CORE.CMP_TYPE_COMBOBOX).getDisplayValue();
        if(isEmptyString(sampleDropDown)){
            Core.Msg.warning('please select sample type!');
            return false;
        }
        if(catType == 'GM'){
            whereSelectSample = " and mqe.sd = '" + sampleDropDown + "'";
        }else{
            whereSelectSample = " and mqfa.sd = '" + sampleDropDown + "'";
        }
    }else{
        whereSelectSample = "and 2 = 2";
    }
    if (catType == 'APPAREL'){
        parameters = {
                EXT_selectOption: selectOption,
                EXT_whereSelectSample: whereSelectSample,
                reportName :  'KMAPPPF004_2',
                isMultipleMerge:'1',
                IN_ORG_CODE : 'target',
                pageNumLocation:'LOWER-LEFT',
                pageNumStyle_size:'8'
        };
    }else if(catType == 'GM'){
        parameters = {
                EXT_selectOption: selectOption,
                EXT_whereSelectSample: whereSelectSample,
                reportName :  'KMGMPF004',
                IN_ORG_CODE : 'target',
                pageNumLocation:'LOWER-LEFT',
                pageNumStyle_size:'8'
        };
    }else if(catType == 'FW'){
        parameters = {
                EXT_selectOption: selectOption,
                EXT_whereSelectSample: whereSelectSample,
                reportName :  'KMFWPF004',
                IN_ORG_CODE : 'target',
                pageNumLocation:'LOWER-LEFT',
                pageNumStyle_size:'8'
        };
    }
    if(status == 'inset'){
           parameters.whereClause = " and id = '" + clientDs.getValue('setId') + "'";
           parameters.EXT_MS_ID = clientDs.getValue('setId');
           parameters["[ITEM/STYLE_NO]"] = clientDs.getValue('setNo');
       }else{
           parameters.whereClause = " and id = '" + Core.Document.DOC_ID + "'" ;
           parameters.EXT_MS_ID = Core.Document.DOC_ID;
           parameters["[ITEM/STYLE_NO]"] = clientDs.getValue('styleNo');
       }
    Core.Document.CbxReport.genReport(CORE.REPORT_TYPE_JASPER_PDF,parameters,true);
    Core.customize.closeTechPack();
}, true);

//for bug 6596
Core.Document.regCustomizeAction("printBuyBrief",function(){
       Core.customize.catTypeTech = Core.getClientDS().getValue('catType');
       Core.customize.showTechPackOption();
},true);

Core.customize.showTechPackOption = function(){
    Core.WindowUtil.popupCustomizedWindow({
        id:  'printTechPack_win',
        url: 'jsp/coles/style/popup_printTechPack.jsp',
        width: CORE.LARGE_WIN.WIDTH,
        height: CORE.STANDARD_WIN.HEIGHT,
        title: 'Print Tech Pack',
        closable: false,
        autoScroll: false
    });
};

Core.Document.regCustomizeAction("closeTechPack", function(){
    Core.customize.closeTechPack();
}, true);

Core.customize.closeTechPack = function(){
    var win = Core.WindowUtil.getWinFromCache('printTechPack_win');
    if(win){
        document.getElementById('optionChoice$a').checked = true;
        var sampleDropDown = Core.getCmp('sampleType$0',CORE.CMP_TYPE_COMBOBOX);
        sampleDropDown.setValue('');
        var sampleType = Core.getClientDS().getObj('sampleType');
        if (sampleType) {
            sampleType.modified = false;
        }
        win.hide();
    }
};

Core.customize.setDutyRate = function(){
    var combo = Core.getCmp('countryOfOriginId$0', CORE.CMP_TYPE_COMBOBOX);
    var clientDs = Core.getClientDS();
    var countryOfOriginId = clientDs.getValue('countryOfOriginId');
    if (combo) {
        countryOfOriginId = combo.getValue();
    }
    if (Ext.isEmpty(countryOfOriginId)) {
        return;
    }
    var combo2 = Core.getCmp('deptId$0', CORE.CMP_TYPE_COMBOBOX);
    var deptId = clientDs.getValue('deptId');
    if (combo2) {
        deptId = combo2.getValue();
    }
    if (Ext.isEmpty(deptId)) {
        return;
    }
    var countryOfOriginRecord = Core.Document.getDDRecord('countryOfOriginId', 'id', countryOfOriginId);
    var deptRecord = Core.Document.getDDRecord('deptId', 'id', deptId);
    var countryOfOriginCode = countryOfOriginRecord['code'];
    var productCat = deptRecord['productCat'];
    if(productCat == 'APPAREL'){
        productCat = 'APP';
    }
    var params = [];
    var defValue = null;
    params['restrictions["ml.c1"]'] = countryOfOriginCode;
    params['restrictions["ml.c2"]'] = productCat;
    Ext.Ajax.request({
       url    : Core.base + 'get_duteRate_system_default_value_json.action',
       method : 'POST',
       success : function(response) {
                     var defaultValue = Ext.util.JSON.decode(response.responseText);
                     if(defaultValue.records && defaultValue.records.length > 0){
                         for(var k=0; k<defaultValue.records.length;k++){
                             defValue = defaultValue.records[k].value1;
                         }
                            if (defValue != null) {
                                var defAudR = Core.Document.getDDEnabledRecord('dutyRateEId', 'code', defValue);
                                if (!Ext.isEmpty(defAudR)) {
                                    clientDs.updateDropDownValue('dutyRateEId','id', defAudR['id'], defValue);
                                    clientDs.updateValue('dutyRateECode', defAudR['code']);
                                } else {
                                    clientDs.updateDropDownValue('dutyRateEId','id', '','');
                                    clientDs.updateValue('dutyRateECode','');
                                }
                                var defNzR = Core.Document.getDDEnabledRecord('dutyRateAId', 'code', defValue);
                                if (!Ext.isEmpty(defNzR)) {
                                    clientDs.updateDropDownValue('dutyRateAId','id', defNzR['id'], defValue);
                                    clientDs.updateValue('dutyRateACode', defNzR['code']);
                                } else {
                                    clientDs.updateDropDownValue('dutyRateAId','id','','');
                                    clientDs.updateValue('dutyRateACode','');
                                }
                            }
                      }else{
                         clientDs.updateDropDownValue('dutyRateEId','id', '','');
                         clientDs.updateValue('dutyRateECode','');
                         clientDs.updateDropDownValue('dutyRateAId','id','','');
                         clientDs.updateValue('dutyRateACode','');
                    }
                 },
       failure : function() {
                 },
       scope    : this,
       params   : params
   });
};
Core.addListener(CORE.EVENT_AFTER_NEW, Core.customize.setDutyRate);

Core.ComponentMgr.onAvailable('countryOfOriginId$0', CORE.CMP_TYPE_COMBOBOX, function(combo) {
    combo.on("select", function(combo, newValue, index){
        Core.customize.setDutyRate();
    });
});

Core.customize.customWordFilter = function(extCombo) {
    var combo = Core.getCmp('prodType$0', CORE.CMP_TYPE_COMBOBOX);
    var prodType = combo.getPropertyValue('code');;
    var store = this.comboExt.getStore();
    this.prodType = prodType;
    store.snapshot = null;
    store.backup_data = store.backup_data || store.data.clone();
    store.snapshot = store.backup_data.filterBy(function(r){
        return r.data['ref1'] == this.prodType;
    }, this);
    return true;
};

//custom save, for buyer accept vendor quote reason
Core.customize.styleSaveCallback = function(response) {
    //E.S: response.responseText is login page if session timeout
    var reg = /<\/HTML>/i;
    if(reg.test(response.responseText)){
        return Core.Document.userSessionTimeout();
    }

    try {
        var jsonData = Ext.util.JSON.decode(response.responseText);
        if(jsonData.errorCode) {
             Ext.MessageBox.hide();
             Core.Document.showErrorMessage(jsonData.errorCode,
                     'TITLE_WARNING', 'errors found:');
             return;
        }
        Core.Ajax.request({
            url : "style_refreshELC.action",
            success: Core.Document.successSaveDocument,
            failure: function(e) {
                Ext.MessageBox.hide();
                Core.Msg.error('STYLE_006', url, params);
            },
            params : {
                docId : jsonData.id
            }
        });
    } catch(e) {
         Core.Document.handleSaveDocJsException(e);
    }
};

Core.Document.addNotAskSavingAction("print1");

// for printForm006
Core.Document.regCustomizeAction("printPkgDev", function(){
    Core.Document.CbxReport.genReport('KMPF006ToExcel', {
        docIds: Core.Document.DOC_ID,
        reportName:'KMPF006',
        "[ITEM/STYLE_NO]":Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE).getValue('styleNo')
    }, true); }, false);

Core.customize.ChangeHistory_SpecificSection = {
        'styleFabric'      : 'materialNo',
        'styleSpec'        : 'tplTypeCode',
        'meas'             : 'code',
        'measCal'          : 'code',
        'addAccMeas'       : 'code',
        'colors'           : 'primaryColor',
        'sizes'            : 'sizeCode',
        'keycodes'         : 'colorCode - sizeCode',
        'sets'             : 'styleNo',
        'quotes'           : 'quoteNo',
        'colorSpecificCosts' : 'contractColorName'
};

Core.customize.ChangeHistory_ExcludeFields = {
        'main'      : ['SP_I_quoteItemRecommendeds','SP_I_quoteItemBuyerAccept']
};

Core.Document.regCustomizeAction("printBpf", function(){
    Core.Document.CbxReport.genReport(CORE.REPORT_TYPE_JASPER_PDF,{reportName: 'KMPF002_3',
        isMultipleMerge:'1',
        pageNumLocation:'LOWER-LEFT',
        pageNumStyle_size:'8',
        isPrintFootInfo:true,
        whereClause: ' and ms.id = \'' + Core.Document.DOC_ID + '\'',
        "[ITEM/STYLE_NO]":Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE).getValue('styleNo')}, true );
}, false);

// check if 'Initialise By' date field has changed or not
Core.customize.confirmInitialiseBy = function() {
    var cpmDate = document.getElementById('cpmDate');
    var cpmRefDateType = Core.getCmp('cpmRefDateType', CORE.CMP_TYPE_COMBOBOX);
    if (Core.customize.cpmStyle != 'undefined' && cpmDate && cpmRefDateType) {
        if (Core.customize.cpmStyle.refDate != cpmDate.value
            || Core.customize.cpmStyle.refDateType != cpmRefDateType.getValue()) {
            Core.Msg.confirm('CBXCPM_005',
                function() { // [yes]
                    Core.customize.saveStyle();
                },
                function() { // [No]
                    return;
                }
            );
        } else {
            Core.customize.saveStyle();
        }
    } else {
        Core.customize.saveStyle();
    }

};

Core.customize.getBuyerAcceptVqCostBdSpecified = function(vqId){
      var vqCostBdSpecified = 'No';
      var quoteGrid = Core.getCmp('quotes', CORE.CMP_TYPE_GRID);
      if(quoteGrid){
          var store = quoteGrid.getExtStore();
          var records = store.data.items;
          for(var i = 0; i < records.length; i++){
             if(records[i].data['id'] == vqId){
                 vqCostBdSpecified = records[i].data['costBdSpecified'];
                 break;
             }
          }
      }
      return vqCostBdSpecified;
};
// confirm buyer accept
Core.customize.confirmBuyerAccept = function() {
    var ds = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    var baStr = ds.getValue("SP_I_quoteItemBuyerAccept");
    var buyerAccept = baStr.indexOf("_1") > 0;
    if(buyerAccept) {
        var buyerAcceptVqId = baStr.substring(baStr.indexOf("_1") - 65, baStr.indexOf("_1") -33);
        var vqCostBdSpecified = Core.customize.getBuyerAcceptVqCostBdSpecified(buyerAcceptVqId);
        var warningMsg = vqCostBdSpecified == 'No' ? 'BUYER_ACCEPT_01' : 'BUYER_ACCEPT_03';
        Core.Msg.confirm(warningMsg,
                function() { // [yes]
                    Core.GridUtil.addToModifiedGrids('attachments');
                    Core.customize.confirmInitialiseBy();
                },
                function() { // [No]
                    return;
                }
            );
    } else {
        Core.customize.confirmInitialiseBy();
    }
};

Core.customize.confirmCTBstatus = function(){
    var clientDs = Core.getClientDS();
    var commitmentToBuyCode = clientDs.getValue('commitmentToBuyCode');
    var isCommitmentToBuyApproved = clientDs.getValue('isCommitmentToBuyApproved');
    if(commitmentToBuyCode == 'Approved' && isCommitmentToBuyApproved == '0'){
        var vendorStatus = clientDs.getValue('vendorStatus');
        if (vendorStatus == 'inactive') {
            Core.Msg.warning('Supplier Status = Inactive. Commitment to Buy Print Form can not be printed until the Supplier Status = Active');
            return false;
        }else{
            var factoryId = clientDs.getValue('factoryId');
            var vendorId = clientDs.getValue('vendorId');
            if (Ext.isEmpty(factoryId) || Ext.isEmpty(vendorId)){
                var message = '';
                if (Ext.isEmpty(vendorId) && Ext.isEmpty(factoryId)) {
                    message = 'There is no Supplier and Factory assigned to this Brief. Do you wish to continue?';
                } else if (Ext.isEmpty(vendorId)) {
                    message = 'There is no Supplier assigned to this Brief. Do you wish to continue?';
                } else if (Ext.isEmpty(factoryId)) {
                    message = 'There is no Factory assigned to this Brief. Do you wish to continue?';
                }
                Core.Msg.confirm(message, function() {
                    Core.customize.confirmBuyerAccept();
                },function() {
                });
            }else{
                Core.customize.confirmBuyerAccept();
            }
        }
    }else{
        Core.customize.confirmBuyerAccept();
    };
};

Core.addActionListener('save',function(){
    Core.customize.register = false;
    Core.customize.confirmCTBstatus();
});

Core.customize.saveStyle = function() {
    var businessGroup = '';
    var clientDs = Core.getClientDS();
    var deptCombo = Core.getCmp('deptId$0', CORE.CMP_TYPE_COMBOBOX);
    if (deptCombo) {
        var currtItem = deptCombo.getValue();
        if(!!currtItem){
            var selectedRecord = deptCombo.getSelectedRecord(currtItem, 'id');
            if(isEmptyString(selectedRecord)){
                return;
            }else{
                businessGroup = selectedRecord.data['ref2Code'] || '';
            }
        }
    }
    var vendorId = clientDs.getValue('vendorId');
    var deptId = clientDs.getObj('deptId');
    if(!isEmptyString(vendorId) && deptId.modified){
           var params = [];
           params['restrictions["refNo"]'] = businessGroup;
           params['restrictions["parentId"]'] = vendorId;
           Ext.Ajax.request({
              url    : Core.base + 'checkVendorWithBriefInTheSameDept.action',
              method : 'POST',
              success : function(response) {
                            var difBusinessGroup = Ext.util.JSON.decode(response.responseText);
                            if(difBusinessGroup.records && difBusinessGroup.records.length > 0){
                                if(difBusinessGroup.records[0].sum == 0){
                                    Core.Msg.confirm('MSG_BRIEF_CHECK_BUSINESS_GROUP',
                                        function() { // [yes]
                                            Ext.MessageBox.progress("Save Document", "Saving Document", "Initializing...");
                                            Core.Document.saveDocumentStep1.defer(100, this, [Core.Document.FORM_NAME + "_save.action", null, Core.customize.styleSaveCallback]);
                                        }
                                    );
                                }else{
                                    Ext.MessageBox.progress("Save Document", "Saving Document", "Initializing...");
                                    Core.Document.saveDocumentStep1.defer(100, this, [Core.Document.FORM_NAME + "_save.action", null, Core.customize.styleSaveCallback]);
                                }
                             }
                        },
              failure : function() {
                            Core.Msg.error("STYLE_007");
                        },
              scope    : this,
              params   : params
          });
    } else {
        Ext.MessageBox.progress("Save Document", "Saving Document", "Initializing...");
        Core.Document.saveDocumentStep1.defer(100, this, [Core.Document.FORM_NAME + "_save.action", null, Core.customize.styleSaveCallback]);
    }
};

Core.ComponentMgr.onAvailable('brandLblTypeId$0', CORE.CMP_TYPE_COMBOBOX, function(combo) {
    combo.on("change", function(combo, newValue, index){
        var brandName = Core.getCmp('brandLcnNameId$0', CORE.CMP_TYPE_COMBOBOX);
        brandName.setValue('');
    });
});

Core.ComponentMgr.onAvailable('prodType$0', CORE.CMP_TYPE_COMBOBOX, function(combo) {
    combo.on("select", function(combo, newValue, index){
        if (Core.customize.prodTypeSelected!=index) {
            var ostWord = Core.getCmp('OstWord$0', CORE.CMP_TYPE_COMBOBOX);
            var sndWord = Core.getCmp('SndWord$0', CORE.CMP_TYPE_COMBOBOX);
            var trdWord = Core.getCmp('TrdWord$0', CORE.CMP_TYPE_COMBOBOX);
            var fthWord = Core.getCmp('FthWord$0', CORE.CMP_TYPE_COMBOBOX);
            var vthWord = Core.getCmp('VthWord$0', CORE.CMP_TYPE_COMBOBOX);
            ostWord.setValue('');
            sndWord.setValue('');
            trdWord.setValue('');
            fthWord.setValue('');
            vthWord.setValue('');
            Core.customize.prodTypeSelected = index;
        }
    });
});

(function() {
  var eqOrLessThanZeroFields = ['estLandE','totalUnitCostE','freightRateCostE','estLandA','totalUnitCostA','freightRateCostA'];
  Core.Document.registerFieldsCustomizedFormat(eqOrLessThanZeroFields, function(value, param, fieldId) {
       if (!isEmptyString(value)){
           var elmObj = document.getElementById('display_'+fieldId);
           if((value - 0) > 0) {
               elmObj.className = 'cls_readonly';
           }else {
               elmObj.className = 'redText_readonly';
           }
           return Core.StringUtil.escapeHTML(value);
       }
   });
  var lessThanZeroFields = ['marginE', 'marginA'];
  Core.Document.registerFieldsCustomizedFormat(lessThanZeroFields, function(value, param, fieldId) {
       if (!isEmptyString(value)){
           var elmObj = document.getElementById('display_'+fieldId);
           if((value - 0) >= 0) {
               elmObj.className = 'cls_readonly';
           }else {
               elmObj.className = 'redText_readonly';
           }
           return Core.StringUtil.escapeHTML(value);
       }
   });
})();

Core.customize.custHyperLinkFormat = function(config) {
    return  function custHyperLinkFormat(value, p, r, rowIndex, i, ds) {
        var moduleId;
        if(!isEmptyString(r.data[config.moduleObject])){
            moduleId = r.data[config.moduleObject];
        }
        var markup = '';
        var ds = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
        var status = ds.getValue('status');
        if(!isEmptyString(moduleId)) {
            if(status != 'production' || (status == 'production' && Core.customize.styleType == 'set' && !Core.curUserIsVendor)){
                markup = '<input type="button" class="inline_button" value="Edit" onclick="Core.gotoModuleSearch(\''+ config.moduleName +'\',{docId : \''+ moduleId +'\'})"/>&nbsp;&nbsp;';
            }
            markup += '<a href="#" onclick="Core.Document.gotoModuleDetails(\'' + config.moduleName + '\', \'\', \'' + moduleId + '\');">' + value+ '</a>';
        }else {
            var cGrid = ds.cGrid;
            var cGridIsReadonly = cGrid && cGrid.isReadonly();
            Core.FieldFormat.addCellEditableIndicator(config, p, cGridIsReadonly);
            markup = value;
        }
        return markup;
    };
};

Core.customize.styleCustSetEditSetButton = function(){
    var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    var styleStatus = clientDs.getValue('status');
    var setStatus = clientDs.getValue('setStatus');
    if(styleStatus == 'inset' && setStatus == 'production' && Core.curUserIsVendor) {
        var elmObj = document.getElementById('switchModuleBtn_headerSetId');
        if(elmObj != null){
            elmObj.className = 'readonly_button';
            elmObj.disabled = true;
        }
    }
};

Core.addListener(CORE.EVENT_AFTER_SET_VALUES_FROM_CLIENT_DS, Core.customize.styleCustSetEditSetButton);

Core.customize.styleClearVendor = function(){
    var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    clientDs.updateValue('vendorName', '');
    clientDs.updateValue('vendorId', '');
    clientDs.updateValue('vendorCode', '');
    clientDs.updateValue('sapVendorNo', '');
    clientDs.updateValue('vendorAddr1', '');
    clientDs.updateValue('vendorAddr2', '');
    clientDs.updateValue('vendorAddr3', '');
    clientDs.updateValue('vendorCity', '');
    clientDs.updateValue('vendorPostalCode', '');
    clientDs.updateValue('vendorProvince', '');
    clientDs.updateValue('vendorCountry', '');
    clientDs.updateValue('vendorEmail', '');
    clientDs.updateValue('vendorTel', '');
    clientDs.updateValue('vendorContact', '');
    clientDs.updateValue('vendorPayTerm', '');
    clientDs.updateValue('vendorRankCode', '');
    clientDs.updateValue('vendorStatus', '');
    //Ext.getDom('display_brandVendorId$0').innerHTML = '';
    Ext.getDom('status_header_vendor_group').className = '';
    Core.customize.styleClearFactory();
}

Core.customize.toggleDisplayELCBtn = function() {
    var ds = Core.getClientDS();
    var elcBtnArea = document.getElementById('elcBtnArea');
    if(Core.Document.isEditableTab('tab_cost')) {
        if(elcBtnArea){
             if(ds.getValue('productRegStatusCode') == 'NEW' || ds.getValue('productRegStatusCode') == 'EXISTING'
                 || (ds.getValue('productRegStatusCode') == 'FAILED' && ds.getValue('hasColorRegistered') == 'false')){
                 elcBtnArea.style.display = 'inline';
             } else if (ds.getValue('productRegStatusCode') == 'LOCKED'){
                 elcBtnArea.style.display = 'none';
             } else if (ds.getValue('productRegStatusCode') == 'REGISTERED' || ds.getValue('productRegStatusCode') == 'CHANGED'
                 || (ds.getValue('productRegStatusCode') == 'FAILED' && ds.getValue('hasColorRegistered') == 'true' )){
                 elcBtnArea.style.display = 'inline';
             }
        }
    } else if(elcBtnArea) {
        elcBtnArea.style.display = 'none';
    }
};

YAHOO.util.Event.onContentReady('elcBtnArea', Core.customize.toggleDisplayELCBtn);
Core.addListener(CORE.EVENT_CUSTOMIZE_READONLY, Core.customize.toggleDisplayELCBtn);

Core.customize.toggleDisplaykeycodeGridBtn = function() {
    var keycodesGridBtns2 = document.getElementById('keycodesGridButtons2');
    if(keycodesGridBtns2) {
        if (Core.Document.isEditableTab('tab_colorsize')){
            keycodesGridBtns2.style.display = 'block';
        } else {
            keycodesGridBtns2.style.display = 'none';
        }
    }
};
YAHOO.util.Event.onContentReady('keycodesGridButtons2', Core.customize.toggleDisplaykeycodeGridBtn);
Core.addListener(CORE.EVENT_CUSTOMIZE_READONLY, Core.customize.toggleDisplaykeycodeGridBtn);

Core.customize.toggleDisplayRangePopupBtn = function() {
    var ds = Core.getClientDS();
    var rangePopBtnArea = document.getElementById('rangePopupBtn');

        if(rangePopBtnArea){
           if (ds.getValue('productRegStatusCode') == 'LOCKED'){
                 rangePopBtnArea.style.display = 'none';
             } else {
                 rangePopBtnArea.style.display = 'inline';
             }
        }
    };

YAHOO.util.Event.onContentReady('rangePopupBtn', Core.customize.toggleDisplayRangePopupBtn);
Core.addListener(CORE.EVENT_CUSTOMIZE_READONLY, Core.customize.toggleDisplayRangePopupBtn);

Core.customize.toggleDisplayTemplateName = function() {
    var qaType =  '';
    var deptRecord = '';
    var productCat = '';
    var ds = Core.getClientDS();
    var deptCode = ds.getValue('deptCode');
    if (!Ext.isEmpty(deptCode)) {
        deptRecord = Core.Document.getDDRecord('deptId', 'deptCode', deptCode);
        productCat = deptRecord['productCat'];
    }
    if (Core.Document.getCurrentTabId() == 'tab_colorsize'){
        //get qa type
        if(Core.customize.styleType === 'set'){
             qaType = (productCat === 'APPAREL' ||  productCat === 'FW') ? 'app' : productCat === 'GM' ? 'gm' : '';
        }else if(Core.customize.styleType === 'app'){
             qaType =  'app';
        }else if(Core.customize.styleType === 'gm'){
             qaType =  'gm';
        }

        var templateName = document.getElementById('edit_templateName$0');
        var sizePopupBtn = document.getElementById('addSizesPopupBtn');
        if(ds.getValue('productRegStatusCode') == 'NEW' || ds.getValue('productRegStatusCode') == 'EXISTING'
            || (ds.getValue('productRegStatusCode') == 'FAILED' && ds.getValue('hasColorRegistered') == 'false')){
            if(sizePopupBtn){
                sizePopupBtn.style.display = '';
            }
        } else if (ds.getValue('productRegStatusCode') == 'LOCKED'){
            if(sizePopupBtn){
                sizePopupBtn.style.display = 'none';
            }
        } else if (ds.getValue('productRegStatusCode') == 'REGISTERED' || ds.getValue('productRegStatusCode') == 'CHANGED'
            || (ds.getValue('productRegStatusCode') == 'FAILED'  && ds.getValue('hasColorRegistered') == 'true' )){
            if(sizePopupBtn){
                sizePopupBtn.style.display = 'none';
            }
        }
    }
}

YAHOO.util.Event.onContentReady('edit_templateName$0', Core.customize.toggleDisplayTemplateName);
Core.addListener(CORE.EVENT_TAB_CHANGED, Core.customize.toggleDisplayTemplateName);
Core.addListener(CORE.EVENT_AFTER_SET_TAB_CONTENT, Core.customize.toggleDisplayTemplateName);
Core.addListener(CORE.EVENT_AFTER_NEW, Core.customize.toggleDisplayTemplateName);

Core.customize.setSizeGirdBtnsReadonly = function(){
    var ds = Core.getClientDS();
    if (Core.Document.getCurrentTabId() == 'tab_colorsize') {
        var sizesGridBtn = document.getElementById('sizesGridButton');
        var prodRegStatus = ds.getValue('productRegStatusCode');
        if(prodRegStatus == 'NEW' || prodRegStatus == 'EXISTING'
            || (prodRegStatus == 'FAILED' && ds.getValue('hasColorRegistered') == 'false')){
                if(sizesGridBtn){
                    sizesGridBtn.style.display = 'block';
                }
        } else {
               if(sizesGridBtn){
                    sizesGridBtn.style.display = 'none';
                }
        }
    }
};

YAHOO.util.Event.onContentReady('sizesGridButtons', Core.customize.setSizeGirdBtnsReadonly);
Core.addListener(CORE.EVENT_TAB_CHANGED, Core.customize.setSizeGirdBtnsReadonly);
Core.addListener(CORE.EVENT_AFTER_NEW, Core.customize.setSizeGirdBtnsReadonly);

Core.Document.registerFieldsCustomizedFormat(["buyerUserCode","stylistUserCode","designerUserCode","plannerUserCode","merchant1UserCode","qaUserCode","qaUser2Code","assistantUserCode","prodMerchantUserCode"],
        function(value, p, options){
           var clientDs = Core.getClientDS();
           var dropDownStoreId = options.substring(0, options.indexOf("$"));
           var matchedR = Core.Document.getDDRecord(dropDownStoreId, 'userCode', value);
           if (!matchedR) {
               return clientDs.getValue(dropDownStoreId + "Dummy");
           }
           return value;
    });

function setFilePathtoField(filePath, index){
    var grid = Core.getCmp('attachmentsPath', CORE.CMP_TYPE_GRID);
    var record = grid.getExtStore().getAt(index);
    if(filePath){
        record.set('attach', filePath);
        Core.GridUtil.addToModifiedGrids(grid.id);
    }
}


Core.customize.attachUploadBtn = function(config){
    if(Core.curUserIsVendor){
        return;
    };
    return function(value, p, r, rowIndex, i, ds){
        var htmlArray = [];
        htmlArray.push('<applet name="drawApplet" width="50" height="15" code="com.erp.widget.drawing.FileApplet" codebase="');
        htmlArray.push(Core.base);
        htmlArray.push('applet/" archive="drawApplet-1.0.jar">');
        htmlArray.push('<param name="rowIndex" value="'+rowIndex+'">');
        htmlArray.push('<param name="setPathFn" value="setFilePathtoField">');
        htmlArray.push('</applet>');
        var htmlStr = htmlArray.join('');
        return htmlStr;
    };
};

Core.customize.copyNewRecords = function(grid){
    var store = grid.getExtStore();
    var selectRows = grid.grid.getSelectionModel().getSelections();
    if(selectRows.length == 0) {
        Core.Msg.warning('STYLE_036');
        return;
    }
    var copyRecords = [],
             i,
             j,
             sid,
             record,
             cRecord,
             cRecords,
             newRecord,
             currentPage,
             index = 0,
             sEmpty = '';
    currentPage = grid.grid.getSelectionModel().getCurrentPage();
    cRecords = store.cache_records[currentPage];
    for (i = 0; i < selectRows.length; i++) {
        copyRecords = [];
        record = selectRows[i];
        sid = 'NEW' + (++grid.newItemId);
        newRecord = record.copy(sid);
        newRecord.set('id', sid);
        newRecord.set('version', 'NEW');
        newRecord.set('lineNo',(++store.maxLineNo) );
        copyRecords.push(newRecord);
        for(j = 0; j < cRecords.length; j++){
            index = 0;
            cRecord = cRecords[j];
            if(cRecord.id == record.id){
                index = j + 1;
                break;
            }
        }
        if(index != 0){
            store.insert(index, copyRecords.reverse());
        }
    }
    if(grid.dsName!='meas'){
        grid.grid.reconfigure(store, grid.getColumnModel());
    }
    Core.GridUtil.addToModifiedGrids(grid.grid.id);
    grid.syncSize();
};

/*
Core.ComponentMgr.onAvailable('fclLcl$0',CORE.CMP_TYPE_COMBOBOX, function(combo){
    combo.on('select', function(){
        var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE,CORE.CMP_TYPE_DATA_SOURCE);
        if(combo.getDisplayValue() == 'FCL'){
            clientDs.updateDropDownValue('factoryPacked','id', '1', 'Yes');
        } else if (combo.getDisplayValue() == 'LCL'){
            clientDs.updateDropDownValue('factoryPacked','id', '0', 'No');
        }
      },combo);
});
*/
Core.Document.regCustomizeAction("printComParison", function(){
    var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE,CORE.CMP_TYPE_DATA_SOURCE);
    Core.Document.CbxReport.genReport('CbxCrystalReport2', {
        CBXPRTPARAM_STYLE_ID: Core.Document.DOC_ID,
        reportName:'reportSetup/' + clientDs.getValue('comParisonRptId')
    }, false); }, true);

Core.customize.setTechPackComplete = function(){
    var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE,CORE.CMP_TYPE_DATA_SOURCE);
    if(isEmptyString(clientDs.getValue('techPackComplete'))){
        clientDs.updateValueWithoutSetModified('techPackComplete','No');
    }
}
Core.addListener(CORE.EVENT_AFTER_SET_TAB_CONTENT, function(params1, params2){
    if(params2.tab  === 'tab_header_v'){
        Core.customize.setTechPackComplete();
    }
    if(Core.customize.isNewStyle()) {
        Core.customize.vasLookup('AU');
    }
});

Core.Document.regCustomizeAction("importBrief", function(){
    Core.WindowUtil.popupAddingExistedItemsWindow({id: 'styleImportPopuped'});
}, true);

Core.customize.afterImportBrief = function(response){
    Core.WindowUtil.clearSearchFields('styleImportPopuped');
    Core.customize.current_style_color_id = '';
    Core.customize.current_style_prod_reg_status = '';
    var win = Core.getCmp('styleImportPopuped', CORE.CMP_TYPE_WINDOW);
    if(win){
        win.hide();
    }

    var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    if (clientDs == null) {
        return;
    }
    var docForm = {docId : clientDs.getValue('id')};
    var gridIdArr = ["meas", "attachments", "styleFabric","styleSpec","colors",
                     "sizes","keycodes","addAccMeas","styleMeasCal","attachmentsPath","images","docHistory"];
    for(var i=0,len=gridIdArr.length; i<len; i++){
        Core.GridUtil.addToModifiedGrids(gridIdArr[i]);
    }

    if(!!Core.customize.needRefreshElC){
        Core.Ajax.request({
            url : "style_refreshELC.action",
            success: function() {
                Core.Document.getDocumentData({docId : clientDs.getValue('id')}, function(response) {
                    Core.Document.assignDocumentDataAndRefreshGrids(response);
                    Ext.MessageBox.updateProgress(1, "Done.");
                    setTimeout('Ext.MessageBox.hide()', 300);
                });
                Core.Document.udpateDataLocking();
            },
            failure: function(e) {
                Ext.MessageBox.hide();
                Core.Msg.error('STYLE_006', url, params);
            },
            params : docForm
        });
    }else{
        Core.Document.getDocumentData({docId : clientDs.getValue('id')}, function(response) {
            Core.Document.assignDocumentDataAndRefreshGrids(response);
            Ext.MessageBox.updateProgress(1, "Done.");
            setTimeout('Ext.MessageBox.hide()', 300);
        });
        Core.Document.udpateDataLocking();
    }
};
Core.customize.imageDescPopup = function(rowIndex, columnId, gridId){
    Core.customize.colorRowIndex = rowIndex;
    Core.WindowUtil.popupCustomizedWindow({
        id : 'imageDescWin',
        url : 'jsp/coles/popup/popup_style_image_desc.jsp',
        title : 'Select Item Description',
        width : 645,
        height: CORE.LARGE_WIN.HEIGHT,
        buttons : [{
            text    : 'OK',
            scope   : this,
            handler : Core.customize.selectImage
        },{
            text    : 'Cancel',
            scope   : this,
            handler : function() {
                var win = Core.getCmp('imageDescWin', CORE.CMP_TYPE_WINDOW);
                if (win) {
                    win.hide();
                }
            }
        }]
    });
    var popupImages = Core.getCmp('popupImages', CORE.CMP_TYPE_GRID);
    if(popupImages){
        popupImages.getExtStore().load();
    }

};
Core.customize.selectImage = function () {
    var imageDescGrid = Core.getCmp('popupImages', CORE.CMP_TYPE_GRID);
    var selectRows = imageDescGrid.grid.getSelectionModel().getSelections();
    if(selectRows.length == 0) {
        Core.Msg.warning('Please select a record to continue.');
        return;
    }
    var colorGrid = Core.getCmp('colors', CORE.CMP_TYPE_GRID);
    var colorRecord = colorGrid.getExtStore().getAt(Core.customize.colorRowIndex);
    colorRecord.set('image', selectRows[0].data.image.id);
    colorRecord.set('fileName', selectRows[0].data.fileName);
    Core.GridUtil.addToModifiedGrids('colors');
    colorGrid.syncSize();
    var win = Core.getCmp('imageDescWin', CORE.CMP_TYPE_WINDOW);
    win.hide();
};

Core.customize.imageFormat = function(config){
    return function imageFormat(value, p, r, rowIndex, i, ds) {
        var cGrid = ds.cGrid;
        var cGridIsReadonly = (cGrid && cGrid.isReadonly());
        var recordReadonly = eval(r.get('readonly'));
        var columnId = p.id;
        var fileName = '';
        var isPdf = false;
        var isAI = false;
        if (r.data['image']) {
            fileName = r.data['image'].attachName;
        }
        if (Ext.isEmpty(fileName) && r.data[columnId + '_tmpObj']) {
            fileName = r.data[columnId + '_tmpObj'].attachName;
        }
        if (!Ext.isEmpty(fileName)) {
            isPdf = fileName.substring(fileName.lastIndexOf('.') + 1).toUpperCase() == 'PDF';
            isAI = fileName.substring(fileName.lastIndexOf('.') + 1).toUpperCase() == 'AI';
        }
        var triggerId = name + '_' + r.data['id'];
        var gridId = ds.cGrid.conf.id;
        var link = '<a id="' + triggerId + '" href="javascript:Core.customize.imageDescPopup(\''
            + rowIndex + '\',\'' + columnId + '\',\'' + gridId + '\');">{0}</a>';
        // get attachment id
        var attachId = '';
        if (value && typeof value == 'object') {
            attachId = value.id;
        } else {
            attachId = value;
        }
        var imageHTML = '';
        if (isAI) {
            imageHTML = '<img src="' + Core.base + 'images/ai.gif"';
        } else {
            imageHTML = '<img src="' + Core.base
            + 'attachment_retrieve_image.action?&f=' + attachId + '"';
        }
        if (!Ext.isEmpty(attachId)) {
            imageHTML += ' id="' + attachId + '"'
        }
        if (!Ext.isEmpty(config.width)) {
            imageHTML += ' width="' + config.width + '"';
        }
        if (Ext.isEmpty(config.height)) {
            imageHTML += ' height="70"'
        } else {
            imageHTML += ' height="' + config.height + '"';
        }
        imageHTML += '/>';

        if (isPdf || isAI) {
            zoomIn = '<a id="' + attachId + '" href="attachment_download.action?attachId='+ attachId + '">';
        } else {
            var zoomIn = '<a href="#" onclick="showImageWindow(event, \''+attachId+'\');return false;">';
        }
        var markup = '&nbsp;';
        //-- the "deleted" column
        if (columnId == 'deleted' || columnId == 'selected') {
            // the deleted record red-cross indicator
            if(value == 'deleted' || value == 'cancel' || value == 'selected') {
                 markup = '<img src="'+ Core.base +'images/'
                + value + '.gif" width="15" height="15" border="0" id="' + id
                + '"/>';
            };
            return markup;
        }
        //-- readonly
        if (config.readonly || cGridIsReadonly || recordReadonly) {
            if (!isEmptyString(value)) {
                markup = zoomIn + imageHTML + '</a>';
            }
            return markup;
        }
        //-- editable
        var beforeCellEditEvent = {
            grid   : ds.cGrid.grid,
            record : r,
            field  : p.id,
            value  : value,
            row    : r,
            column : i
        };
        if(isEmptyString(value)){
            if(Core.fireCmpEvent(ds.cGrid.conf.id, CORE.EVENT_GRID_BEFORE_EDIT, beforeCellEditEvent) === false){
            } else {
                markup = String.format(link, Core.Msg.getText('FIELDFORMATTER_007'));
            }
        } else {
            if(Core.fireCmpEvent(ds.cGrid.conf.id, CORE.EVENT_GRID_BEFORE_EDIT, beforeCellEditEvent) === false){
                markup += zoomIn + imageHTML + '</a>';
            } else {
                markup += zoomIn + imageHTML + '</a>';
                markup += '<br/>' + String.format(link, Core.Msg.getText('FIELDFORMATTER_003'));
            }
        }
        return markup;
    };
};
Core.customize.popImageFormat = function(config){
    return function imageFormat(value, p, r, rowIndex, i, ds) {
        var cGrid = ds.cGrid;
        var cGridIsReadonly = (cGrid && cGrid.isReadonly());
        var recordReadonly = eval(r.get('readonly'));
        var columnId = p.id;
        var fileName = '';
        var isPdf = false;
        var isAI = false;
        if (r.data['image']) {
            fileName = r.data['image'].attachName;
        }
        if (Ext.isEmpty(fileName) && r.data[columnId + '_tmpObj']) {
            fileName = r.data[columnId + '_tmpObj'].attachName;
        }
        if (!Ext.isEmpty(fileName)) {
            isPdf = fileName.substring(fileName.lastIndexOf('.') + 1).toUpperCase() == 'PDF';
            isAI = fileName.substring(fileName.lastIndexOf('.') + 1).toUpperCase() == 'AI';
        }
        var triggerId = name + '_' + r.data['id'];
        var gridId = ds.cGrid.conf.id;
        var link = '<a id="' + triggerId + '" href="javascript:Core.customize.imageDescPopup(\''
            + rowIndex + '\',\'' + columnId + '\',\'' + gridId + '\');">{0}</a>';
        // get attachment id
        var attachId = '';
        if (value && typeof value == 'object') {
            attachId = value.id;
        } else {
            attachId = value;
        }
        var imageHTML = '';
        if (isAI) {
            imageHTML = '<img src="' + Core.base + 'images/ai.gif"';
        } else {
            imageHTML = '<img src="' + Core.base
            + 'attachment_retrieve_image.action?&f=' + attachId + '"';
        }
        if (!Ext.isEmpty(attachId)) {
            imageHTML += ' id="' + attachId + '"'
        }
        if (!Ext.isEmpty(config.width)) {
            imageHTML += ' width="' + config.width + '"';
        }
        if (Ext.isEmpty(config.height)) {
            imageHTML += ' height="70"'
        } else {
            imageHTML += ' height="' + config.height + '"';
        }
        imageHTML += '/>';

        if (isPdf || isAI) {
            zoomIn = '<a id="' + attachId + '" href="attachment_download.action?attachId='+ attachId + '">';
        } else {
            var zoomIn = '<a href="#" onclick="showImageWindow(event, \''+attachId+'\');return false;">';
        }
        var markup = '&nbsp;';
        //-- the "deleted" column
        if (columnId == 'deleted' || columnId == 'selected') {
            // the deleted record red-cross indicator
            if(value == 'deleted' || value == 'cancel' || value == 'selected') {
                 markup = '<img src="'+ Core.base +'images/'
                + value + '.gif" width="15" height="15" border="0" id="' + id
                + '"/>';
            };
            return markup;
        }
        //-- readonly
        if (config.readonly || cGridIsReadonly || recordReadonly) {
            if (!isEmptyString(value)) {
                markup = zoomIn + imageHTML + '</a>';
            }
            return markup;
        }
        //-- editable
        var beforeCellEditEvent = {
            grid   : ds.cGrid.grid,
            record : r,
            field  : p.id,
            value  : value,
            row    : r,
            column : i
        };
        if(isEmptyString(value)){
            if(Core.fireCmpEvent(ds.cGrid.conf.id, CORE.EVENT_GRID_BEFORE_EDIT, beforeCellEditEvent) === false){
            } else {
                markup = String.format(link, Core.Msg.getText(''));
            }
        } else {
            if(Core.fireCmpEvent(ds.cGrid.conf.id, CORE.EVENT_GRID_BEFORE_EDIT, beforeCellEditEvent) === false){
                markup += zoomIn + imageHTML + '</a>';
            } else {
                markup += zoomIn + imageHTML + '</a>';
                //markup += '<br/>' + String.format(link, Core.Msg.getText(''));
            }
        }
        return markup;
    };
};

Core.customize.clearStyleMeasWin = function(){
    var templateType = Core.getCmp('measTemplateTypeId$0',CORE.CMP_TYPE_COMBOBOX);
    var templateStatus = Core.getCmp('templateStatus$0',CORE.CMP_TYPE_COMBOBOX);
    var templateUnit = Core.getCmp('measTemplateUnitId$0',CORE.CMP_TYPE_COMBOBOX);
    if (templateType) {
        templateType.setValue('');
        templateStatus.setValue('');
        templateUnit.setValue('');
        document.getElementById('measTemplateName$0').value = '';
        document.getElementById('measTemplateDescription$0').value = '';
        Ext.getDom('sysMessage').innerHTML='';
    }
};

Core.customize.saveToSetup = function(grid){
    if(Core.curUserIsVendor){
        Core.Msg.warning('STYLE_046');
        return;
    }
    if(Core.Document.hasModified()){
        Core.Msg.warning('STYLE_041');
        return;
    }
    var win = Core.WindowUtil.getWinFromCache('styleMeasWin');
    if (win) {
        win.show();
    } else {
        win = new Core.Window({
            id          : 'styleMeasWin',
            url         : 'jsp/coles/popup/popup_save_style_meas.jsp',
            title       : 'Save to Setup',
            width       : 600,
            height      : 300,
            autoScroll : false,
            closable    : true
        });
        win.addListener('beforeShow', Core.customize.clearStyleMeasWin, this);
        win.render();
        win.win.addListener('move', Core.WindowUtil.winMoveHandler, this);

        win.show();
    }
};
Core.customize.afterSaveStyleMeas = function() {
    Ext.MessageBox.updateProgress(1, "Done");
    Ext.MessageBox.hide();
    var win = Core.WindowUtil.getWinFromCache('styleMeasWin');
    if (win) {
        win.hide();
    }
    Core.Msg.info('STYLE_042');
};

Core.Document.regCustomizeAction("saveStyleMeas", function() {
    Ext.MessageBox.progress("Save to Measurement Template", "Save to Measurement Template", "Initializing...");
    var tamplateName = document.getElementById('measTemplateName$0').value;
    var tamplateDescn = document.getElementById('measTemplateDescription$0').value;
    var templateType = Core.getCmp('measTemplateTypeId$0',CORE.CMP_TYPE_COMBOBOX);
    var templateStatus = Core.getCmp('templateStatus$0',CORE.CMP_TYPE_COMBOBOX);
    var templateUnit = Core.getCmp('measTemplateUnitId$0',CORE.CMP_TYPE_COMBOBOX);

    if (isEmptyString(tamplateName)) {
        Core.Msg.warning('STYLE_039');
        return;
    }
    if (isEmptyString(templateType.getValue())) {
        Core.Msg.warning('STYLE_040');
        return;
    }
    if (Core.customize.duplicate) {
        Core.Msg.warning('STYLE_043');
        return;
    }
    if (tamplateName.length > 60) {
        Core.Msg.warning('STYLE_044');
        return;
    }
    if (tamplateDescn.length > 2000) {
        Core.Msg.warning('STYLE_045');
        return;
    }

    Ext.MessageBox.updateProgress(0.5, "Getting server response...");
    Core.Document.requestBizLogicAction('save_style_meas_template.action', {
        SP_I_DOC_ID : Core.Document.DOC_ID,
        SP_I_TEMPLATE_NAME : document.getElementById('measTemplateName$0').value,
        SP_I_TEMPLATE_DESCN : document.getElementById('measTemplateDescription$0').value,
        SP_I_TEMPLATE_TYPE_ID : templateType.getValue(),
        SP_I_TEMPLATE_STATUS : templateStatus.getValue(),
        SP_I_TEMPLATE_UNIT_ID : templateUnit.getValue(),
        SP_I_USER_CODE : Core.curUserCode,
        _DOC_STATUS : Core.Document.statusNameForAllowedAction,
        _DOC_OBJ_ID : Core.Document.FORM_ID
    }, Core.customize.afterSaveStyleMeas);

}, false);

Core.Document.regCustomizeAction("closeStyleMeas", function() {
    var win = Core.WindowUtil.getWinFromCache('styleMeasWin');
    if (win) {
        win.hide();
    }
}, true);

Core.customize.checkValueDuplicate = function(e, msgElementId) {
    if (Ext.isEmpty(msgElementId)) {
        msgElementId = 'sysMessage';
    }
    Ext.getDom(msgElementId).innerHTML='';
    var fieldValue = e.value;
    var fieldId = Core.Document.getFieldIdByObj(e);

    var callbackDuplicateFlag = function(response, options) {
        jsonString = response.responseText;
        jsonResult = Ext.util.JSON.decode(jsonString);
        if(jsonResult == "false") {
            Ext.getDom(msgElementId).innerHTML=' value already exists';
            Core.customize.duplicate = true;
            //Ext.getDom(e).focus();
            //Ext.getDom(e).select();
        } else if(jsonResult == "true" && !isEmptyString(fieldValue)){
            Ext.getDom(msgElementId).innerHTML='<img src="images/note_ok.png"/>';
            Core.customize.duplicate = false;
        }
    };

    var callbackFlagFailure = function() {
        Core.Msg.error('DOC_UTIL_001');
    };

    if(isEmptyString(fieldValue)) {
        //Ext.getDom(msgElementId).innerHTML=' value should not be null';
        //Ext.getDom(e).focus();
        return;
    }
    if(dbData == null || dbData.getValue(e.id) != fieldValue) {
        Ext.getDom(msgElementId).innerHTML='<img src="images/loading.gif"/>';
        Core.Ajax.request({
            url     : 'checkFieldValueDuplicate.action',
            success : callbackDuplicateFlag,
            failure : callbackFlagFailure,
            params  : {
                entityName: 'Meas',
                propertyName: 'templateName',
                userInput : fieldValue
            }
        });
        return;
    }
};

Core.customize.synColorsGridAfterTabChange = function(){
     if (Core.Document.getCurrentTabId() == 'tab_colorsize') {
         var grid = Core.getCmp(Core.customize.STYLE_COLOR_GRID_ID,CORE.CMP_TYPE_GRID);
         if(grid){
             grid.syncSize();
         }
     }
};
Core.addListener(CORE.EVENT_TAB_CHANGED, Core.customize.synColorsGridAfterTabChange);


Core.addListener(CORE.EVENT_BEFORE_SAVE,function(){
    var clientDs = Core.getClientDS();
    var onShowDate = clientDs.getValue('inStoreDate');
    var seasonCombo = Core.getCmp('seasonId$0',CORE.CMP_TYPE_COMBOBOX);
    if(!!!onShowDate || onShowDate.length == 0){
        if(seasonCombo){
            var seasonRef1 = seasonCombo.getStorePropertyValueById('ref1', seasonCombo.getValue(), 'id');
            onShowDate = seasonRef1;
            var isDateFormat = isDate(onShowDate,'d/M/yyyy');
            if(isDateFormat){
                var estFirstOrderDate = parseDate(onShowDate, 'dd/MM/yyyy').add(Date.DAY, -14).format(Core.DatePattern.ShortDate);
                var estShipDate = parseDate(onShowDate, 'dd/MM/yyyy').add(Date.DAY, -49).format(Core.DatePattern.ShortDate);
                clientDs.updateValue('inStoreDate', onShowDate);
                clientDs.updateValue('estFirstOrderDate', estFirstOrderDate);
                clientDs.updateValue('estShipDate', estShipDate);
            }
        }
    }
});

Core.customize.filterDeleteStatus = function(extCombo){
    var store = extCombo.combo.store;
    store.snapshot = null;
    store.backup_data = store.backup_data && store.backup_data.getCount() > 0
        ? store.backup_data : store.data.clone();
    store.snapshot = store.backup_data.filterBy(function(r){
        return r.data['name'] !=  'deleted';
    }, this);
    return true;
};

Core.customize.activeSizes = function(){
    var clientDS = Core.getClientDS();
    var grid = Core.getCmp(Core.customize.STYLE_SIZE_GRID_ID, CORE.CMP_TYPE_GRID);
    var selectRows = grid.grid.getSelectionModel().getSelections();
    if(selectRows.length == 0) {
        Core.Msg.warning('STYLE_047');
        return;
    }
    for (var i=0; i < selectRows.length; i++) {
        selectRows[i].set('sizeStatus', 'Active');
    }
    Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_SIZE_GRID_ID);
};

Core.customize.inactiveSizes = function(){
    var clientDS = Core.getClientDS();
    var grid = Core.getCmp(Core.customize.STYLE_SIZE_GRID_ID, CORE.CMP_TYPE_GRID);
    var selectRows = grid.grid.getSelectionModel().getSelections();
    if(selectRows.length == 0) {
        Core.Msg.warning('STYLE_047');
        return;
    }
    for (var i=0; i < selectRows.length; i++) {
        selectRows[i].set('sizeStatus', 'Inactive');
    }
    Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_SIZE_GRID_ID);
};

Core.addCmpListener('deptId$0', CORE.EVENT_AFTER_CHANGE_PARENT_COMBOBOX_VALUE, function(){
    var clientDS = Core.getClientDS();
    clientDS.updateValue('level5',' ');
    clientDS.updateValue('level6', ' ');

});

Core.customize.setApnColumnReadonly = function(isReadOnly){
    var keycodeGrid = Core.getCmp(Core.customize.STYLE_KEYCODE_GRID_ID, CORE.CMP_TYPE_GRID);
    var cm = keycodeGrid.getColumnModel();
    var apnColumnIndex = cm.getColumnIndex('apn');
    cm.setEditable(apnColumnIndex, !isReadOnly);
    cm.setRenderer(apnColumnIndex, Core.FieldFormat.textFieldFormat({
        readonly 	 : isReadOnly,
        tabId        : 'tab_colorsize',
        columnId     : Core.Document.FORM_NAME + '__keycodes__apn'
    })
    );
    var keycodeApnBtnColumnIndex = cm.getColumnIndex('keycodeApn');
    cm.setRenderer(keycodeApnBtnColumnIndex, Core.customize.buttonFormat({
        isEditable : !isReadOnly,
        script       : 'Core.customize.popupKeycodeApn',
        displayLabel : '...',
        columnId     : Core.Document.FORM_NAME + '__keycodes__keycodeApn'
    })
    );
    keycodeGrid.grid.getView().refresh();
};

Core.customize.refreshKeyCodeGrid = function(){
    if (Core.Document.isEditableTab('tab_colorsize')) {
        var autoAssign = document.getElementById('sc_autoAssignApn$0');
        if(autoAssign){
            var isChecked = autoAssign.checked;
            if(isChecked){
                Core.customize.setApnColumnReadonly(true);
            } else {
                 Core.customize.setApnColumnReadonly(false);
            }
        }
    }
};

Core.addCmpListener(Core.customize.STYLE_KEYCODE_GRID_ID,CORE.EVENT_GRID_AFTER_LOAD,Core.customize.refreshKeyCodeGrid);

Core.customize.autoAssignApnIsChecked = function(){
    var auotAssignApn = document.getElementById('sc_autoAssignApn$0');
    var isChecked = auotAssignApn.checked;
    if(isChecked){
        return true;
    } else {
        return false;
    }
};

Core.customize.autoAssignApn = function(){
    var clientDs = Core.getClientDS();
    var record = '';
    var apn = '';
    var keycodeGrid = Core.getCmp(Core.customize.STYLE_KEYCODE_GRID_ID, CORE.CMP_TYPE_GRID);
    var cm = keycodeGrid.getColumnModel();
    if(Core.customize.autoAssignApnIsChecked()){
        var store = keycodeGrid.getExtStore();
        var storeLen = store.getTotalCount();
        var isAllApnEmpty = true;
        for(var i = 0; i < storeLen; i++){
            var record = store.virtualGetAt(i);
            if(!Ext.isEmpty(record.get('apn')) && record.get('readonly') != 'true'){
                isAllApnEmpty = false;
                break;
            }
        }
        if(storeLen == 0 || isAllApnEmpty){
            Core.customize.setApnColumnReadonly(true);
            Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_KEYCODE_GRID_ID);
            return;
        }
        Core.Msg.confirm('STYLE_048',
                function() { // [yes]
                // clean the apn data in the keycode grid
                    for (var j = 0; j < storeLen; j++) {
                        var record = store.virtualGetAt(j);
                        if (record.get('readonly') != 'true') {
                            record.set('apn', '');
                        }
                    }
                    Core.customize.setApnColumnReadonly(true);
                    Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_KEYCODE_GRID_ID);
               },
               function() { // [No]
                   document.getElementById('sc_autoAssignApn$0').checked = false;
                   clientDs.updateValue('autoAssignApn','N');
                   return;
               }
         );
    } else {
         Core.customize.setApnColumnReadonly(false);
         Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_KEYCODE_GRID_ID);
    }

};

Core.customize.updatePageFieldsValue = function(key, record){
    var name = key.substring(0, key.indexOf('$'));
    // textArea and hidden input do not have display_key div.
    if(key != 'webName$0' && key != 'productFeatures$0' && key != 'productRegStatus$0'){
        if(document.getElementById('display_' + key)){
             document.getElementById('display_' + key).innerHTML = record.data[name];
        }
    }
    document.getElementById(key).value = record.data[name];
};

Core.customize.updatePageDropdownValue = function(key, record){
    var name = key.substring(0, key.indexOf('$'));
    var combo = Core.getCmp(key,CORE.CMP_TYPE_COMBOBOX);
    if(combo){
        combo.setValue(record.data[name]);
        if(document.getElementById('display_' + key)){
            document.getElementById('display_' + key).innerHTML = combo.getDisplayValue();
        }
    }
};

Core.customize.checkPageTextFieldModified = function(fieldName){
    var name = fieldName.substring(0, fieldName.indexOf('$'));
    var record = Core.customize.current_color_keycode_page_record;
    var el = document.getElementById(fieldName);
    if(!record && el && el.value != ''){
        return true;
    }
    if(record){
        var val = record.data[name];
        if(el.value != val){
            record.data[name] = el.value;
            return true;
        }
        if(record.json[name] != val){
            return true;
        }
    }
    return false;
};

Core.customize.checkPageDropDownModified = function(fieldName){
  var combo = Core.getCmp(fieldName,CORE.CMP_TYPE_COMBOBOX);
  if(combo){
      var name = fieldName.substring(0, fieldName.indexOf('$'));
      var record = Core.customize.current_color_keycode_page_record;
      if(!record && combo.getValue() != ''){
          return true;
      }
      if(record){
          if(combo.getValue() != record.data[name]){
              return true;
          }
      }
  }
  return false;
};

Core.customize.isColorKeycodePageModified = function(){
     var isPageModified = false;
     for(var i = 0; i < Core.customize.keycode_color_fields.length; i++){
         isPageModified = Core.customize.checkPageTextFieldModified(Core.customize.keycode_color_fields[i]);
         if(isPageModified == true){
            return isPageModified;
         }
     }
     for(var j = 0; j < Core.customize.keycode_color_dropdown_fields.length; j++){
         isPageModified = Core.customize.checkPageDropDownModified(Core.customize.keycode_color_dropdown_fields[j]);
         if(isPageModified == true){
             return isPageModified;
          }
     }
     if(Core.getClientDS().isModifiedGrids(['productAttribute','assortmentPlan'])){
         isPageModified = true;
     }
     return isPageModified;
};

Core.customize.rollBackOldRecord = function() {
    var colourKeycode = Core.getCmp(Core.customize.COLOR_KEYCODE_DROP_DOWN_ID,CORE.CMP_TYPE_COMBOBOX);
    for(var i = 0; i < colourKeycode.store.getTotalCount(); i++){
        var record = colourKeycode.store.getAt(i);
        if(record.data['id'] == Core.customize.current_style_color_id){
            for(var i = 0; i < Core.customize.keycode_color_fields.length; i++){
                var fieldName = Core.customize.keycode_color_fields[i]
                var name = fieldName.substring(0, fieldName.indexOf('$'));
                record.data[name] = record.json[name];
             }
            break;
        }
    }
};

Core.customize.updateKeycodePageData = function(record){
     var clientDs = Core.getClientDS();
     Core.customize.current_style_color_id = record.data['id'];
     Core.customize.current_style_prod_reg_status = record.data['productRegStatus'];
     Core.customize.current_style_color_version = record.data['version'];
     Core.customize.current_color_keycode_page_record = record;

     var productAttrGrid = Core.getCmp('productAttribute', CORE.CMP_TYPE_GRID);
     if(productAttrGrid){
           var params = productAttrGrid.getExtStore().reqParams;
             params["restrictions['mscpa.parentId$eq']"] = Core.customize.current_style_color_id;
             productAttrGrid.paging.onClick("refresh");
     }
     var assortmentPlanGrid = Core.getCmp('assortmentPlan', CORE.CMP_TYPE_GRID);
     if(assortmentPlanGrid){
           var params = assortmentPlanGrid.getExtStore().reqParams;
             params["restrictions['mscap.parentId$eq']"] = Core.customize.current_style_color_id;
             assortmentPlanGrid.paging.onClick("refresh");
     }

     for(var i = 0; i < Core.customize.keycode_color_fields.length; i++){
         Core.customize.updatePageFieldsValue(Core.customize.keycode_color_fields[i], record);
     }
     for(var j = 0; j < Core.customize.keycode_color_dropdown_fields.length; j++){
         Core.customize.updatePageDropdownValue(Core.customize.keycode_color_dropdown_fields[j], record);
     }
     if(record.data['productRegStatus'] == 'LOCKED' || record.data['productRegStatus'] == 'REGISTERED'){
         Core.Document.toggleFieldsEditableById(Core.customize.readOnlyFieldsWhenColorReg, false);
         Core.customize.setGridBtnsReadonly('productAttribute', true);
         Core.customize.setGridBtnsReadonly('assortmentPlan', true);
     } else {
         Core.Document.toggleFieldsEditableById(Core.customize.readOnlyFieldsWhenColorReg, true);
         Core.customize.setGridBtnsReadonly('productAttribute', false);
         Core.customize.setGridBtnsReadonly('assortmentPlan', false);
     }
     if(Core.Document.DOC_ID){
         var colorKeycodeDropDown= Core.getCmp(Core.customize.COLOR_KEYCODE_DROP_DOWN_ID,CORE.CMP_TYPE_COMBOBOX);
         if(colorKeycodeDropDown){
             // {readonly for "default"}
             if(colorKeycodeDropDown.getDisplayValue() == '- DEFAULT -'){
                 Core.Document.toggleFieldsEditableById(Core.customize.readOnlyFields, false);
             }
         }
     }
};

Core.customize.updateClientDsByFieldName = function(fieldName){
    var clientDs = Core.getClientDS();
    if(document.getElementById(fieldName)){
        var name = fieldName.substring(0, fieldName.indexOf('$'));
        var value = document.getElementById(fieldName).value;
        var key = 'colors__' + (Core.customize.current_style_color_id || 'NEW-1') + '--' + Core.customize.current_style_color_version + '__' + name;
        if(Core.customize.checkPageTextFieldModified(fieldName)){
             //console.debug('textField: ' + key + ' , ' + value);
             clientDs.add(key, value);
        }
     }
};

Core.customize.updateClientDsByDropDownName = function(fieldName){
  var clientDs = Core.getClientDS();
  var combo = Core.getCmp(fieldName,CORE.CMP_TYPE_COMBOBOX);
  if(combo){
      var name1 = fieldName.substring(0, fieldName.indexOf('$'));
      var value1 = combo.getValue();
      var name2 = fieldName.substring(0, fieldName.indexOf('Id$')) + 'Code';
      var value2 = '';
      if(combo.selectedRecord && !isEmptyString(value1)){
          value2 = combo.selectedRecord.data['code']
      }
      var key1 = 'colors__' + (Core.customize.current_style_color_id || 'NEW-1') + '--' + Core.customize.current_style_color_version + '__' + name1;
      var key2 = 'colors__' + (Core.customize.current_style_color_id || 'NEW-1') + '--' + Core.customize.current_style_color_version + '__' + name2;
      if(Core.customize.checkPageDropDownModified(fieldName)){
          //console.debug('dropdown: ' + key1 + ' , ' + value1);
          //console.debug('dropdown: ' + key2 + ' , ' + value2);
          clientDs.add(key1, value1);
          clientDs.add(key2, value2);
      }
   }
};

Core.customize.getProductAttFullName = function(sn){
    return 'colors__' + (Core.customize.current_style_color_id || 'NEW-1') + '--' + Core.customize.current_style_color_version  + '__' + sn;
};

Core.customize.keycodeTabTable = function(gridId){
    var grid = Core.getCmp(gridId, CORE.CMP_TYPE_GRID);
    var clientDs = Core.getClientDS();
    if(grid){
        var modifiedRecords = Core.grid.Grid.getModifiedRecords(grid);
        if(modifiedRecords && modifiedRecords.length > 0 ){
            for(var k = 0; k < modifiedRecords.length ; k++){
                clientDs.add(Core.customize.getProductAttFullName(modifiedRecords[k].name),modifiedRecords[k].value,false);
            }
        }
    }
};

Core.customize.styleKeycodeBeforeSave = function(){
     var clientDs = Core.getClientDS();
     var validateMsg = '';
     var webName = document.getElementById('webName$0');
     if(webName){
         if(webName.value.length > 2000){
             validateMsg += "<li><span class='error_msg_field'>Keycode > Web/Product Name:</span>Maximum length cannot be larger than 2000.</li>";
         }
     }
     var productFeatures = document.getElementById('productFeatures$0');
     if(productFeatures){
         if(productFeatures.value.length > 2000){
             validateMsg += "<li><span class='error_msg_field'>Keycode > Product Features:</span>Maximum length cannot be larger than 2000.</li>";
         }
     }
     if(validateMsg.length > 0){
         Core.Document.showErrorMessage(validateMsg,'Warning', 'The following errors were encountered while processing:',true);
         return false;
     }
     if(!Core.Document.DOC_ID){
        clientDs.add('colors__NEW-1--' + Core.customize.current_style_color_version + '__isDefault','Y');
        clientDs.add('colors__NEW-1--' + Core.customize.current_style_color_version + '__isNew','Y');
        if(!document.getElementById('webName$0')){
            var colorProductTypeId = '';
            var productTypeRecord = Core.Document.getDDRecord('colorProductTypeId', 'code', 'REG');
            if (productTypeRecord) {
                var colorProductTypeId = productTypeRecord.id;
                clientDs.add('colors__NEW-1--' + Core.customize.current_style_color_version + '__colorProductTypeId', colorProductTypeId);
                clientDs.add('colors__NEW-1--' + Core.customize.current_style_color_version + '__colorProductTypeCode','REG');
            }
            clientDs.add('colors__NEW-1--' + Core.customize.current_style_color_version + '__bulkyItem','N');
            clientDs.add('colors__NEW-1--' + Core.customize.current_style_color_version + '__targetExclusive','N');
            clientDs.add('colors__NEW-1--' + Core.customize.current_style_color_version + '__onlineExclusive','N');
            clientDs.add('colors__NEW-1--' + Core.customize.current_style_color_version + '__isTransform','N');
            clientDs.add('colors__NEW-1--' + Core.customize.current_style_color_version + '__isProductionCost','N');
            clientDs.add('colors__NEW-1--' + Core.customize.current_style_color_version + '__colorDevelopingCountry','N');
            clientDs.add('colors__NEW-1--' + Core.customize.current_style_color_version + '__licenseToSell','N');
        }
     }
     for(var i = 0; i < Core.customize.keycode_color_fields.length; i++){
         Core.customize.updateClientDsByFieldName(Core.customize.keycode_color_fields[i]);
     }
     for(var j = 0; j < Core.customize.keycode_color_dropdown_fields.length; j++){
         Core.customize.updateClientDsByDropDownName(Core.customize.keycode_color_dropdown_fields[j]);
     }
     Core.customize.removeSubGridChangeFromClientDS('assortmentPlan');
     Core.customize.removeSubGridChangeFromClientDS('productAttribute');
     Core.customize.keycodeTabTable('assortmentPlan');
     Core.customize.keycodeTabTable('productAttribute');
};

Core.addListener(CORE.EVENT_BEFORE_SAVE, Core.customize.styleKeycodeBeforeSave);

Core.customize.getDropdownRecordById = function(store, id){
      var records = store.data.items;
      for(var i = 0; i < records.length; i++){
          if(records[i].data['id'] == id){
              return records[i];
          }
      }
      return null;
};

Core.customize.initColorKeycodeDropDown = function(){
        //console.debug('initColorKeycodeDropDown... on load');
        var colorKeycodeDropDown= Core.getCmp(Core.customize.COLOR_KEYCODE_DROP_DOWN_ID,CORE.CMP_TYPE_COMBOBOX);
        var defaultRecord = null;
        if(colorKeycodeDropDown != null){
            var store = colorKeycodeDropDown.store;
            if(Core.customize.current_style_color_id != ''){
                defaultRecord = Core.customize.getDropdownRecordById(store, Core.customize.current_style_color_id);
            } else {
                defaultRecord = store.data.items[0];
            }
             var defaultColorKeycodeId = defaultRecord.data['id']
             colorKeycodeDropDown.setValue(defaultColorKeycodeId);
             Core.customize.updateKeycodePageData(defaultRecord);

        }
};

Core.addListener(CORE.EVENT_SEARCH_GRID_ROWDBCLICK, function(param1, param2){
    Core.customize.current_style_color_id = '';
    Core.customize.current_style_prod_reg_status = '';
    Core.customize.current_style_color_version = 0;
    Core.customize.current_color_keycode_page_record = null;
});

Core.addListener(CORE.EVENT_AFTER_NEW, function(param1, param2){
    Core.customize.current_style_color_id = '';
    Core.customize.current_style_prod_reg_status = '';
    Core.customize.current_style_color_version = 0;
    Core.customize.current_color_keycode_page_record = null;
    var combo = Core.getCmp(Core.customize.COLOR_KEYCODE_DROP_DOWN_ID,CORE.CMP_TYPE_COMBOBOX);
    if(combo){
        combo.store.removeAll();
    }
    var productAttGrid = Core.getCmp('productAttribute', CORE.CMP_TYPE_GRID);
    if (productAttGrid) {
        var productAttStore = productAttGrid.getExtStore();
        productAttStore.removeAll();
        var params = productAttGrid.getExtStore().reqParams;
        params["restrictions['mscpa.parentId$eq']"] = '';
    }
    var assortmentPlanGrid = Core.getCmp('assortmentPlan', CORE.CMP_TYPE_GRID);
    if (assortmentPlanGrid) {
        var assortmentPlanStore = assortmentPlanGrid.getExtStore();
        assortmentPlanStore.removeAll();
        var params = assortmentPlanGrid.getExtStore().reqParams;
        params["restrictions['mscap.parentId$eq']"] = '';
    }
});

Core.customize.getColorKeycodeDropdownStore = function(){
    //console.debug('getColorKeycodeDropdownStore');
    var params = {};
    params['restrictions["msc.parentId$eq"]'] = Core.Document.DOC_ID == null ? 'NULL' : Core.Document.DOC_ID;
    params['limit'] = 1000;
    Ext.Ajax.request({
            url: Core.base + "colourKeycode_list_json.action",
            success: function(response, options){
                var json = Ext.util.JSON.decode(response.responseText);
                if(!!json.records){
                    Core.customize.dropdownStores['colourKeycodeId'] = Core.form.ComboBox.refactorDataStructure('colourKeycodeId',
                    Ext.applyIf({entityFields: 'id,colourKeycodeId,productName,webName,arthurDesc,productFeatures,likeProduct,registeredGrade,posDesc,colorSplLine1,colorSplLine2,minPresDepth,'
                        + 'colorBarcodeColour,colorBarcodeDesc1,colorBarcodeDesc2,colorModelNo,featureTicketDesc1,featureTicketDesc2,featureTicketDesc3,'
                        + 'featureTicketDesc4,featureTicketDesc5,colorProductTypeId,colorBarcodeTicketId,bulkyItem,targetExclusive,onShowDate,'
                        + 'onlineExclusive,isTransform,isProductionCost,colorDevelopingCountry,licenseToSell,isDefault,registerInOdbms,lineNo'},json));

                    var keycodeDropdown = Core.getCmp(Core.customize.COLOR_KEYCODE_DROP_DOWN_ID, CORE.CMP_TYPE_COMBOBOX);
                     if(keycodeDropdown){
                         keycodeDropdown.comboExt.getStore().loadData(Core.customize.dropdownStores['colourKeycodeId']);
                         var colorIsExisted = false;
                         for(var i = 0 ; i < Core.customize.dropdownStores['colourKeycodeId'].totalRecords; i++){
                             if(Core.customize.dropdownStores['colourKeycodeId'].records[i].id == Core.customize.current_style_color_id){
                                 colorIsExisted = true;
                                 break;
                             }
                         }
                         if(!colorIsExisted){
                             Core.customize.current_style_color_id = '';
                         }
                         Core.customize.initColorKeycodeDropDown();
                     }
                }
            },
            failure: function(response, options){
                Core.Document.handleError(response, false);
            },
            params: params,
            scope: this
        });
};


Core.addListener(CORE.EVENT_AFTER_SET_TAB_CONTENT, function(params1, params2){
    if(params2.tab  === 'tab_keycode'){
        if(Core.Document.DOC_ID){
           Core.customize.getColorKeycodeDropdownStore();
        } else {
            var combo = Core.getCmp(Core.customize.COLOR_KEYCODE_DROP_DOWN_ID,CORE.CMP_TYPE_COMBOBOX);
            if(combo){
                combo.setValue('- DEFAULT -');
            }
        }
     }
});


Core.customize.confirmSelectProductAttr = function(){
    var typeObj = document.getElementById('type');
    if(typeObj.selectedIndex == -1){
        Core.Msg.warning('STYLE_056');
        return;
    }
    var selectedTypeId = typeObj.options[typeObj.selectedIndex].value;
    var selectedTypeCode = typeObj.options[typeObj.selectedIndex].innerHTML;
    var subTypeObj = document.getElementById('subType');
    if(subTypeObj.selectedIndex == -1){
        Core.Msg.warning('STYLE_050');
        return;
    }
    var selectedSubTypeId = subTypeObj.options[subTypeObj.selectedIndex].value;
    var selectedSubTypeCode = subTypeObj.options[subTypeObj.selectedIndex].innerHTML;
    var codeObj = document.getElementById('code');
    if(codeObj.selectedIndex == -1){
        Core.Msg.warning('STYLE_051');
        return;
    }
    var selectedCodeIdAndMandatory = codeObj.options[codeObj.selectedIndex].value;
    var CodeIdAndMandatory = selectedCodeIdAndMandatory.split('&');
    var grid = Core.getCmp('productAttribute', CORE.CMP_TYPE_GRID);
    var store = grid.getExtStore();
    var newReocrds = [];
    var newValues = {};
    newValues.version = 'NEW';
    newValues.id = 'NEW' + store.getTotalCount();
    newValues.typeId = selectedTypeId;
    newValues.typeCode = selectedTypeCode;
    newValues.subTypeId = selectedSubTypeId;
    newValues.subTypeCode = selectedSubTypeCode;
    newValues.codeId = CodeIdAndMandatory[0];
    newValues.codeCode = CodeIdAndMandatory[1];
    newValues.codeName = CodeIdAndMandatory[2];
    newValues.atrCode = CodeIdAndMandatory[3];
    newValues.isMandatory = CodeIdAndMandatory[4];
    for(var i = 0; i < store.getCount(); i++) {
        var oldValues ={};
        oldValues.typeId = store.getAt(i).get('typeId');
        oldValues.subTypeId = store.getAt(i).get('subTypeId');
        oldValues.codeId = store.getAt(i).get('codeId');
        if(newValues.subTypeId==oldValues.subTypeId) {
            Core.Msg.warning('STYLE_055');
            return;
        }
    }

    var params = [];
    params['restrictions["subTypeId$eq"]'] = newValues.subTypeId;
    params['restrictions["parentId$eq"]'] = Core.customize.current_style_color_id || 'NULL';
    Ext.Ajax.request({
       url    : Core.base + 'check_color_duplicate_sub_type.action',
       method : 'POST',
       success : function(response) {
                     var jsonData = Ext.util.JSON.decode(response.responseText);
                     if(jsonData.records && jsonData.records.length > 0){
                         Core.Msg.warning('STYLE_055');
                         return;
                     } else {
                         var rd = new grid.RecordDef(newValues);
                         newReocrds.push(rd);
                         store.add(newReocrds);
                         grid.syncSize();
                         Core.GridUtil.addToModifiedGrids('productAttribute');
                     }
                 },
       failure : function() {
                 },
       scope    : this,
       params   : params
   });

};

Core.customize.loadProductAttrPopupWin = function(){
    //console.debug('loadProductAttrPopupWin ...');
    var typeSelectObj = document.getElementById('type');
    if(typeSelectObj){
        var loadingItem = new Option('loading...', 'loading...');
        typeSelectObj.options.add(loadingItem);
        var params = {};
        Ext.Ajax.request({
            url : 'get_productAttribute_type_list_json.action',
            method : 'POST',
            success : function(response) {
                var jsonData = Ext.util.JSON.decode(response.responseText);
                var records = jsonData.records;
                typeSelectObj.innerHTML = '';
                for(var i = 0; i < records.length; i++){
                    var varItem = new Option(records[i].ref4, records[i].ref3);
                    typeSelectObj.options.add(varItem);
                }
            },
            failure : function() {
                    Core.Document.handleError(response);
              },
            scope : this,
            params : params
        });
    }
};

Core.customize.updateSubTypeList = function(param){
     var subTypeSelectObj = document.getElementById('subType');
     subTypeSelectObj.innerHTML = '';
     var loadingItem = new Option('loading...', 'loading...');
     subTypeSelectObj.options.add(loadingItem);
     var codeSelectObj = document.getElementById('code');
     codeSelectObj.innerHTML = '';
     var params = {};
     params['restrictions["mcl.ref_3$eq"]'] = param;
     Ext.Ajax.request({
            url : 'get_productAttribute_subType_list_json.action',
            method : 'POST',
            success : function(response) {
                var jsonData = Ext.util.JSON.decode(response.responseText);
                var records = jsonData.records;
                subTypeSelectObj.innerHTML = '';
                for(var i = 0; i < records.length; i++){
                    var varItem = new Option(records[i].ref5, records[i].parentCode);
                    subTypeSelectObj.options.add(varItem);
                }
            },
            failure : function() {
                    Core.Document.handleError(response);
              },
            scope : this,
            params : params
    });
};

Core.customize.updateCodeList = function(param){
    var codeSelectObj = document.getElementById('code');
    codeSelectObj.innerHTML = '';
    var loadingItem = new Option('loading...', 'loading...');
    codeSelectObj.options.add(loadingItem);
    var params = {};
    params['restrictions["parentCode$eq"]'] = param;
    Ext.Ajax.request({
           url : 'get_productAttribute_code_list_json.action',
           method : 'POST',
           success : function(response) {
               var jsonData = Ext.util.JSON.decode(response.responseText);
               var records = jsonData.records;
               codeSelectObj.innerHTML = '';
               for(var i = 0; i < records.length; i++){
                   var varItem = new Option(records[i].name, (records[i].id + '&' + records[i].code + '&' + records[i].name + '&' + records[i].ref1 + '&' + records[i].isMandatory));
                   codeSelectObj.options.add(varItem);
               }
           },
           failure : function() {
                   Core.Document.handleError(response);
             },
           scope : this,
           params : params
   });
};

Core.customize.addProductAttr = function(){
    if(Core.Document.DOC_ID){
         Core.WindowUtil.popupCustomizedWindow({
                id : 'productAttrWin',
                url : 'jsp/common/popupWin/productAttrPopupWin.jsp',
                title : 'Add Attributes',
                width : CORE.LARGE_WIN.WIDTH,
                height: CORE.LARGE_WIN.HEIGHT,
                buttons : [{
                    text    : 'Add',
                    scope   : this,
                    handler : Core.customize.confirmSelectProductAttr
                },{
                    text    : 'Close',
                    scope   : this,
                    handler : function() {
                        var win = Core.getCmp('productAttrWin', CORE.CMP_TYPE_WINDOW);
                        if (win) {
                            var typeSelectObj = document.getElementById('type');
                            typeSelectObj.innerHTML = '';
                            var subTypeSelectObj = document.getElementById('subType');
                            subTypeSelectObj.innerHTML = '';
                            var codeObj = document.getElementById('code');
                            codeObj.innerHTML = '';
                            win.hide();
                        }
                    }
                }],
                afterRenderFn : Core.customize.loadProductAttrPopupWin,
                listeners : {
                    'show' : function() {
                        //console.debug('show');
                        Core.customize.loadProductAttrPopupWin();
                    }
                 }
            });
    } else {
         Core.Msg.warning('STYLE_013');
         return;
    }
};

Core.customize.ChangeHistory_childGridSection = {
        'colors-productAttribute'     : 'typeCode'
};


Core.customize.deleteProductAttr = function() {
    var grid = Core.getCmp('productAttribute', CORE.CMP_TYPE_GRID);
    var selectionModel = grid.grid.getSelectionModel();
    var records = selectionModel.getSelections();
    grid.grid.stopEditing();
    if(records && records.length > 0) {
        for(var i = 0; i < records.length; i++) {
            if(records[i].data['isMandatory'] == 'Y'){
                Core.Msg.warning('STYLE_053');
                return;
            }
            records[i].data['deleted'] = "deleted";
        }
        grid.grid.store.fireEvent("datachanged", grid.grid.store);
        Core.GridUtil.addToModifiedGrids('productAttribute');
    }else {
        Core.Msg.warning('STYLE_036');
    }
};


Core.customize.isReadonlyField = function(p1,p2){
    var ds = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
    var defaultReadonlyFields = p2 || [];
    Core.customize.readOnlyFieldsWhenNotReg = ['apVendorName$0','apStyleStatusId$0','stylePlaceholderNo$0','stylePlacholderName$0'];
    Core.customize.readOnlyFieldsWhenRegInPro = ['vendorStyleNo$0','description$0','apVendorName$0','apStyleStatusId$0','stylePlaceholderNo$0','stylePlacholderName$0','seasonId$0',
                                                 'rangeId$0','estPrice$0','packageTypeId$0','unitsPerInner$0','innersPerOuter$0','unitsPerOuter$0','oheight$0','owidth$0',
                                                 'olength$0','grossWeight$0','innerCartonHeight$0','innerCartonWidth$0','innerCartonLength$0','innerCartonWeight$0','iheight$0',
                                                 'iwidth$0','ilength$0','prodWeight$1','fragile$0','temperatureControlled$0','dangerousGoods$0','dgClass$0','hazmatNumber$0',
                                                 'unNumber$0','packagingGroup$0','deptId$0','productName$0','webName$0','productFeatures$0','arthurDesc$0','colorProductTypeId$0',
                                                 'likeProduct$0','assortmentPlanId$0','posDesc$0','colorSplLine1$0','colorSplLine2$0','colorBarcodeTicketId$0','colorBarcodeColour$0',
                                                 'colorBarcodeDesc1$0','colorBarcodeDesc2$0','colorModelNo$0','featureTicketDesc1$0','featureTicketDesc2$0','featureTicketDesc3$0',
                                                 'featureTicketDesc4$0','featureTicketDesc5$0','bulkyItem$0','targetExclusive$0','onlineExclusive$0','minPresDepth$0','onShowDate$0','custItemDesc$0','offShowDate$0',
                                                 'styleNo$0','outerCartonId$0'];
    Core.customize.readOnlyFieldsWhenReg = ['vendorStyleNo$0','description$0','apVendorName$0','apStyleStatusId$0','stylePlaceholderNo$0','stylePlacholderName$0',
                                            'estPrice$0','custItemDesc$0','iheight$0','iwidth$0','ilength$0','prodWeight$1','offShowDate$0'];
    if(!Ext.isEmpty(ds)){
        if(ds.getValue('productRegStatusCode') == 'NEW' || ds.getValue('productRegStatusCode') == 'EXISTING'
            || (ds.getValue('productRegStatusCode') == 'FAILED' && ds.getValue('hasColorRegistered') == 'false')){
            Core.Document.readonly_fields = defaultReadonlyFields.concat(Core.customize.readOnlyFieldsWhenNotReg);
        } else if (ds.getValue('productRegStatusCode') == 'LOCKED'){
            Core.Document.readonly_fields = defaultReadonlyFields.concat(Core.customize.readOnlyFieldsWhenRegInPro);
        } else if (ds.getValue('productRegStatusCode') == 'REGISTERED' || ds.getValue('productRegStatusCode') == 'CHANGED'
            || (ds.getValue('productRegStatusCode') == 'FAILED'  && ds.getValue('hasColorRegistered') == 'true' )){
            Core.Document.readonly_fields = defaultReadonlyFields.concat(Core.customize.readOnlyFieldsWhenReg);
        }

    }
};
Core.addListener(CORE.EVENT_CUSTOMIZE_READONLY,Core.customize.isReadonlyField);

Core.customize.setSizeGirdRecordReadonly = function(isReadonly){
    var sizeGid = Core.getCmp(Core.customize.STYLE_SIZE_GRID_ID, CORE.CMP_TYPE_GRID);
    if (Ext.isEmpty(sizeGid)) {
        return;
    }
    var isGridReadonly = (isReadonly === true);
    sizeGid.setReadonly(isGridReadonly);
};

Core.customize.setGridBtnsReadonly = function(gridId, isReadonly){
    var grid = Core.getCmp(gridId, CORE.CMP_TYPE_GRID);
    if (Ext.isEmpty(grid)) {
       return;
    }
    var gridButtons = document.getElementById(gridId + 'GridButtons');
    if (gridButtons) {
        gridButtons.style.display = isReadonly ? 'none':'block';
    }
};

Core.addListener(CORE.EVENT_AFTER_SET_TAB_CONTENT, function(params1, params2){
    var ds = Core.getClientDS();
    if(params2.tab  === 'tab_colorsize'){
        if(ds.getValue('productRegStatusCode') == 'NEW' || ds.getValue('productRegStatusCode') == 'EXISTING'
            || (ds.getValue('productRegStatusCode') == 'FAILED' && ds.getValue('hasColorRegistered') == 'false')){
//            Core.customize.setSizeGirdRecordReadonly(false);
            Core.customize.setSizeGirdBtnsReadonly();
            Core.customize.setGridBtnsReadonly('colors', false);
            Core.customize.setGridBtnsReadonly('keycodes', false);
        } else if (ds.getValue('productRegStatusCode') == 'LOCKED'){
//            Core.customize.setSizeGirdRecordReadonly(true);
            Core.customize.setSizeGirdBtnsReadonly();
            Core.customize.setGridBtnsReadonly('colors', true);
            Core.customize.setGridBtnsReadonly('keycodes', true);
        } else if (ds.getValue('productRegStatusCode') == 'REGISTERED' || ds.getValue('productRegStatusCode') == 'CHANGED'
            || (ds.getValue('productRegStatusCode') == 'FAILED'  && ds.getValue('hasColorRegistered') == 'true' )){
//            Core.customize.setSizeGirdRecordReadonly(true);
            Core.customize.setSizeGirdBtnsReadonly();
            Core.customize.setGridBtnsReadonly('colors', false);
            Core.customize.setGridBtnsReadonly('keycodes', false);
        }
    }
    if(params2.tab  === 'tab_keycode'){
        if(Core.customize.current_style_prod_reg_status == 'LOCKED' || Core.customize.current_style_prod_reg_status == 'REGISTERED'){
            Core.customize.setGridBtnsReadonly('productAttribute', true);
            Core.customize.setGridBtnsReadonly('assortmentPlan', true);
        } else {
            Core.customize.setGridBtnsReadonly('productAttribute', false);
            Core.customize.setGridBtnsReadonly('assortmentPlan', false);
        }
        if(!Core.Document.DOC_ID){
            Core.customize.setGridBtnsReadonly('productAttribute', false);
            Core.customize.setGridBtnsReadonly('assortmentPlan', false);
        }
    }
});

Core.customize.validateProductAttributeBeforeRegister = function() {
    if(!Core.customize.register) {
        return;
    }
    Ext.Ajax.request({
        url : Core.base + 'validate_style_productAttribute_before_register_json.action',
        method : 'POST',
        params : { "restrictions['msc.parentId']" : Core.Document.DOC_ID},
        success:function(response){
            var jsonData = Ext.util.JSON.decode(response.responseText);
            var len = jsonData.totalRecords;
            var warningMsg="<ol style='list-style-type:demical;'>";
            var isMoreThanOneWarning = false;
            if(len > 0){
                for (var i = 0; i < len; i++){
                      var typeCode = jsonData.records[i]['typeCode'].trim();
                      var subTypeCode = jsonData.records[i]['subTypeCode'].trim();
                      var codeName = jsonData.records[i]['codeName'].trim();
                      var styleValue = jsonData.records[i]['styleValue'].trim();

                      if(typeCode!=undefined && subTypeCode!=undefined && codeName!=undefined
                              && typeCode!="" && subTypeCode!="" && codeName!=""){
                          if(styleValue!= codeName){
                              var costingDisplay;
                              if(subTypeCode=="Channel Event Type"){
                                  costingDisplay="Supply Chain Event";
                              }else if(subTypeCode=="Country of Origin"){
                                  costingDisplay="Country of Origin";
                              }else if(subTypeCode=="Port of Loading"){
                                  costingDisplay="Port of Loading";
                              }
                              if(costingDisplay!=undefined &&costingDisplay.trim()!=""){
                                  warningMsg += '\<li style="margin-left:52px;"\>\<strong style="font-weight:bold; font-size:11;"\>Costing > '+ costingDisplay+' > '+styleValue+'\</strong\> <span style="color:red;">is different to the value assigned in the </span> <strong style="font-weight:bold;font-size:11;">Keycode > Product Attribute Sub-Type: '+ subTypeCode+' > '+codeName+"</strong>\</li\><br\>";
                              }
                          }
                }
            }

        }
        warningMsg+="\</ol\>";
        if(warningMsg!="<ol style='list-style-type:demical;'>\</ol\>" && warningMsg!=undefined){
            Core.Msg.confirm(warningMsg,
                    function() { // [yes]
                Core.customize.styleRegister();
            },
            function() { // [No]
                Ext.MessageBox.hide();
                Core.customize.register = false;
                return;
            }
            );
        } else {
            Core.customize.styleRegister();
        }
        },
        failure:function(){
            Core.customize.register = false;
            console.debug('fail to validate the product attribute');
        },
        scope : this
    });
}

Core.customize.styleRegister = function() {
    if(Core.customize.register) {
        Core.customize.register = false;
        Ext.MessageBox.progress("Register Product", "Registering Product", "Initializing...");

        Core.Ajax.request({
            url : Core.base + 'update_style_data.action',
            method : 'POST',
            params : {SP_I_DATA_ID : Core.Document.DOC_ID},
            success : function(response){
                    var docForm = {
                        docId : Core.Document.DOC_ID,
                        _DOC_OBJ_ID	: Core.Document.FORM_ID,
                        _DOC_STATUS	: Core.getClientDS().getValue('status')
                    };
                    Core.Ajax.request({
                        url : Core.base + 'style_register.action',
                        method : 'POST',
                        params : docForm,
                        success : function(response){
                            Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_COLOR_GRID_ID);
                            Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_SIZE_GRID_ID);
                            Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_KEYCODE_GRID_ID);
                            Core.Document.Event.fire("refresh");
                        },
                        failure : function(){
                            Ext.MessageBox.updateProgress(1, "Failed to register Keycode.");
                            setTimeout('Ext.MessageBox.hide()', 300);
                        },
                        scope : this
                    });
            },
            failure : function(){
                Ext.MessageBox.updateProgress(1, "Failed to register Keycode.");
                setTimeout('Ext.MessageBox.hide()', 300);
            },
            scope : this
        });
    }
}


Core.Document.regCustomizeAction("register", function(){
          Ext.MessageBox.progress("Register Product", "Registering Product", "Initializing...");
          if (Core.Document.hasModified() || Core.customize.isColorKeycodePageModified()) {
              Core.Document.doActionById('save');
              Core.customize.register = true;
              //Core.customize.validateProductAttributeBeforeRegister();
          } else {
              Core.customize.register = true;
              Core.customize.validateProductAttributeBeforeRegister();
          }
}, false);
Core.addListener(CORE.EVENT_AFTER_SAVE, Core.customize.validateProductAttributeBeforeRegister);
Core.Document.addNotAskSavingAction("register");

Core.customize.styleClearFactory = function(){
//clear the factory informaction
   var clientDs = Core.getCmp(CORE.CLIENT_DATA_SOURCE, CORE.CMP_TYPE_DATA_SOURCE);
clientDs.updateValue('factoryId', '');
clientDs.updateValue('factoryName', '');
};

Core.customize.beforeDeleteColorSizeItem = function() {
    var errorMsg = null;
    var result = true;
    var colorGrid = Core.getCmp(Core.customize.STYLE_COLOR_GRID_ID, CORE.CMP_TYPE_GRID);
    var colorRecord = colorGrid.grid.getSelectedRecords();
    for (var i = 0; i < colorRecord.length; i++) {
      var record = colorRecord[i];
      if(record.get("productRegStatus") == 'REGISTERED'){
          errorMsg = Core.Msg.getText('STYLE_COLORSIZE_K_004');
          result = false;
      }
      if (!result && !Ext.isEmpty(errorMsg)) {
          Core.Msg.warning(errorMsg);
          break;
      }
    }
    return result;
};
Core.addCmpListener(Core.customize.STYLE_COLOR_GRID_ID, CORE.EVENT_GRID_BEFORE_DELETE, Core.customize.beforeDeleteColorSizeItem);



Core.customize.techAuditRenderer = function(config) {
    return function(value, p, r, rowIndex, i, ds){
       var markup = '&nbsp;';
       if(!Ext.isEmpty(value)) {
               var techAuditClass = '';
               switch(value.toUpperCase()){
                case 'R' :
                case 'RED' :
                    techAuditClass = 'techAudit_R';
                    break;
                case 'G' :
                case 'GREEN' :
                    techAuditClass = 'techAudit_G';
                    break;
                case 'AMBER':
                case 'A' :
                    techAuditClass = 'techAudit_A';
                    break;
                case 'NA' :
                    techAuditClass = 'techAudit_N';
                    break;
               }
               markup = '<div id="tabShipmentTechAuditResult" class=' + techAuditClass + '>&nbsp;</div>';
        }
       return markup;
    };
};

Core.addListener(CORE.EVENT_GRID_AFTER_SET_BORDER, function(eventName, p){
    //p is for parameter.
    var quotes = Core.getCmp('quotes', CORE.CMP_TYPE_GRID);
    if (quotes && quotes.grid.isVisible()) {
        var record = p.r.data;
        var color = record['escAuditResultColor'] || '';
        if (color.toLocaleUpperCase() == 'WHITE' || color.toLocaleUpperCase() == '#FFFFFF') {
            color = '#E0E0E0';
        }
        var colorCss = ' style="color:' + color + '"';
        var columnId = p.config.columnId;
        if(columnId == 'style__quotes__escAuditResult'){
            p.p.attr = colorCss;
        }
    }
    if(Core.Document.isEditableTab('tab_colorsize')){
        var columnId = p.config.columnId;
        var record = p.r.data;
        var border = 'style="border:1px solid #7F9DB9;"';
        if(columnId == 'style__colors__sellColor'){
            p.p.attr = border;
        }
        if(columnId == 'style__sizes__varPackaStdCartonId'){
            p.p.attr = border;
        }
        if(columnId == 'style__sizes__varPackbStdCartonId'){
            p.p.attr = border;
        }
        if(columnId == 'style__sizes__varPackcStdCartonId'){
            p.p.attr = border;
        }
        if(columnId == 'style__sizes__varPackdStdCartonId'){
            p.p.attr = border;
        }
        if(columnId == 'style__keycodes__estOrderBdBy') {
            if (record['status'] == 'Inactive' || Core.customize.isReadonlyEstOrderQtyAndBreakdown()){
                p.p.attr = '';
            } else {
                p.p.attr = border;
            }
        }
        if(columnId == 'style__colors__estOrderQty') {
            if (Core.customize.isReadonlyEstOrderQtyAndBreakdown()){
                p.p.attr = '';
            } else {
                p.p.attr = border;
            }
        }
    }
});

Core.addCmpListener('colors',CORE.EVENT_GRID_BEFORE_EDIT,function(baseParam,e){
    var fields = ['sellColor', 'packaStdCartonId','packbStdCartonId','packcStdCartonId','packdStdCartonId','packeStdCartonId','packfStdCartonId','packgStdCartonId','packhStdCartonId','packiStdCartonId','packjStdCartonId'];
    if(Core.ArrayUtil.contain(fields, e.field)) {
        return true;
    }
    if (e.field == 'estOrderQty') {
        if (Core.customize.isReadonlyEstOrderQtyAndBreakdown()) {
            return false;
        }
        return true;
    }
});

Core.addCmpListener('sizes',CORE.EVENT_GRID_BEFORE_EDIT,function(baseParam,e){
    var fields = ['varPackaStdCartonId','varPackbStdCartonId','varPackcStdCartonId','varPackdStdCartonId'];
    if(Core.ArrayUtil.contain(fields, e.field)) {
        return true;
    }
});

Core.addCmpListener('keycodes',CORE.EVENT_GRID_BEFORE_EDIT,function(baseParam,e){
    var fields = ['estOrderBdBy'];
    if(Core.ArrayUtil.contain(fields, e.field)) {
        if (e.record.data['status'] == 'Inactive') {
            return false;
        }
        if (e.record.data['status'] == 'Active') {
            if (e.field == 'estOrderBdBy' && Core.customize.isReadonlyEstOrderQtyAndBreakdown()) {
                return false;
            } else {
                return true;
            }
        }
    }

});

Core.customize.applyToAllColors = function(){
    if (Core.customize.isNewStyle()) {
        Core.Msg.warning('STYLE_013');
        return;
    }
    var ds = Core.getClientDS();
    var doApplyToAllColors = function(){
        Core.Msg.confirm('STYLE_054',
                function() { // [yes]
                      Ext.MessageBox.progress("Apply Default to All Colours", "Apply Default to All Colours", "...");
                      Core.Document.requestBizLogicAction('apply_to_all_colors.action', {
                          id            : ds.getValue('id'),
                          version       : ds.getValue('version'),
                          EntityName    : ds.getValue('$type$'),
                          FormId        : Core.Document.FORM_ID,
                          SP_I_DATA_ID : Core.Document.DOC_ID,
                          _DOC_STATUS : status,
                          _DOC_OBJ_ID : Core.Document.FORM_ID}, function() {
                              Core.Document.Event.fire("refresh");
                          }
                      );
               },
               function() { // [No]
                    return;
               }
       );
    }
    if (Core.Document.hasModified() || Core.customize.isColorKeycodePageModified()) {
         Core.Msg.confirm("CBXMENU_CUSTOM_001",
                 function() { // [yes] - continue and discard the changes
                     return;
                 },
                 function(){
                     doApplyToAllColors();
                 }
             );
    } else {
        doApplyToAllColors();
    }
};

Core.addListener(CORE.EVENT_AFTER_SAVE, function(){
    Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_SIZE_GRID_ID);
    Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_COLOR_GRID_ID);
    Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_KEYCODE_GRID_ID);
    Core.GridUtil.addToModifiedGrids('colorSpecificCosts');
    Core.GridUtil.addToModifiedGrids('attachments');
    Core.GridUtil.addToModifiedGrids('colorRatioPack');
    Core.GridUtil.addToModifiedGrids('variationSolidPacks');
});


Core.customize.activeColorSizes = function() {
    var clientDS = Core.getClientDS();
    var grid = Core.getCmp(Core.customize.STYLE_KEYCODE_GRID_ID, CORE.CMP_TYPE_GRID);
    var selectRows = grid.grid.getSelectionModel().getSelections();
    if(selectRows.length == 0) {
        Core.Msg.warning('STYLE_047');
        return;
    }
    for (var i=0; i < selectRows.length; i++) {
        if (selectRows[i].data['readonly'] != 'true') {
            selectRows[i].set('status', 'Active');
        }
    }
    Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_KEYCODE_GRID_ID);
};
Core.customize.inactiveColorSizes = function() {
    var clientDS = Core.getClientDS();
    var grid = Core.getCmp(Core.customize.STYLE_KEYCODE_GRID_ID, CORE.CMP_TYPE_GRID);
    var selectRows = grid.grid.getSelectionModel().getSelections();
    if(selectRows.length == 0) {
        Core.Msg.warning('STYLE_047');
        return;
    }
    for (var i=0; i < selectRows.length; i++) {
        if (selectRows[i].data['readonly'] != 'true') {
            selectRows[i].set('status', 'Inactive');
            selectRows[i].set('estOrderBdBy', '');
        }
    }
    Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_KEYCODE_GRID_ID);
};

Core.addCmpListener(Core.customize.STYLE_SIZE_GRID_ID, CORE.EVENT_GRID_AFTER_CELL_EDIT, function(p,e){
   if(e.field == 'pack2A' || e.field == 'pack2B'
       || e.field == 'pack2C' || e.field == 'pack2D' || e.field == 'pack2E' || e.field == 'pack2F'
       || e.field == 'pack2G' || e.field == 'pack2H' || e.field == 'pack2I' || e.field == 'pack2J'
       || e.field == 'variationaPack' || e.field == 'variationaMinQty'
       || e.field == 'variationbPack' || e.field == 'variationbMinQty'
       || e.field == 'variationcPack' || e.field == 'variationcMinQty'
       || e.field == 'variationdPack' || e.field == 'variationdMinQty'){
       Core.customize.refreshSizeQTY = true;
   }
});
Core.addCmpListener(Core.customize.STYLE_SIZE_GRID_ID,CORE.EVENT_GRID_AFTER_LOAD, function(){
    var clientDs = Core.getClientDS();
    if (!clientDs.isModifiedGrids([Core.customize.STYLE_SIZE_GRID_ID])) {
        Core.customize.refreshSizeQTY = false;
    }
});

Core.customize.popupCode = function(args){
    var config = {
               id          : 'productAttributeCodePopuped',
               srcGridId   : '',
               srcRowIndex : args.rowIndex,
               srcRecord   : args.record
           };
   Core.WindowUtil.popupAddingExistedItemsWindow(config);
};

Core.customize.codePopupedSubmit = function() {
   var win = Core.getCmp('productAttributeCodePopuped', CORE.CMP_TYPE_WINDOW);
   var srcGrid = Core.getCmp('productAttributeCodePopuped', CORE.CMP_TYPE_GRID);
   var srcRecord = srcGrid.grid.getSelectedRecord();
   if (!srcRecord) {
       Core.Msg.warning('STYLE_061');
       return;
   }
   var targetGrid = Core.getCmp('productAttribute', CORE.CMP_TYPE_GRID);
   var targetRecord = targetGrid.getExtStore().getAt(win.config.srcRowIndex);
   targetRecord.set('atrCode', srcRecord.data['ref1']);
   targetRecord.set('codeId', srcRecord.data['id']);
   targetRecord.set('codeCode',srcRecord.data['code']);
   targetRecord.set('codeName',srcRecord.data['name']);
   Core.GridUtil.addToModifiedGrids('productAttribute');
   Core.WindowUtil.clearSearchFields('productAttributeCodePopuped');
   win.hide();
};
Core.customize.removeSubGridChangeFromClientDS = function(gridDsName) {
    var dsKeys = [];
    var clientDs = Core.getClientDS();
    dsKeys = clientDs.getExtDs().keys;
    for(var i = 0; i < dsKeys.length;){
        if(dsKeys[i].indexOf('__' + gridDsName + '__') >= 0){
            clientDs.removeByKey(dsKeys[i]);
            continue;
        }
        i++;
    }
};

Core.customize.updateCostingExchangeRate = function(fromCurrency){
    var params = {};
    params['restrictions["ml1.c1$eq$1"]'] = fromCurrency;
    params['restrictions["ml1.c2$eq$1"]'] = 'AUD';
    Ext.Ajax.request({
        url    : Core.base + 'get_exchange_rate_base_on_currency.action',
        method : 'POST',
        success : function(response) {
                        var jsonData = Ext.util.JSON.decode(response.responseText);
                        var clientDs = Core.getClientDS();
                        var records = jsonData.records;
                        if (records && records.length > 0) {
                            var audExchangeRate = records[0].value1;
                            clientDs.updateValue('exchangeRateE', new Number(audExchangeRate).toFixed(4));
                        } else {
                            clientDs.updateValue('exchangeRateE', '');
                        }
                  },
        failure : function() {
                      console.debug('fail to get the exchange rate');
                  },
        scope    : this,
        params   : params
    });

    var params = {};
    params['restrictions["ml1.c1$eq$1"]'] = fromCurrency;
    params['restrictions["ml1.c2$eq$1"]'] = 'NZD';
    Ext.Ajax.request({
        url    : Core.base + 'get_exchange_rate_base_on_currency.action',
        method : 'POST',
        success : function(response) {
                        var jsonData = Ext.util.JSON.decode(response.responseText);
                        var clientDs = Core.getClientDS();
                        var records = jsonData.records;
                        if (records && records.length > 0) {
                            var nzdExchangeRate = records[0].value1;
                            clientDs.updateValue('exchangeRateA', new Number(nzdExchangeRate).toFixed(4));
                        } else {
                            clientDs.updateValue('exchangeRateA', '');
                        }
                  },
        failure : function() {
                      console.debug('fail to get the exchange rate');
                  },
        scope    : this,
        params   : params
    });
};

Core.ComponentMgr.onAvailable('outerCartonId$0','cComboBox', function(combo){
    combo.on('select', function(){
      var currentRecord = Core.Document.getDDRecord('outerCartonId', 'id', this.getValue());
      if(currentRecord){
            var clientDs = Core.getClientDS();
            var oheight = currentRecord['ref1'];
            var owidth = currentRecord['ref2'];
            var olength = currentRecord['ref3'];
            clientDs.updateValue('oheight', new Number(oheight).toFixed(4));
            clientDs.updateValue('owidth', new Number(owidth).toFixed(4));
            clientDs.updateValue('olength', new Number(olength).toFixed(4));
      }
    },combo);
});
Core.customize.unregister = function () {
    var colorGrid = Core.getCmp(Core.customize.STYLE_COLOR_GRID_ID, CORE.CMP_TYPE_GRID);
    if (!!!colorGrid) {
        Core.Msg.warning('Please select at least one colour.');
        return;
    }
    var colorRecord = colorGrid.grid.getSelectedRecords();
    if (colorRecord.length == 0) {
        Core.Msg.warning('Please select at least one colour.');
        return;
    }
    var colorIds = '';
    for (var i = 0; i < colorRecord.length; i++) {
        colorIds += colorRecord[i].data.id + ',';
        if (colorRecord[i].data.productRegStatus != 'REGISTERED') {
            Core.Msg.warning('Only can unregister the Registered colour.');
            return;
        }
    }
    Core.Msg.confirm('STYLE_063',
            function() { // [yes]
                Ext.MessageBox.progress("Unregister", "Unregister", "Unregister...");
                Ext.MessageBox.updateProgress(0.5, "Getting server response...");
                Core.Ajax.request({
                    url : Core.base + 'unregister_style_colors.action',
                    method : 'POST',
                    params : {SP_I_COLOR_IDS : colorIds, SP_I_DATA_ID : Core.Document.DOC_ID},
                    success : function(response){
                        Core.GridUtil.addToModifiedGrids(Core.customize.STYLE_COLOR_GRID_ID);
                        Core.GridUtil.addToModifiedGrids("keycodes");
                        Core.GridUtil.addToModifiedGrids("colorRatioPack");
                        Core.GridUtil.addToModifiedGrids("ratioPackDetails");
                        Core.GridUtil.addToModifiedGrids("variationSolidPacks");
                        Core.Document.Event.fire("refresh");
                    },
                    failure : function(){
                        Ext.MessageBox.updateProgress(1, "Failed to unregister Colours.");
                        setTimeout('Ext.MessageBox.hide()', 300);
                    },
                    scope : this
                });
           },
           function() { // [No]
                return;
           }
     );

};


Core.Document.regCustomizeAction("unregister", function(){
    Core.customize.unregister();
}, true);


Core.customize.buttonFormat = function (config) {
    return function buttonFormat(value, p, r, rowIndex, i, ds) {
        var cGrid = ds.cGrid;
        var cGridIsReadonly = (cGrid && cGrid.isReadonly()) ? true : false;
        var cGridIsReadonly = cGridIsReadonly || eval(r.get('readonly'));
        var buttonIsEditable = (config.isEditable === true);
        var fn = Core.FieldFormat.renderObjMap[config.columnId];
        if (fn != null) {
            return fn(value, p, r, rowIndex, i, ds,config);
        }
        var name = p.id;
        var id = 'ext-' + name + r.data[ds.fields.get(0).name] + 'Btn';
        YAHOO.util.Event.onContentReady(id, (function(id) {
            return function() {
                var trigger = Ext.getDom(id);
                var fn = eval(config.script);

                trigger.onclick = function(){
                    fn({record: r, rowIndex: rowIndex, column: name, gridId: ds.id});
                };
            };
        })(id));

        var markup = '<input type="button" class="inline_button" name="' + ds.name + 'Btn" id="'
        + id + '" value="' + config.displayLabel + '">';
        return markup;
    };
};

Core.customize.getRecordInStore = function(store, property, value) {
    var record = null;
    if (Ext.isEmpty(store) || Ext.isEmpty(property) || Ext.isEmpty(value) ) {
        return record;
    }
    var index = store.findBy(function(record, recordId){
            if(record.data[property] == value) {
               return true;
            }
        }
    );
    if(index != -1) {
        record = store.getAt(index);
    };
    return record;
};

Core.customize.buildKeycodeConfig = function(id, rowIndex) {
    var config = {};
    config.id = id;
    var grid = Core.getCmp('keycodes', CORE.CMP_TYPE_GRID);
    var record = grid.getExtStore().getAt(rowIndex);
    if (record.get('deleted') == 'deleted') {
        alert('can not set APN to the deleted Colour / Size.');
        return false;
    }
    config.keycodeRecord = grid.getExtStore().getAt(rowIndex);
    return config;
};

Core.customize.setKeycodeApnPopupBtnReadonly = function(isReadonly){
    var el = document.getElementById('keycodeApnPopupBtn');
    if(el){
        el.style.display = isReadonly ? 'none':'block';;
    }
    var grid = Core.getCmp('StyleKeycodeApn', CORE.CMP_TYPE_GRID);
    if (grid) {
        grid.setReadonly(isReadonly);
    }
};

Core.customize.setPopupBtnReadonlyBeforeShow = function(record){
    var isRecordReadonly = eval(record.get('readonly'));
    var editable = Core.Document.isEditableTab('tab_colorsize');
    var autoAssignApnIsChecked = Core.customize.autoAssignApnIsChecked();
    if(!editable || isRecordReadonly || autoAssignApnIsChecked){
        Core.customize.setKeycodeApnPopupBtnReadonly(true);
    } else {
        Core.customize.setKeycodeApnPopupBtnReadonly(false);
    }
};

Core.customize.popupKeycodeApn = function(args) {
    var record = args.record;
    var keycodeId = record.data['id'];
    var keycodeVersion = record.data['version'];
    if (Core.customize.keycodeRetrievedApns[keycodeId]) {
        // Keycode is new or Apn data retrieved before
        var config = Core.customize.buildKeycodeConfig('KeycodeApn', args.rowIndex);
        if (config) {
            Core.KeycodeApnWindow.show(config);
            Core.customize.setPopupBtnReadonlyBeforeShow(config.keycodeRecord);
        }
    } else {
        var params = {};
        params['entityName'] = 'KeycodeApn';
        params['restrictions["parentId"]'] = keycodeId;
        // below three params are just for retrieving it back in success handler function
        params['rowIndex'] = args.rowIndex;
        params['keycodeId'] = keycodeId;
        params['keycodeVersion'] = keycodeVersion;
        params['limit'] = 500;

        Ext.Ajax.request({
            url : Core.base + "document_all_list_json.action",
            success: function(response, options){
                var json = Ext.util.JSON.decode(response.responseText);

                // Save keycodeApn to store
                var store = Core.customize.getKeycodeApnStore();
                for (var k = 0; k < json.records.length; k++) {
                    var record = new KeycodeApnRecord({
                        deleted : 0,
                        parentId : options.params.keycodeId,
                        parentVer : options.params.keycodeVersion,
                        id : json.records[k].id,
                        version : json.records[k].version,
                        apn : json.records[k].apn
                    });
                    if (store.find('id', record.data['id']) < 0) {
                        store.add([record]);
                    }
                }

                if (!Core.customize.keycodeRetrievedApns[keycodeId]) {
                    Core.customize.keycodeRetrievedApns[keycodeId] = {};
                }

                var config = Core.customize.buildKeycodeConfig('KeycodeApn', args.rowIndex);
                if (config) {
                    Core.KeycodeApnWindow.show(config);
                    Core.customize.setPopupBtnReadonlyBeforeShow(config.keycodeRecord);
                }
            },
            failure : function(response, options) {
                Core.Document.handleError(response, false);
            },
            params : params,
            scope : this
        });
    }

};


Core.customize.getKeycodeApnStore = function(){
    var keycodeApnStore = Core.getCmp('keycodeApn', CORE.CMP_TYPE_STORE);

    if (!keycodeApnStore) {
        var fieldsData = [];
        var fieldsDef = [{name : 'deleted'}, {name: 'parentId'}, {name: 'id'}, {name : 'version'}, {name : 'apn'}, {name : 'parentVer'}];

        keycodeApnStore = new Ext.data.SimpleStore({
            id      : 'keycodeApn',
            fields  : fieldsDef,
            data    : fieldsData
        });
        Core.regCmp(keycodeApnStore, CORE.CMP_TYPE_STORE);
    }
    return keycodeApnStore;
};

Core.customize.clearStores = function() {
    var keycodeApnStore = Core.getCmp('keycodeApn', CORE.CMP_TYPE_STORE);
    if (keycodeApnStore) {
        keycodeApnStore.removeAll();
        Core.customize.keycodeRetrievedApns = new Array();
    }
};

Core.addListener(CORE.EVENT_AFTER_NEW, Core.customize.clearStores);

Core.addListener(CORE.EVENT_CUSTOMIZE_SET_DATA, Core.customize.clearStores);

/////////////// keycodeApnWindow ///////////////
Ext.namespace('Core.KeycodeApnWindow');
CORE.CMP_TYPE_KEYCODE_APN_WIN = 'Core.KeycodeApnWindow';
Core.customize.keycodeApnNewItemId = 0;

var KeycodeApnRecord = Ext.data.Record.create([
                                              {name: 'deleted', mapping: 'deleted'},
                                              {name: 'parentId', mapping: 'parentId'},
                                              {name: 'parentVer', mapping: 'parentVer'},
                                              {name: 'id', mapping: 'id'},
                                              {name: 'version', mapping: 'version'}
                                          ]);


Core.KeycodeApnWindow = function(config) {
    this.id = 'KeycodeApnWindow';
    this.config = config || {};
    this.window = this.createWindow();
    this.grid;
    this.store;
    this.columnModel;
    this.selectionModel = new Ext.grid.CheckboxSelectionModel({singleSelect : false, keepSelections: true});

    Core.regCmp(this, CORE.CMP_TYPE_KEYCODE_APN_WIN);
};

Core.KeycodeApnWindow.show = function(config) {
    var obj = Core.getCmp('KeycodeApnWindow', CORE.CMP_TYPE_KEYCODE_APN_WIN);
    if (obj) {
        obj.resetValues(config);
        obj.createStore();
        if (obj.grid) {
            obj.grid.reconfigure(obj.store, obj.columnModel);
            obj.grid.getSelectionModel().clearSelections();
        }
        obj.show();
    } else {
        obj  = new Core.KeycodeApnWindow(config);
        obj.resetValues(config);
        obj.show();
        obj.window.addListener('move', Core.WindowUtil.winMoveHandler);
    }
};

Core.KeycodeApnWindow.prototype.resetValues = function(config) {
    this.keycodeRecord = config.keycodeRecord;
    this.keycodeId = this.keycodeRecord.data['id'];
    if (this.keycodeId.indexOf('NEW') > -1) {
        this.keycodeVersion = 'NEW';
    } else {
        this.keycodeVersion = this.keycodeRecord.data['version'];
    }
};

Core.KeycodeApnWindow.prototype.createColumnModel = function() {
    var columnModelParams = [];
    columnModelParams[0] = this.selectionModel;
    columnModelParams[columnModelParams.length] = {
        id           : 'apn',
        dataIndex    : 'apn',
        header       : 'APN ',
        sortable     : true,
        renderer     : Core.FieldFormat.textFieldFormat({
            columnId     : 'apn'
        }),
        editor       : Core.GridUtil.createGridEditor({
            id           : 'apn',
            type         : 'TextField'
        }),
        width        : 150
    };
    columnModelParams[columnModelParams.length]= {
        id           : 'blank',
        header       : '',
        dataIndex    : 'blank',
        width        : 120
    };

    this.columnModel = new Core.grid.ColumnModel(columnModelParams);
};


Core.KeycodeApnWindow.prototype.show = function() {
    this.window.show();
};

Core.KeycodeApnWindow.prototype.createWindow = function() {
    var win = new Ext.Window({
        title : 'APN',
        width : CORE.STANDARD_WIN.WIDTH,
        height: CORE.STANDARD_WIN.HEIGHT,
        shadow:false,
        closeAction: 'hide',
        closable : false,
        resizable: false,
        plain:false,
        modal: true,
        autoScroll: true,
        layout : 'form',
        buttons : [
            {
                text : 'OK',
                scope : this,
                handler : function() {
                    this.saveHandler();
                }
            },
            {
                text : 'Cancel',
                scope : this,
                handler : function() {
                    this.close();
                }
            }
        ],
         autoLoad : {
            url : Core.base + "jsp/coles/popupWin/keycodeApnPopupWin.jsp",
            callback : function(el) {
                this.createAddBtn();
                this.createDeleteBtn();
                this.resetValues(this.config);
                this.createColumnModel();
                this.createGrid();
                Core.customize.setPopupBtnReadonlyBeforeShow(this.config.keycodeRecord);
            },
            scripts : true,
            scope : this
        }
    });
    return win;
};

Core.KeycodeApnWindow.prototype.saveHandler = function() {
    if (Ext.isEmpty(this.store)) {
        return;
    }
    for (var i = 0; i < this.store.getCount(); i++) {
        var record = this.store.getAt(i);
        if (typeof record.data['apn'] == 'undefined' || isEmptyString(record.data['apn'].trim())) {
            Core.Msg.warning('Please select input the apn value.');
            return;
        }
    }
    this.assignGridValueToStore();
    this.close();
};


Core.KeycodeApnWindow.prototype.assignGridValueToStore = function() {
    // Update to the keycodeApn store for final saving
   //alert('assignGridValueToStore');
   var clientDs = Core.getClientDS();
   var keycodeApnStore = Core.customize.getKeycodeApnStore();
   var keycodeId = this.keycodeRecord.get('id');

   if (Ext.isEmpty(keycodeApnStore) || Ext.isEmpty(this.store)) {
       return;
   }

  //keycodes__f4a34a674469895e84cd0a5da4a47930--1__keycodeApn__NEW1--NEW__apn=11222344
  // add the new and update apn to the clientDs
   for (var i = 0; i < this.store.getCount(); i++) {
        var record = this.store.getAt(i);
        var keycodeApnRecord = Core.customize.getRecordInStore(keycodeApnStore, 'id', record.data['id']);
        if (!Ext.isEmpty(keycodeApnRecord) && keycodeApnRecord.get('deleted') != 'deleted') {
            if(keycodeApnRecord.get('apn') != record.data['apn']){
                clientDs.add('keycodes__' + keycodeId + '--' + this.keycodeRecord.get('version') + '__keycodeApn__' + record.data['id'] + '--' + record.data['version'] + '__apn', record.data['apn']);
            }
            keycodeApnRecord.set('apn', record.data['apn']);
            keycodeApnRecord.set('deleted', '');
        } else {
            keycodeApnRecord = new KeycodeApnRecord({
                deleted : 0,
                parentId : keycodeId,
                parentVer : this.keycodeRecord.get('version'),
                id : record.data['id'],
                version : 'NEW',
                apn : record.data['apn']
            });
            keycodeApnStore.add([keycodeApnRecord]);
            clientDs.add('keycodes__' + keycodeId + '--' + this.keycodeRecord.get('version') + '__keycodeApn__' + record.data['id'] + '--NEW__apn', record.data['apn']);
        }
   }


   // add the delete apn to the clientDs
   for (var i = 0; i < keycodeApnStore.getCount(); i++) {
       var record = keycodeApnStore.getAt(i);
       if (!Ext.isEmpty(record)) {
           var keycodeApnRecord = Core.customize.getRecordInStore(this.store, 'id', record.data['id']);
           if(keycodeApnRecord == null){
               clientDs.add('keycodes__' + keycodeId + '--' + this.keycodeRecord.get('version') + '__keycodeApn__' + record.data['id'] + '--' + record.data['version'] + '__DELETED', 'DELETED');
               record.set('deleted', 'deleted');
           }
       }
   }

   Core.GridUtil.addToModifiedGrids('keycodes');
};

Core.KeycodeApnWindow.prototype.close = function() {
    this.store.destroy();
    this.window.hide();
};


Core.KeycodeApnWindow.prototype.createStore = function() {
    var fieldsDef = [{name : 'id'}, {name : 'version'}, {name : 'apn'}, {name : 'parentId'}];
    var fieldsData = [];

    var keycodeApnStore = Core.customize.getKeycodeApnStore();
    keycodeApnStore.clearFilter(true);
    keycodeApnStore.filter('parentId', this.keycodeId);
    for (var i = 0; i < keycodeApnStore.getCount(); i++) {
        var record = keycodeApnStore.getAt(i);
        if (record.get('deleted') == 'deleted') {
            continue;
        }

        // set dummy data here first.
        fieldsData[fieldsData.length] = [record.get('id'), record.get('version'), record.get('apn'), record.get('parentId')];
    }

    this.store = new Ext.data.SimpleStore({
        id      : 'keycodeApn',
        fields  : fieldsDef,
        data    : fieldsData
    });

};

Core.KeycodeApnWindow.prototype.createGrid = function() {
    this.createStore();

    params = {};
    Ext.apply(params, {
        id         : 'StyleKeycodeApn',
        region     : "center",
        store      : this.store,
        cm         : this.columnModel,
        selModel   : new Ext.grid.CheckboxSelectionModel({singleSelect : false, keepSelections: true}),
        width      : 560,
        height     : 200,
        loadMask   : true,
        clicksToEdit    : 1,
        tbar       : null,
        autoScroll : true,
        autoHeight : true,
        viewConfig : {emptyText : '<p><p><center><h1>No Record</h1></center/>', enableRowBody : true},
        //////////////////////////////////
        //http://extjs.com/forum/showthread.php?t=30739&page=2
        listeners: {
            beforedestroy: function(p) {
                Ext.destroy(p.store.reader);
                delete p.store.reader;
                Ext.destroy(p.store);
                delete p.store;
                Ext.destroy(p.header);
                delete p.header;
                if (p.bwrap) {
                    Ext.destroy(p.bwrap);
                    delete p.bwrap;
                }
            }
        },
        renderTo : 'StyleKeycodeApnsDiv',
        //////////////////////////////////
        frame      : true,
        trackMouseOver : false,
        enableDragDrop : false,
        enableColumnMove : false,
        enableColumnHide : false,
        enableHdMenu : false,
        stripeRows : false,
        autoExpandColumn : false
    });
    this.grid = new Ext.grid.EditorGridPanel(params);
    Core.regCmp(this.grid, CORE.CMP_TYPE_GRID);

};

Core.KeycodeApnWindow.prototype.createAddBtn = function() {
    return new Ext.Button({
            text: 'Add',
            scope: this,
            renderTo: 'addKeycodeApnBtn',
            handler : function() {
                var keycodeApnRecord = Ext.data.Record.create([
                    {name: 'id', mapping: 'id'},
                    {name: 'version', mapping: 'version'},
                    {name: 'parentId', mapping: 'parentId'}
                ]);
                var record = new keycodeApnRecord({
                    id : 'NEW' + (++Core.customize.keycodeApnNewItemId),
                    version : 'NEW',
                    parentId : this.keycodeId
                });
                this.store.add([record]);
            }
        });
};

Core.KeycodeApnWindow.prototype.createDeleteBtn = function() {
    return new Ext.Button({
            text: 'Delete',
            scope: this,
            renderTo: 'deleteKeycodeApnBtn',
            handler : function() {
                var selectionModel = this.grid.getSelectionModel();
                var records = selectionModel.getSelections();
                this.grid.stopEditing();
                if (records && records.length > 0) {
                    // Update to keycodeApn store
                    var keycodeApnStore = Core.customize.getKeycodeApnStore();
                    for (var i = 0; i < records.length; i++) {
                        this.store.remove(records[i]);
                    }
                    Core.GridUtil.addToModifiedGrids('keycodes');
                } else {
                    Core.Msg.warning('Please select at least one row to delete.');
                }
            }
        });
};

Core.customize.sendCGARecommendedEmail = function () {
    Core.Ajax.request({
        url : Core.base + 'send_cga_recommended_email.action',
        method : 'POST',
        params : {},
        success : function(response){
        },
        failure : function(){
        },
        scope : this
    });
};

Core.addListener(CORE.EVENT_AFTER_SAVE, Core.customize.sendCGARecommendedEmail);

Core.customize.setAutoAssignApnReadOnly = function(){
    var clientDs = Core.getClientDS();
    var prodRegStatus = clientDs.getValue('productRegStatusCode');
    if (prodRegStatus == 'FAILED' && clientDs.getValue('hasColorRegistered') == 'false') {
        return;
    }
    Core.customize.refreshKeyCodeGrid();
};
Core.customize.roleAccessForCTB = function() {
    var clientDs = Core.getClientDS();
    var rolesAccessForCTB = clientDs.getValue('roleAccessForCTB');
    var commitmentToBuyCombo = Core.getCmp('commitmentToBuyId$0',CORE.CMP_TYPE_COMBOBOX);
    if (!Core.curUserIsVendor) {
        if (rolesAccessForCTB && commitmentToBuyCombo) {
            var accessRoles = rolesAccessForCTB.split(',');
            for ( var j = 0, len = accessRoles.length; j < len; j++) {
                if (Core.ArrayUtil.contain(Core.curUserRoleCodes, accessRoles[j])) {
                    Core.Document.toggleFieldsEditableById(['commitmentToBuyId$0'], true);
                    return;
                }
            }
        }
    }else{
        var commitmentToBuyId = clientDs.getValue('commitmentToBuyId');
        if(!!commitmentToBuyId){
            var commitmentToBuyObject = Core.Document.getDDEnabledRecord('commitmentToBuyId', 'id', commitmentToBuyId);
            if(!!commitmentToBuyObject && commitmentToBuyObject.ref2 == 'invisible'){
                document.getElementById('display_allEstOrderQtyString$0').style.display = 'none'
            }
        }else{
            document.getElementById('display_allEstOrderQtyString$0').style.display = 'none'
        }
    }
    Core.Document.toggleFieldsEditableById(['commitmentToBuyId$0'],false);
}
Core.addListener(CORE.EVENT_AFTER_SET_TAB_CONTENT, function(params1, params2){
    if(params2.tab  === 'tab_colorsize'){
        Core.customize.setAutoAssignApnReadOnly();
        Core.customize.roleAccessForCTB();
    }
});

Core.customize.changeCommitmentToBuy = function(combo,record){
    var clientDs = Core.getClientDS();
    var commitmentToBuyCode = record.data['code'];
    clientDs.updateDropDownValue('commitmentToBuyId', 'id', record.data['id'], record.data['name']);
    clientDs.updateValue('commitmentToBuyCode', commitmentToBuyCode);
    if (commitmentToBuyCode != 'Approved'){
        if(commitmentToBuyCode == 'Draft'){
            clientDs.updateValue('isCommitmentToBuyApproved', '0');
        }
    }
    var colorGrid = Core.getCmp(Core.customize.STYLE_COLOR_GRID_ID, CORE.CMP_TYPE_GRID);
    var keycodeGrid = Core.getCmp(Core.customize.STYLE_KEYCODE_GRID_ID, CORE.CMP_TYPE_GRID);
    colorGrid.grid.getView().refresh();
    keycodeGrid.grid.getView().refresh();
}


Core.FieldFormat.regCustomizeRender(Core.Document.FORM_NAME + '__colors__estOrderQty', function(value, p, r, rowIndex, i, ds){
    if(Core.curUserIsVendor){
        var clientDs = Core.getClientDS();
        var commitmentToBuyId = clientDs.getValue('commitmentToBuyId');
        if(!!commitmentToBuyId){
            var commitmentToBuyObject = Core.Document.getDDEnabledRecord('commitmentToBuyId', 'id', commitmentToBuyId);
            if(!!commitmentToBuyObject && commitmentToBuyObject.ref2 == 'invisible'){
                return '';
            }
        }else{
            return '';
        }
    }
    if(value != ''){
        value = new Number(value).toFixed(0);
        value = value == "NaN" ? "" : value;
        value = String(value);
        var ps = value.split('.');
        var whole = ps[0];
        var sub = ps[1] ? '.'+ ps[1] : '';
        var r = /(\d+)(\d{3})/;
        while (r.test(whole)) {
            whole = whole.replace(r, '$1' + ',' + '$2');
        }
        value = whole + sub;
    }
    return value;
});


Core.FieldFormat.regCustomizeRender(Core.Document.FORM_NAME + '__keycodes__estOrderBdBy', function(value, p, r, rowIndex, i, ds){
    if(Core.curUserIsVendor){
        var clientDs = Core.getClientDS();
        var commitmentToBuyId = clientDs.getValue('commitmentToBuyId');
        if(!!commitmentToBuyId){
            var commitmentToBuyObject = Core.Document.getDDEnabledRecord('commitmentToBuyId', 'id', commitmentToBuyId);
            if(!!commitmentToBuyObject && commitmentToBuyObject.ref2 == 'invisible'){
                return '';
            }
        }else{
            return '';
        }
    }
    if(value != ''){
        value = new Number(value).toFixed(1);
        value = value == "NaN" ? "" : value;
        value = String(value);
        var ps = value.split('.');
        var whole = ps[0];
        var sub = ps[1] ? '.'+ ps[1] : '';
        var r = /(\d+)(\d{3})/;
        while (r.test(whole)) {
            whole = whole.replace(r, '$1' + ',' + '$2');
        }
        value = whole + sub;
    }
    return value;
});

Core.customize.isReadonlyEstOrderQtyAndBreakdown = function() {
    var result = true;
    if (!Core.curUserIsVendor) {
        var clientDs = Core.getClientDS();
        var commitmentToBuyId = clientDs.getValue('commitmentToBuyId');
        var commitmentToBuyObject = Core.Document.getDDEnabledRecord('commitmentToBuyId', 'id', commitmentToBuyId);
        if(!!commitmentToBuyObject && commitmentToBuyObject.ref1 == 'editable'){
            var accessRoles = '';
            var estOrderQtyAndBdAccessRoles = clientDs.getValue('estOrderQtyAndBdAccess');
            if (!isEmpty(estOrderQtyAndBdAccessRoles)) {
                accessRoles = estOrderQtyAndBdAccessRoles.split(',');
            }
            for (var j = 0, len = accessRoles.length; j < len; j++) {
                if (Core.ArrayUtil.contain(Core.curUserRoleCodes, accessRoles[j])) {
                    result = false;
                    break;
                }
            }
        }
    }
    return result;
}

//for printFormTRGPF012
Core.Document.regCustomizeAction("commitmentToBuy", function(){
    var clientDs = Core.getClientDS();
    var vendorStatus = clientDs.getValue('vendorStatus');
    if (vendorStatus == 'inactive') {
        Core.Msg.warning('Supplier Status = Inactive. Commitment to Buy Print Form can not be printed until the Supplier Status = Active');
    }else{
        var factoryId = clientDs.getValue('factoryId');
        var vendorId = clientDs.getValue('vendorId');
        var fileName = clientDs.getValue('CTBFileName');
        if (Ext.isEmpty(factoryId) || Ext.isEmpty(vendorId)){
            var message = '';
            if (Ext.isEmpty(vendorId) && Ext.isEmpty(factoryId)) {
                message = 'There is no Supplier and Factory assigned to this Brief. Do you wish to continue?';
            } else if (Ext.isEmpty(vendorId)) {
                message = 'There is no Supplier assigned to this Brief. Do you wish to continue?';
            } else if (Ext.isEmpty(factoryId)) {
                message = 'There is no Factory assigned to this Brief. Do you wish to continue?';
            }
            Core.Msg.confirm(message,
                function() { // [yes]
                    parameters = {
                        docIds: Core.Document.DOC_ID,
                        reportName:'TRGPF012',
                        reportFileName:fileName.slice(0,-4),
                        EXT_FILENAME:fileName,
                        whereClause: 'ms.id = \'' + Core.Document.DOC_ID + '\''
                    };
                    Core.Document.CbxReport.genReport(CORE.REPORT_TYPE_JASPER_PDF,parameters, true);
                   },
                   function() { // [No]
                   }
            );
        } else {
            parameters = {
                    docIds: Core.Document.DOC_ID,
                    reportName:'TRGPF012',
                    reportFileName:fileName.slice(0,-4),
                    EXT_FILENAME:fileName,
                    whereClause: 'ms.id = \'' + Core.Document.DOC_ID + '\''
                };
            Core.Document.CbxReport.genReport(CORE.REPORT_TYPE_JASPER_PDF,parameters, true);
        }
    }
}, false);

Core.customize.emptyPopupDropdownList = function() {
    Core.getCmp('yearId$1',CORE.CMP_TYPE_COMBOBOX).setValue('');
    Core.getCmp('deptId$1',CORE.CMP_TYPE_COMBOBOX).setValue('');
    Core.getCmp('roleId$1',CORE.CMP_TYPE_COMBOBOX).setValue('');
    Core.getCmp('currentUserId$1',CORE.CMP_TYPE_COMBOBOX).setValue('');
    Core.getCmp('newUserId$1',CORE.CMP_TYPE_COMBOBOX).setValue('');
}
//S add update brief role

Core.Document.regCustomizeAction("updateBriefRole", function(){
  Core.customize.popupRFSDWindow();
}, false);

Core.customize.popupRFSDWindow = function() {
   var win = Core.WindowUtil.getWinFromCache('updateBriefRoleWindow');
   if(win){
       Core.customize.emptyPopupDropdownList();
   }else{
       win = new Core.Window({
              id          : 'updateBriefRoleWindow',
              title       : 'Update Brief Role',
              url         : 'jsp/coles/style/popup_updateBriefRole.jsp',
              width       : 400,
              height      : 240,
              closable    : false,
              autoScroll : false,
              resizable :true
          });
       win.render();
   }
  win.show();
};


//cancle
Core.Document.regCustomizeAction("cancelUpdateBriefRole", function(){
   var win = Core.WindowUtil.getWinFromCache('updateBriefRoleWindow');
      if (win) {
          win.hide();
      }
}, false);
//


//ok
Core.Document.regCustomizeAction("OkUpdateBriefRole", function(){
    var dept = Core.getCmp('deptId$1',CORE.CMP_TYPE_COMBOBOX).getPropertyValue("id");
    var role = Core.getCmp('roleId$1',CORE.CMP_TYPE_COMBOBOX).getPropertyValue("code");
    var currentUser = Core.getCmp('currentUserId$1',CORE.CMP_TYPE_COMBOBOX).getPropertyValue("userCode");
    var newUser = Core.getCmp('newUserId$1',CORE.CMP_TYPE_COMBOBOX).getPropertyValue("userCode");
    if(!(dept && currentUser && newUser)){
         Ext.MessageBox.show({
             title:"Warning",
             msg:"Mandatory field is missing.",
             buttons:{"ok":"OK"},
             width:300,
             icon:Ext.MessageBox.ERROR
         });
        return;
    }
   Ext.MessageBox.progress("Update Brief Role", "Update Brief Role", "Update..");
   Ext.Ajax.request({
       url :  'style_batchUpdateBriefRole.action',
       success : function(response){
           var jsonData = Ext.util.JSON.decode(response.responseText);
           Ext.MessageBox.hide();
           var returnCount = jsonData['O_UPATE_COUNT'];
           if(returnCount>0){
               Ext.MessageBox.show({
                   title:"Update Brief Role Success",
                   msg:"Updates to User Role is now complete: <span style='color:red'>" + returnCount + "</span> Brief(s) are updated.",
                   buttons:{"ok":"OK"},
                   width:300,
                   icon:Ext.MessageBox.INFO
               });
           }else{
               Ext.MessageBox.show({
                   title:"Update Brief Role Fail",
                   msg:"Failed to update the Brief: <span style='color:red'>No Match Record</span>.",
                   buttons:{"ok":"OK"},
                   width:300,
                   icon:Ext.MessageBox.ERROR
               });
           }

           var win = Core.WindowUtil.getWinFromCache('updateBriefRoleWindow');
           if (win) {
               win.hide();
           }
       },
       failure : function(){
           Ext.MessageBox.show({
               title:"Update Brief Role Fail",
               msg:"Failed to update the Brief: <brief(s) Ref No>",
               buttons:{"ok":"OK"},
               width:300,
               icon:Ext.MessageBox.ERROR
           });
           var win = Core.WindowUtil.getWinFromCache('updateBriefRoleWindow');
           if (win) {
               win.hide();
           }
           },
       params: {
           SP_I_YEAR_ID:Core.getCmp('yearId$1',CORE.CMP_TYPE_COMBOBOX).getPropertyValue("id"),
           SP_I_DEPT_ID:Core.getCmp('deptId$1',CORE.CMP_TYPE_COMBOBOX).getPropertyValue("id"),
           SP_I_ROLE_CODE:Core.getCmp('roleId$1',CORE.CMP_TYPE_COMBOBOX).getPropertyValue("code"),
           SP_I_CURRENT_USER:Core.getCmp('currentUserId$1',CORE.CMP_TYPE_COMBOBOX).getPropertyValue("userCode"),
           SP_I_NEW_USER: Core.getCmp('newUserId$1',CORE.CMP_TYPE_COMBOBOX).getPropertyValue("userCode"),
           SP_I_UPDATE_USER: Core.userObj.userCode,
           SP_I_CURRENT_USER_NAME:Core.getCmp('currentUserId$1',CORE.CMP_TYPE_COMBOBOX).getDisplayValue(),
           SP_I_NEW_USER_NAME: Core.getCmp('newUserId$1',CORE.CMP_TYPE_COMBOBOX).getDisplayValue()
       }
   });

}, false);



Core.customize.reSetUserDropdownList = function() {
  var roleCombo = Core.getCmp('roleId$1',CORE.CMP_TYPE_COMBOBOX);
  var ref1 = roleCombo.getPropertyValue("ref1");
  var params = {};
  params['restrictions["mr.roleCode$eq"]'] = isEmptyString(roleCombo.getPropertyValue("code")) ? 'NULL' : roleCombo.getPropertyValue("code");
  params['limit'] = 1000;
  Ext.Ajax.request({
      url: Core.base + "get_user_info_by_dept_and_role_list_json.action",
      success: function(response, options){
          var json = Ext.util.JSON.decode(response.responseText);
          if(!!json.records){
              Core.customize.dropdownStores[ref1] = Core.form.ComboBox.refactorDataStructure(ref1, Ext.applyIf({entityFields: 'userCode,name,status'},json));
              var usrCmp = Core.getCmp('currentUserId$1',CORE.CMP_TYPE_COMBOBOX);
              Core.getCmp('currentUserId$1',CORE.CMP_TYPE_COMBOBOX).setValue('');
              usrCmp.comboExt.store.loadData(Core.customize.dropdownStores[ref1]);
              usrCmp.comboExt.store.backup_data = usrCmp.comboExt.store.data.clone();
              usrCmp = Core.getCmp('newUserId$1',CORE.CMP_TYPE_COMBOBOX);
              Core.getCmp('newUserId$1',CORE.CMP_TYPE_COMBOBOX).setValue('');
              usrCmp.comboExt.store.loadData(Core.customize.dropdownStores[ref1]);
              usrCmp.comboExt.store.backup_data = usrCmp.comboExt.store.data.clone();
          }
      },
      failure: function(response, options){
          Core.Document.handleError(response, false);
      },
      params: params,
      scope: this
  });

};


//E add update brief role


Core.customize.afterSaveEstorderBdby = function(){
    var clientDs = Core.getClientDS();
    var commitmentToBuyCode = clientDs.getValue('commitmentToBuyCode');
    if(!!commitmentToBuyCode && commitmentToBuyCode !== 'NA'){
        Ext.Ajax.request({
            url : Core.base + 'save_est_order_bd_by.action',
            success : function(response){
                var jsonData = Ext.util.JSON.decode(response.responseText);
                var len = jsonData.totalRecords;
                if(len > 0){
                    var message = '';
                    for (var i = 0; i < len; i++){
                        var r = jsonData.records[i];
                        if(r['validtype'] == 1){
                            message += 'Colour ' + r['colorNo'] + ' ' + r['contractColourCode'] + ' = ' + r['sumestorderbd'] +'%. Please amend percentage by active size to equal 100%.<br/>'
                        }else if(r['validtype'] == 2){
                            message += 'Colour ' + r['colorNo'] + ' ' + r['contractColourCode'] + ' has a zero quantity in the Estimated Order Qty field.<br/>'
                        }
                    }
                    Core.Document.showErrorMessage(message,'Warning', '',true);
                }
            },
            failure : function(){
                Core.Document.handleError(response);
            },
            scope : this,
            params: {
                "restrictions['msk.parentId$eq']" : Core.Document.DOC_ID
            }
        });
    }
}
Core.addListener(CORE.EVENT_AFTER_SUCCESS_SAVE, Core.customize.afterSaveEstorderBdby);

Core.customize.beforeDeleteStyleAttachment = function(baseParam, e){
    var records = e.grid.getSelectedRecords();
    for(var i =0, len = records.length; i < len; i++){
        if(records[i].data['undeletable'] === 'Y'){
            Core.Msg.warning('STYLE_064');
            return false;
        }
    }
}
Core.addCmpListener('attachments', CORE.EVENT_GRID_BEFORE_DELETE, Core.customize.beforeDeleteStyleAttachment);

Core.customize.uploadFieldFormat = function(config){
    return function uploadFieldFormat(value, p, r, rowIndex, i, ds) {
        var cGrid = ds.cGrid;
        var showReadOnly = (cGrid && cGrid.isReadonly()) || config.readonly
            || (config.tabId && !Core.Document.isEditableTab(config.tabId))
            || eval(r.get('readonly'));

        var columnId = p.id;
        var triggerId = name + '_' + r.data['id'];
        var gridId = ds.cGrid.conf.id;

        // get attachment id
        var attachId = '';
        var attachName = '';
        if (typeof value == 'object') {
            attachId = value.id;
            attachName = value.attachName;
        } else {
            attachId = value;
            attachName = (typeof r.data[(columnId + 'Name')] == 'undefined') ? '' : r.data[(columnId + 'Name')];
        }
        var markup = '&nbsp;';
        if (!isEmptyString(value)) {
            attachName = r.data[columnId + '_tmpObj'] ? r.data[columnId + '_tmpObj'].attachName : attachName;
            markup = '<a id="' + attachId + '" href="attachment_download.action?attachId='+ attachId + '">' + attachName + '</a>';
        }
        if (!showReadOnly) {
            var link = '<a id="' + triggerId
            + '" href="javascript:popupCustUploadDialog(\'' + rowIndex + '\',\''
            + columnId + '\',\'' + gridId + '\');">{0}</a>';
            if(isEmptyString(value)){
                markup = String.format(link, Core.Msg.getText('FIELDFORMATTER_002'));
            } else {
                if(!(value.entityName === 'Style' && r.data['undeletable'] === 'Y')){
                    markup += '<br/>' + String.format(link, Core.Msg.getText('FIELDFORMATTER_003'));
                }
            }
        }
        return markup;
   };
};
